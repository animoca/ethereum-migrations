{
  "address": "0x622657ad5996995d19E624866153a2a0A8651636",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IForwarderRegistry",
          "name": "forwarderRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        }
      ],
      "name": "initERC20DetailedStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1398dc1a6cbe4c392d05cac54cc1b0e00b16caf294b5f200d52cba8275db1e53",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xF7e30493A9018Bd8f364ba0E83E3BD4DD5d6bB2b",
    "contractAddress": null,
    "transactionIndex": 10,
    "gasUsed": "612548",
    "logsBloom": "0x
    "blockHash": "0x89730d0f9effbdfea555c88519982efcc547b8e6618662b3c65182a33d3e637f",
    "transactionHash": "0x1398dc1a6cbe4c392d05cac54cc1b0e00b16caf294b5f200d52cba8275db1e53",
    "logs": [],
    "blockNumber": 28610584,
    "cumulativeGasUsed": "5854241",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3f547F87251710F70109Ae0409d461b270709693"
  ],
  "numDeployments": 1,
  "solcInputHash": "a6ab94751dde68b4d6125ac6f179d1ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"initERC20DetailedStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\",\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"details\":\"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\",\"returns\":{\"_0\":\"The number of decimals used to display the balances.\"}},\"initERC20DetailedStorage(string,string,uint8)\":{\"details\":\"Reverts if the sender is not the proxy admin.Reverts if the proxy initialization phase is set to `1` or above.\",\"params\":{\"tokenDecimals\":\"The token decimals.\",\"tokenName\":\"The token name.\",\"tokenSymbol\":\"The token symbol.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token.\"}}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Detailed (facet version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\"},\"initERC20DetailedStorage(string,string,uint8)\":{\"notice\":\"Initializes the storage with the token details.Sets the proxy initialization phase to `1`.Marks the following ERC165 interface(s) as supported: ERC20Detailed.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/ERC20/facets/ERC20DetailedFacet.sol\":\"ERC20DetailedFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyAdminStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport {ProxyInitialization} from \\\"./ProxyInitialization.sol\\\";\\n\\nlibrary ProxyAdminStorage {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    struct Layout {\\n        address admin;\\n    }\\n\\n    // bytes32 public constant PROXYADMIN_STORAGE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin.phase\\\")) - 1);\\n\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /// @notice Initializes the storage with an initial admin (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function constructorInit(Layout storage s, address initialAdmin) internal {\\n        require(initialAdmin != address(0), \\\"ProxyAdmin: no initial admin\\\");\\n        s.admin = initialAdmin;\\n        emit AdminChanged(address(0), initialAdmin);\\n    }\\n\\n    /// @notice Initializes the storage with an initial admin (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function proxyInit(Layout storage s, address initialAdmin) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialAdmin);\\n    }\\n\\n    /// @notice Sets a new proxy admin.\\n    /// @dev Reverts if `sender` is not the proxy admin.\\n    /// @dev Emits an {AdminChanged} event if `newAdmin` is different from the current proxy admin.\\n    /// @param newAdmin The new proxy admin.\\n    function changeProxyAdmin(Layout storage s, address sender, address newAdmin) internal {\\n        address previousAdmin = s.admin;\\n        require(sender == previousAdmin, \\\"ProxyAdmin: not the admin\\\");\\n        if (previousAdmin != newAdmin) {\\n            s.admin = newAdmin;\\n            emit AdminChanged(previousAdmin, newAdmin);\\n        }\\n    }\\n\\n    /// @notice Gets the proxy admin.\\n    /// @return admin The proxy admin\\n    function proxyAdmin(Layout storage s) internal view returns (address admin) {\\n        return s.admin;\\n    }\\n\\n    /// @notice Ensures that an account is the proxy admin.\\n    /// @dev Reverts if `account` is not the proxy admin.\\n    /// @param account The account.\\n    function enforceIsProxyAdmin(Layout storage s, address account) internal view {\\n        require(account == s.admin, \\\"ProxyAdmin: not the admin\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2b916964151365f60494fa057f19318a4f917c99e044173ee674e4d3c183000\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"contracts/token/ERC20/base/ERC20DetailedBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./../libraries/ERC20DetailedStorage.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20DetailedBase is IERC20Detailed {\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    /// @inheritdoc IERC20Detailed\\n    function name() external view override returns (string memory) {\\n        return ERC20DetailedStorage.layout().name();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function symbol() external view override returns (string memory) {\\n        return ERC20DetailedStorage.layout().symbol();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function decimals() external view override returns (uint8) {\\n        return ERC20DetailedStorage.layout().decimals();\\n    }\\n}\\n\",\"keccak256\":\"0x6c6660e3a72dc1142df26fa586b6dde752cf96fd5320b4a8cd2bcb1028cd10b6\",\"license\":\"MIT\"},\"contracts/token/ERC20/facets/ERC20DetailedFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./../libraries/ERC20DetailedStorage.sol\\\";\\nimport {ProxyAdminStorage} from \\\"./../../../proxy/libraries/ProxyAdminStorage.sol\\\";\\nimport {ERC20DetailedBase} from \\\"./../base/ERC20DetailedBase.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (facet version).\\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\\ncontract ERC20DetailedFacet is ERC20DetailedBase, ForwarderRegistryContextBase {\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\\n\\n    /// @notice Initializes the storage with the token details.\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Reverts if the sender is not the proxy admin.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function initERC20DetailedStorage(string calldata tokenName, string calldata tokenSymbol, uint8 tokenDecimals) external {\\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\\n        ERC20DetailedStorage.layout().proxyInit(tokenName, tokenSymbol, tokenDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0x6f0d2caa0bfb05cfd732566212bb9230bbc2a10a1e2b0d99a1dbb87fa356a42d\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x3db432244a4107410091790ef02f8d4e68c538dddaf36e40dbc1d952b46ba2ee\",\"license\":\"MIT\"},\"contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(Layout storage s, string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(Layout storage s, string calldata tokenName, string calldata tokenSymbol, uint8 tokenDecimals) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc5d6f80dbd8563700bf91cb0fd32483acf324ab33aea08e3202428da7a6ec4b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ab5380380610ab583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610a236100926000396000818161023e01526102c60152610a236000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde0314610051578063313ce5671461006f57806395d89b4114610089578063ef96127914610091575b600080fd5b6100596100a6565b6040516100669190610664565b60405180910390f35b6100776100bd565b60405160ff9091168152602001610066565b6100596100d4565b6100a461009f366004610719565b6100e6565b005b60606100b86100b3610120565b610154565b905090565b60006100b86100ca610120565b6002015460ff1690565b60606100b86100e1610120565b6101ea565b6100ff6100f16101fb565b6100f9610342565b90610370565b610119858585858561010f610120565b94939291906103fc565b5050505050565b60008061014e60017f335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a826107a3565b92915050565b6060816000018054610165906107dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610191906107dd565b80156101de5780601f106101b3576101008083540402835291602001916101de565b820191906000526020600020905b8154815290600101906020018083116101c157829003601f168201915b50505050509050919050565b6060816001018054610165906107dd565b60003332148061020b5750601836105b1561021557503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061033157506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa15801561030d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103319190610830565b1561033b57919050565b3391505090565b60008061014e60017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61046107a3565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146103f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f50726f787941646d696e3a206e6f74207468652061646d696e0000000000000060448201526064015b60405180910390fd5b5050565b61043161042a60017fd217496980d1cb14720b20a80af36676bbece8e5feeb5d8970a9681a2c76bb756107a3565b60016104ba565b8561043d8587836108d3565b506001860161044d8385836108d3565b506002860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff83161790556104b27fa219a0250000000000000000000000000000000000000000000000000000000060016104ab61052a565b9190610558565b505050505050565b815482908211610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53746f726167653a20706861736520726561636865640000000000000000000060448201526064016103ef565b5550565b60008061014e60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6107a3565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610600576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c75650060448201526064016103ef565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600060208083528351808285015260005b8181101561069157858101830151858201604001528201610675565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60008083601f8401126106e257600080fd5b50813567ffffffffffffffff8111156106fa57600080fd5b60208301915083602082850101111561071257600080fd5b9250929050565b60008060008060006060868803121561073157600080fd5b853567ffffffffffffffff8082111561074957600080fd5b61075589838a016106d0565b9097509550602088013591508082111561076e57600080fd5b5061077b888289016106d0565b909450925050604086013560ff8116811461079557600080fd5b809150509295509295909350565b8181038181111561014e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181811c908216806107f157607f821691505b60208210810361082a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561084257600080fd5b8151801515811461085257600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156108ce57600081815260208120601f850160051c810160208610156108af5750805b601f850160051c820191505b818110156104b2578281556001016108bb565b505050565b67ffffffffffffffff8311156108eb576108eb610859565b6108ff836108f983546107dd565b83610888565b6000601f841160018114610951576000851561091b5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610119565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156109a05786850135825560209485019460019092019101610980565b50868210156109db577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b018355505050505056fea2646970667358221220459d370c0f4782462c1dfaa34519b3a3395dbff2ee51a3bfe1d53fa8f81e7ffc64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde0314610051578063313ce5671461006f57806395d89b4114610089578063ef96127914610091575b600080fd5b6100596100a6565b6040516100669190610664565b60405180910390f35b6100776100bd565b60405160ff9091168152602001610066565b6100596100d4565b6100a461009f366004610719565b6100e6565b005b60606100b86100b3610120565b610154565b905090565b60006100b86100ca610120565b6002015460ff1690565b60606100b86100e1610120565b6101ea565b6100ff6100f16101fb565b6100f9610342565b90610370565b610119858585858561010f610120565b94939291906103fc565b5050505050565b60008061014e60017f335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a826107a3565b92915050565b6060816000018054610165906107dd565b80601f0160208091040260200160405190810160405280929190818152602001828054610191906107dd565b80156101de5780601f106101b3576101008083540402835291602001916101de565b820191906000526020600020905b8154815290600101906020018083116101c157829003601f168201915b50505050509050919050565b6060816001018054610165906107dd565b60003332148061020b5750601836105b1561021557503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061033157506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa15801561030d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103319190610830565b1561033b57919050565b3391505090565b60008061014e60017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61046107a3565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146103f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f50726f787941646d696e3a206e6f74207468652061646d696e0000000000000060448201526064015b60405180910390fd5b5050565b61043161042a60017fd217496980d1cb14720b20a80af36676bbece8e5feeb5d8970a9681a2c76bb756107a3565b60016104ba565b8561043d8587836108d3565b506001860161044d8385836108d3565b506002860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff83161790556104b27fa219a0250000000000000000000000000000000000000000000000000000000060016104ab61052a565b9190610558565b505050505050565b815482908211610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53746f726167653a20706861736520726561636865640000000000000000000060448201526064016103ef565b5550565b60008061014e60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6107a3565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610600576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c75650060448201526064016103ef565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600060208083528351808285015260005b8181101561069157858101830151858201604001528201610675565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60008083601f8401126106e257600080fd5b50813567ffffffffffffffff8111156106fa57600080fd5b60208301915083602082850101111561071257600080fd5b9250929050565b60008060008060006060868803121561073157600080fd5b853567ffffffffffffffff8082111561074957600080fd5b61075589838a016106d0565b9097509550602088013591508082111561076e57600080fd5b5061077b888289016106d0565b909450925050604086013560ff8116811461079557600080fd5b809150509295509295909350565b8181038181111561014e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181811c908216806107f157607f821691505b60208210810361082a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561084257600080fd5b8151801515811461085257600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156108ce57600081815260208120601f850160051c810160208610156108af5750805b601f850160051c820191505b818110156104b2578281556001016108bb565b505050565b67ffffffffffffffff8311156108eb576108eb610859565b6108ff836108f983546107dd565b83610888565b6000601f841160018114610951576000851561091b5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610119565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156109a05786850135825560209485019460019092019101610980565b50868210156109db577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b018355505050505056fea2646970667358221220459d370c0f4782462c1dfaa34519b3a3395dbff2ee51a3bfe1d53fa8f81e7ffc64736f6c63430008110033",
  "devdoc": {
    "details": "This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.",
    "kind": "dev",
    "methods": {
      "decimals()": {
        "details": "Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.",
        "returns": {
          "_0": "The number of decimals used to display the balances."
        }
      },
      "initERC20DetailedStorage(string,string,uint8)": {
        "details": "Reverts if the sender is not the proxy admin.Reverts if the proxy initialization phase is set to `1` or above.",
        "params": {
          "tokenDecimals": "The token decimals.",
          "tokenName": "The token name.",
          "tokenSymbol": "The token symbol."
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token."
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token."
        }
      }
    },
    "title": "ERC20 Fungible Token Standard, optional extension: Detailed (facet version).",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei."
      },
      "initERC20DetailedStorage(string,string,uint8)": {
        "notice": "Initializes the storage with the token details.Sets the proxy initialization phase to `1`.Marks the following ERC165 interface(s) as supported: ERC20Detailed."
      },
      "name()": {
        "notice": "Gets the name of the token. E.g. \"My Token\"."
      },
      "symbol()": {
        "notice": "Gets the symbol of the token. E.g. \"TOK\"."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}