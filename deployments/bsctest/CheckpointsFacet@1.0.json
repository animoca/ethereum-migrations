{
  "address": "0x87312D370248200Cb04C02c0C97E8E85DBC5Da2a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IForwarderRegistry",
          "name": "forwarderRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "checkpointId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CheckpointSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "checkpointIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "timestamps",
          "type": "uint256[]"
        }
      ],
      "name": "batchSetCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "checkpointId",
          "type": "bytes32"
        }
      ],
      "name": "checkpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "checkpointId",
          "type": "bytes32"
        }
      ],
      "name": "checkpointReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "checkpointId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "checkpointId",
          "type": "bytes32"
        }
      ],
      "name": "triggerCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x65e542339e4d29e04cc4abc99623d512d04046a82f9e7c22e91a7d3f98d9e61a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xF7e30493A9018Bd8f364ba0E83E3BD4DD5d6bB2b",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "658261",
    "logsBloom": "0x
    "blockHash": "0x66d585f319b322025830b89fc0baffafed16f0e38899cc38e8814311fe1e17e1",
    "transactionHash": "0x65e542339e4d29e04cc4abc99623d512d04046a82f9e7c22e91a7d3f98d9e61a",
    "logs": [],
    "blockNumber": 28608469,
    "cumulativeGasUsed": "700261",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3f547F87251710F70109Ae0409d461b270709693"
  ],
  "numDeployments": 1,
  "solcInputHash": "a6ab94751dde68b4d6125ac6f179d1ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"checkpointId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CheckpointSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"checkpointIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"name\":\"batchSetCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"checkpointId\",\"type\":\"bytes32\"}],\"name\":\"checkpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"checkpointId\",\"type\":\"bytes32\"}],\"name\":\"checkpointReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"checkpointId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"checkpointId\",\"type\":\"bytes32\"}],\"name\":\"triggerCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).Note: This facet depends on {ProxyAdminFacet} and {ContractOwnershipFacet}.\",\"kind\":\"dev\",\"methods\":{\"batchSetCheckpoint(bytes32[],uint256[])\":{\"details\":\"Reverts if the caller is not the contract owner.Reverts if one of the checkpoints is already set.Emits a {CheckpointSet} event for each timestamp set to a non-zero value.\",\"params\":{\"checkpointIds\":\"The checkpoint identifier.\",\"timestamps\":\"The checkpoint timestamp.\"}},\"checkpoint(bytes32)\":{\"params\":{\"checkpointId\":\"The checkpoint identifier.\"},\"returns\":{\"_0\":\"timestamp The timestamp associated to the checkpoint. A zero value indicates that the checkpoint is not set.\"}},\"checkpointReached(bytes32)\":{\"params\":{\"checkpointId\":\"The checkpoint identifier.\"},\"returns\":{\"_0\":\"reached True if the checkpoint has been set and the current block timestamp has already reached it, false otherwise.\"}},\"setCheckpoint(bytes32,uint256)\":{\"details\":\"Reverts if the caller is not the contract owner.Reverts if the checkpoint is already set.Emits a {CheckpointSet} event if the timestamp is set to a non-zero value.\",\"params\":{\"checkpointId\":\"The checkpoint identifiers.\",\"timestamp\":\"The checkpoint timestamps.\"}},\"triggerCheckpoint(bytes32)\":{\"details\":\"Reverts if the caller is not the contract owner.Reverts if the checkpoint is set and the current block timestamp has already reached it.Emits a {CheckpointSet} event.\",\"params\":{\"checkpointId\":\"The checkpoint identifier.\"}}},\"title\":\"Timestamp-based checkpoints management (facet version).\",\"version\":1},\"userdoc\":{\"events\":{\"CheckpointSet(bytes32,uint256)\":{\"notice\":\"Emitted when a checkpoint is set.\"}},\"kind\":\"user\",\"methods\":{\"batchSetCheckpoint(bytes32[],uint256[])\":{\"notice\":\"Sets a batch of checkpoints.\"},\"checkpoint(bytes32)\":{\"notice\":\"Gets the checkpoint timestamp.\"},\"checkpointReached(bytes32)\":{\"notice\":\"Retrieves whether the checkpoint has been reached already.\"},\"setCheckpoint(bytes32,uint256)\":{\"notice\":\"Sets the checkpoints.\"},\"triggerCheckpoint(bytes32)\":{\"notice\":\"Sets the checkpoint to the current block timestamp.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lifecycle/facets/CheckpointsFacet.sol\":\"CheckpointsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"contracts/lifecycle/base/CheckpointsBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {CheckpointsStorage} from \\\"./../libraries/CheckpointsStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Timestamp-based checkpoints management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract CheckpointsBase is Context {\\n    using CheckpointsStorage for CheckpointsStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Emitted when a checkpoint is set.\\n    /// @param checkpointId The checkpoint identifier.\\n    /// @param timestamp The timestamp associated to the checkpoint.\\n    event CheckpointSet(bytes32 checkpointId, uint256 timestamp);\\n\\n    /// @notice Sets the checkpoints.\\n    /// @dev Reverts if the caller is not the contract owner.\\n    /// @dev Reverts if the checkpoint is already set.\\n    /// @dev Emits a {CheckpointSet} event if the timestamp is set to a non-zero value.\\n    /// @param checkpointId The checkpoint identifiers.\\n    /// @param timestamp The checkpoint timestamps.\\n    function setCheckpoint(bytes32 checkpointId, uint256 timestamp) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        CheckpointsStorage.layout().setCheckpoint(checkpointId, timestamp);\\n    }\\n\\n    /// @notice Sets a batch of checkpoints.\\n    /// @dev Reverts if the caller is not the contract owner.\\n    /// @dev Reverts if one of the checkpoints is already set.\\n    /// @dev Emits a {CheckpointSet} event for each timestamp set to a non-zero value.\\n    /// @param checkpointIds The checkpoint identifier.\\n    /// @param timestamps The checkpoint timestamp.\\n    function batchSetCheckpoint(bytes32[] calldata checkpointIds, uint256[] calldata timestamps) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        CheckpointsStorage.layout().batchSetCheckpoint(checkpointIds, timestamps);\\n    }\\n\\n    /// @notice Sets the checkpoint to the current block timestamp.\\n    /// @dev Reverts if the caller is not the contract owner.\\n    /// @dev Reverts if the checkpoint is set and the current block timestamp has already reached it.\\n    /// @dev Emits a {CheckpointSet} event.\\n    /// @param checkpointId The checkpoint identifier.\\n    function triggerCheckpoint(bytes32 checkpointId) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        CheckpointsStorage.layout().triggerCheckpoint(checkpointId);\\n    }\\n\\n    /// @notice Gets the checkpoint timestamp.\\n    /// @param checkpointId The checkpoint identifier.\\n    /// @return timestamp The timestamp associated to the checkpoint. A zero value indicates that the checkpoint is not set.\\n    function checkpoint(bytes32 checkpointId) external view returns (uint256) {\\n        return CheckpointsStorage.layout().checkpoint(checkpointId);\\n    }\\n\\n    /// @notice Retrieves whether the checkpoint has been reached already.\\n    /// @param checkpointId The checkpoint identifier.\\n    /// @return reached True if the checkpoint has been set and the current block timestamp has already reached it, false otherwise.\\n    function checkpointReached(bytes32 checkpointId) external view returns (bool) {\\n        return CheckpointsStorage.layout().checkpointReached(checkpointId);\\n    }\\n}\\n\",\"keccak256\":\"0x170e8b2e745abc9437f84c929ff01e74e21fabf6b23e9a14120a3bb44ed765da\",\"license\":\"MIT\"},\"contracts/lifecycle/facets/CheckpointsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ProxyAdminStorage} from \\\"./../../proxy/libraries/ProxyAdminStorage.sol\\\";\\nimport {CheckpointsBase} from \\\"./../base/CheckpointsBase.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Timestamp-based checkpoints management (facet version).\\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {ContractOwnershipFacet}.\\ncontract CheckpointsFacet is CheckpointsBase, ForwarderRegistryContextBase {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x1449bdc5b504aac8017aeb8cfdd9cfd073a12838ed781a9f07d72272043addf3\",\"license\":\"MIT\"},\"contracts/lifecycle/libraries/CheckpointsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Bytes32} from \\\"./../../utils/libraries/Bytes32.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary CheckpointsStorage {\\n    using Bytes32 for bytes32;\\n    using CheckpointsStorage for CheckpointsStorage.Layout;\\n\\n    struct Layout {\\n        // checkpointId => timestamp\\n        mapping(bytes32 => uint256) checkpoints;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.lifecycle.Checkpoints.storage\\\")) - 1);\\n\\n    event CheckpointSet(bytes32 checkpointId, uint256 timestamp);\\n\\n    /// @notice Sets the checkpoint.\\n    /// @dev Reverts if the checkpoint is already set.\\n    /// @dev Emits a {CheckpointSet} event if the timestamp is set to a non-zero value.\\n    /// @param checkpointId The checkpoint identifier.\\n    /// @param timestamp The checkpoint timestamp.\\n    function setCheckpoint(Layout storage s, bytes32 checkpointId, uint256 timestamp) internal {\\n        if (s.checkpoints[checkpointId] != 0) {\\n            revert(string(abi.encodePacked(\\\"Checkpoints: checkpoint '\\\", checkpointId.toASCIIString(), \\\"' already set\\\")));\\n        }\\n        if (timestamp != 0) {\\n            s.checkpoints[checkpointId] = timestamp;\\n            emit CheckpointSet(checkpointId, timestamp);\\n        }\\n    }\\n\\n    /// @notice Sets a batch of checkpoints.\\n    /// @dev Reverts if one of the checkpoints is already set.\\n    /// @dev Emits a {CheckpointSet} event for each timestamp set to a non-zero value.\\n    /// @param checkpointIds The checkpoint identifiers.\\n    /// @param timestamps The checkpoint timestamps.\\n    function batchSetCheckpoint(Layout storage s, bytes32[] calldata checkpointIds, uint256[] calldata timestamps) internal {\\n        uint256 length = checkpointIds.length;\\n        require(length == timestamps.length, \\\"Checkpoints: wrong array length\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                s.setCheckpoint(checkpointIds[i], timestamps[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Sets the checkpoint to the current block timestamp.\\n    /// @dev Reverts if the checkpoint is set and the current block timestamp has already reached it.\\n    /// @dev Emits a {CheckpointSet} event.\\n    /// @param checkpointId The checkpoint identifier.\\n    function triggerCheckpoint(Layout storage s, bytes32 checkpointId) internal {\\n        s.enforceCheckpointNotReached(checkpointId);\\n        s.checkpoints[checkpointId] = block.timestamp;\\n        emit CheckpointSet(checkpointId, block.timestamp);\\n    }\\n\\n    /// @notice Gets the checkpoint timestamp.\\n    /// @param checkpointId The checkpoint identifier.\\n    /// @return timestamp The timestamp associated to the checkpoint. A zero value indicates that the checkpoint is not set.\\n    function checkpoint(Layout storage s, bytes32 checkpointId) internal view returns (uint256 timestamp) {\\n        return s.checkpoints[checkpointId];\\n    }\\n\\n    /// @notice Retrieves whether the checkpoint has been reached already.\\n    /// @param checkpointId The checkpoint identifier.\\n    /// @return reached True if the checkpoint has been set and the current block timestamp has already reached it, false otherwise.\\n    function checkpointReached(Layout storage s, bytes32 checkpointId) internal view returns (bool) {\\n        uint256 checkpoint_ = s.checkpoints[checkpointId];\\n        return checkpoint_ != 0 && block.timestamp >= checkpoint_;\\n    }\\n\\n    /// @notice Ensures that the checkpoint has been reached already.\\n    /// @dev Reverts if the checkpoint is not set or if the current block timestamp has not reached it yet.\\n    /// @param checkpointId The checkpoint identifier.\\n    function enforceCheckpointReached(Layout storage s, bytes32 checkpointId) internal view {\\n        if (!s.checkpointReached(checkpointId)) {\\n            revert(string(abi.encodePacked(\\\"Checkpoints: checkpoint '\\\", checkpointId.toASCIIString(), \\\"' not reached yet\\\")));\\n        }\\n    }\\n\\n    /// @notice Ensures that the checkpoint has not been reached yet.\\n    /// @dev Reverts if checkpoint is set and the current block timestamp has already reached it.\\n    /// @param checkpointId The checkpoint identifier.\\n    function enforceCheckpointNotReached(Layout storage s, bytes32 checkpointId) internal view {\\n        if (s.checkpointReached(checkpointId)) {\\n            revert(string(abi.encodePacked(\\\"Checkpoints: checkpoint '\\\", checkpointId.toASCIIString(), \\\"' already reached\\\")));\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48098696cf26275fd006e2928f2c11e7fe4cb78f707db4405f179f44ae4a386c\",\"license\":\"MIT\"},\"contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyAdminStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport {ProxyInitialization} from \\\"./ProxyInitialization.sol\\\";\\n\\nlibrary ProxyAdminStorage {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    struct Layout {\\n        address admin;\\n    }\\n\\n    // bytes32 public constant PROXYADMIN_STORAGE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin.phase\\\")) - 1);\\n\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /// @notice Initializes the storage with an initial admin (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function constructorInit(Layout storage s, address initialAdmin) internal {\\n        require(initialAdmin != address(0), \\\"ProxyAdmin: no initial admin\\\");\\n        s.admin = initialAdmin;\\n        emit AdminChanged(address(0), initialAdmin);\\n    }\\n\\n    /// @notice Initializes the storage with an initial admin (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function proxyInit(Layout storage s, address initialAdmin) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialAdmin);\\n    }\\n\\n    /// @notice Sets a new proxy admin.\\n    /// @dev Reverts if `sender` is not the proxy admin.\\n    /// @dev Emits an {AdminChanged} event if `newAdmin` is different from the current proxy admin.\\n    /// @param newAdmin The new proxy admin.\\n    function changeProxyAdmin(Layout storage s, address sender, address newAdmin) internal {\\n        address previousAdmin = s.admin;\\n        require(sender == previousAdmin, \\\"ProxyAdmin: not the admin\\\");\\n        if (previousAdmin != newAdmin) {\\n            s.admin = newAdmin;\\n            emit AdminChanged(previousAdmin, newAdmin);\\n        }\\n    }\\n\\n    /// @notice Gets the proxy admin.\\n    /// @return admin The proxy admin\\n    function proxyAdmin(Layout storage s) internal view returns (address admin) {\\n        return s.admin;\\n    }\\n\\n    /// @notice Ensures that an account is the proxy admin.\\n    /// @dev Reverts if `account` is not the proxy admin.\\n    /// @param account The account.\\n    function enforceIsProxyAdmin(Layout storage s, address account) internal view {\\n        require(account == s.admin, \\\"ProxyAdmin: not the admin\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2b916964151365f60494fa057f19318a4f917c99e044173ee674e4d3c183000\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"contracts/utils/libraries/Bytes32.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary Bytes32 {\\n    /// @notice Converts bytes32 to base32 string.\\n    /// @param value value to convert.\\n    /// @return the converted base32 string.\\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n            uint256 i = uint256(value);\\n            uint256 k = 52;\\n            bytes memory bstr = new bytes(k);\\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\\n            i /= 8;\\n            while (k > 0) {\\n                bstr[--k] = base32Alphabet[i % 32];\\n                i /= 32;\\n            }\\n            return string(bstr);\\n        }\\n    }\\n\\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\\n    /// @param value value to convert.\\n    /// @return the converted ASCII string.\\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\\n        unchecked {\\n            if (value == 0x00) return \\\"\\\";\\n            bytes memory bytesString = bytes(abi.encodePacked(value));\\n            uint256 pos = 31;\\n            while (true) {\\n                if (bytesString[pos] != 0) break;\\n                --pos;\\n            }\\n            bytes memory asciiString = new bytes(pos + 1);\\n            for (uint256 i; i <= pos; ++i) {\\n                asciiString[i] = bytesString[i];\\n            }\\n            return string(asciiString);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aaa951b251b0e508e206eace8d71f779a071b5a18634814ed503bb94db9b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610b86380380610b8683398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610af4610092600039600081816104ff01526105870152610af46000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80634f410a80116100505780634f410a80146100a95780635b34eba0146100bc578063deb4d746146100dd57600080fd5b8063151bdba61461006c5780633b14936914610094575b600080fd5b61007f61007a3660046107bd565b6100f0565b60405190151581526020015b60405180910390f35b6100a76100a2366004610822565b61010a565b005b6100a76100b736600461088e565b610141565b6100cf6100ca3660046107bd565b610164565b60405190815260200161008b565b6100a76100eb3660046107bd565b610182565b6000610104826100fe6101a2565b906101d0565b92915050565b6101236101156101f6565b61011d610205565b90610233565b61013b848484846101326101a2565b939291906102bb565b50505050565b61014c6101156101f6565b61016082826101596101a2565b9190610385565b5050565b6000610104826101726101a2565b6000918252602052604090205490565b61018d6101156101f6565b61019f816101996101a2565b90610465565b50565b60008061010460017f0def758eb96c12015155889b8e63d1cb5c0dbce5585bbdf9d99ea353f56c716c6108b0565b60008181526020839052604081205480158015906101ee5750804210155b949350505050565b60006102006104bc565b905090565b60008061010460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6108b0565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e6572000000000000000060448201526064015b60405180910390fd5b82818114610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f436865636b706f696e74733a2077726f6e67206172726179206c656e6774680060448201526064016102b2565b60005b81811461037c57610374868683818110610344576103446108ea565b9050602002013585858481811061035d5761035d6108ea565b90506020020135896103859092919063ffffffff16565b600101610328565b50505050505050565b60008281526020849052604090205415610410576103a282610603565b6040516020016103b2919061093d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526102b2916004016109a9565b8015610460576000828152602084815260409182902083905581518481529081018390527f099ea97db121bdf4a102e67113e27b6bb74713015b32a5f0e1c3ea0d44fb2953910160405180910390a15b505050565b61046f8282610795565b6000818152602083815260409182902042908190558251848152918201527f099ea97db121bdf4a102e67113e27b6bb74713015b32a5f0e1c3ea0d44fb2953910160405180910390a15050565b6000333214806104cc5750601836105b156104d657503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806105f257506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f291906109fa565b156105fc57919050565b3391505090565b6060600082900361062257505060408051602081019091526000815290565b60008260405160200161063791815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050601f5b81818151811061067c5761067c6108ea565b01602001517fff00000000000000000000000000000000000000000000000000000000000000166000036106d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161066a565b60008160010167ffffffffffffffff8111156106ef576106ef610a23565b6040519080825280601f01601f191660200182016040528015610719576020820181803683370190505b50905060005b82811161078c57838181518110610738576107386108ea565b602001015160f81c60f81b828281518110610755576107556108ea565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060010161071f565b50949350505050565b61079f82826101d0565b15610160576107ad81610603565b6040516020016103b29190610a52565b6000602082840312156107cf57600080fd5b5035919050565b60008083601f8401126107e857600080fd5b50813567ffffffffffffffff81111561080057600080fd5b6020830191508360208260051b850101111561081b57600080fd5b9250929050565b6000806000806040858703121561083857600080fd5b843567ffffffffffffffff8082111561085057600080fd5b61085c888389016107d6565b9096509450602087013591508082111561087557600080fd5b50610882878288016107d6565b95989497509550505050565b600080604083850312156108a157600080fd5b50508035926020909101359150565b81810381811115610104577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b8381101561093457818101518382015260200161091c565b50506000910152565b7f436865636b706f696e74733a20636865636b706f696e74202700000000000000815260008251610975816019850160208701610919565b7f2720616c726561647920736574000000000000000000000000000000000000006019939091019283015250602601919050565b60208152600082518060208401526109c8816040850160208701610919565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600060208284031215610a0c57600080fd5b81518015158114610a1c57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f436865636b706f696e74733a20636865636b706f696e74202700000000000000815260008251610a8a816019850160208701610919565b7f2720616c726561647920726561636865640000000000000000000000000000006019939091019283015250602a0191905056fea26469706673582212200048baae27f6a4ed7d8684c2584d9a52af32b29e57d3392736a0251751e3d6a864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80634f410a80116100505780634f410a80146100a95780635b34eba0146100bc578063deb4d746146100dd57600080fd5b8063151bdba61461006c5780633b14936914610094575b600080fd5b61007f61007a3660046107bd565b6100f0565b60405190151581526020015b60405180910390f35b6100a76100a2366004610822565b61010a565b005b6100a76100b736600461088e565b610141565b6100cf6100ca3660046107bd565b610164565b60405190815260200161008b565b6100a76100eb3660046107bd565b610182565b6000610104826100fe6101a2565b906101d0565b92915050565b6101236101156101f6565b61011d610205565b90610233565b61013b848484846101326101a2565b939291906102bb565b50505050565b61014c6101156101f6565b61016082826101596101a2565b9190610385565b5050565b6000610104826101726101a2565b6000918252602052604090205490565b61018d6101156101f6565b61019f816101996101a2565b90610465565b50565b60008061010460017f0def758eb96c12015155889b8e63d1cb5c0dbce5585bbdf9d99ea353f56c716c6108b0565b60008181526020839052604081205480158015906101ee5750804210155b949350505050565b60006102006104bc565b905090565b60008061010460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6108b0565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e6572000000000000000060448201526064015b60405180910390fd5b82818114610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f436865636b706f696e74733a2077726f6e67206172726179206c656e6774680060448201526064016102b2565b60005b81811461037c57610374868683818110610344576103446108ea565b9050602002013585858481811061035d5761035d6108ea565b90506020020135896103859092919063ffffffff16565b600101610328565b50505050505050565b60008281526020849052604090205415610410576103a282610603565b6040516020016103b2919061093d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526102b2916004016109a9565b8015610460576000828152602084815260409182902083905581518481529081018390527f099ea97db121bdf4a102e67113e27b6bb74713015b32a5f0e1c3ea0d44fb2953910160405180910390a15b505050565b61046f8282610795565b6000818152602083815260409182902042908190558251848152918201527f099ea97db121bdf4a102e67113e27b6bb74713015b32a5f0e1c3ea0d44fb2953910160405180910390a15050565b6000333214806104cc5750601836105b156104d657503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806105f257506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f291906109fa565b156105fc57919050565b3391505090565b6060600082900361062257505060408051602081019091526000815290565b60008260405160200161063791815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050601f5b81818151811061067c5761067c6108ea565b01602001517fff00000000000000000000000000000000000000000000000000000000000000166000036106d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161066a565b60008160010167ffffffffffffffff8111156106ef576106ef610a23565b6040519080825280601f01601f191660200182016040528015610719576020820181803683370190505b50905060005b82811161078c57838181518110610738576107386108ea565b602001015160f81c60f81b828281518110610755576107556108ea565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060010161071f565b50949350505050565b61079f82826101d0565b15610160576107ad81610603565b6040516020016103b29190610a52565b6000602082840312156107cf57600080fd5b5035919050565b60008083601f8401126107e857600080fd5b50813567ffffffffffffffff81111561080057600080fd5b6020830191508360208260051b850101111561081b57600080fd5b9250929050565b6000806000806040858703121561083857600080fd5b843567ffffffffffffffff8082111561085057600080fd5b61085c888389016107d6565b9096509450602087013591508082111561087557600080fd5b50610882878288016107d6565b95989497509550505050565b600080604083850312156108a157600080fd5b50508035926020909101359150565b81810381811115610104577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b8381101561093457818101518382015260200161091c565b50506000910152565b7f436865636b706f696e74733a20636865636b706f696e74202700000000000000815260008251610975816019850160208701610919565b7f2720616c726561647920736574000000000000000000000000000000000000006019939091019283015250602601919050565b60208152600082518060208401526109c8816040850160208701610919565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600060208284031215610a0c57600080fd5b81518015158114610a1c57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f436865636b706f696e74733a20636865636b706f696e74202700000000000000815260008251610a8a816019850160208701610919565b7f2720616c726561647920726561636865640000000000000000000000000000006019939091019283015250602a0191905056fea26469706673582212200048baae27f6a4ed7d8684c2584d9a52af32b29e57d3392736a0251751e3d6a864736f6c63430008110033",
  "devdoc": {
    "details": "This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).Note: This facet depends on {ProxyAdminFacet} and {ContractOwnershipFacet}.",
    "kind": "dev",
    "methods": {
      "batchSetCheckpoint(bytes32[],uint256[])": {
        "details": "Reverts if the caller is not the contract owner.Reverts if one of the checkpoints is already set.Emits a {CheckpointSet} event for each timestamp set to a non-zero value.",
        "params": {
          "checkpointIds": "The checkpoint identifier.",
          "timestamps": "The checkpoint timestamp."
        }
      },
      "checkpoint(bytes32)": {
        "params": {
          "checkpointId": "The checkpoint identifier."
        },
        "returns": {
          "_0": "timestamp The timestamp associated to the checkpoint. A zero value indicates that the checkpoint is not set."
        }
      },
      "checkpointReached(bytes32)": {
        "params": {
          "checkpointId": "The checkpoint identifier."
        },
        "returns": {
          "_0": "reached True if the checkpoint has been set and the current block timestamp has already reached it, false otherwise."
        }
      },
      "setCheckpoint(bytes32,uint256)": {
        "details": "Reverts if the caller is not the contract owner.Reverts if the checkpoint is already set.Emits a {CheckpointSet} event if the timestamp is set to a non-zero value.",
        "params": {
          "checkpointId": "The checkpoint identifiers.",
          "timestamp": "The checkpoint timestamps."
        }
      },
      "triggerCheckpoint(bytes32)": {
        "details": "Reverts if the caller is not the contract owner.Reverts if the checkpoint is set and the current block timestamp has already reached it.Emits a {CheckpointSet} event.",
        "params": {
          "checkpointId": "The checkpoint identifier."
        }
      }
    },
    "title": "Timestamp-based checkpoints management (facet version).",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CheckpointSet(bytes32,uint256)": {
        "notice": "Emitted when a checkpoint is set."
      }
    },
    "kind": "user",
    "methods": {
      "batchSetCheckpoint(bytes32[],uint256[])": {
        "notice": "Sets a batch of checkpoints."
      },
      "checkpoint(bytes32)": {
        "notice": "Gets the checkpoint timestamp."
      },
      "checkpointReached(bytes32)": {
        "notice": "Retrieves whether the checkpoint has been reached already."
      },
      "setCheckpoint(bytes32,uint256)": {
        "notice": "Sets the checkpoints."
      },
      "triggerCheckpoint(bytes32)": {
        "notice": "Sets the checkpoint to the current block timestamp."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}