{
  "address": "0x435362587333A9E491e1E978ee58c7122e708145",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiStaticCall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiStaticCall.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiStaticCall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiStaticCall.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x38ff035b9b16f46829d752089eb6a129b695441ea0b6ccbb9a64752277b5eb8d",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xF7e30493A9018Bd8f364ba0E83E3BD4DD5d6bB2b",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "364748",
    "logsBloom": "0x
    "blockHash": "0xcc16c2bac0531337e5a2ddee93db6ada0e2b1a8133873c6fa9831d9f83e18b2f",
    "transactionHash": "0x38ff035b9b16f46829d752089eb6a129b695441ea0b6ccbb9a64752277b5eb8d",
    "logs": [],
    "blockNumber": 28610630,
    "cumulativeGasUsed": "442851",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a6ab94751dde68b4d6125ac6f179d1ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiStaticCall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiStaticCall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiStaticCall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiStaticCall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/makerdao/multicall (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"tryAggregate(bool,(address,bytes)[])\":{\"details\":\"Reverts if `requireSuccess` is true and one of the static calls fails.\",\"params\":{\"calls\":\"The list of target contracts and encoded function calls for each static call.\",\"requireSuccess\":\"Whether a failed static call should trigger a revert.\"},\"returns\":{\"returnData\":\"The list of success flags and raw return data for each static call.\"}},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"details\":\"Warning: Do not use this function as part of a transaction: `blockNumber` would not be meaningful due to transactions ordering.Reverts if `requireSuccess` is true and one of the static calls fails.\",\"params\":{\"calls\":\"The list of target contracts and encoded function calls for each static call.\",\"requireSuccess\":\"Whether a failed static call should trigger a revert.\"},\"returns\":{\"blockNumber\":\"The latest mined block number indicating at which point the return data is valid.\",\"returnData\":\"The list of success flags and raw return data for each static call.\"}}},\"title\":\"MultiStaticCall - Aggregate results from multiple static calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tryAggregate(bool,(address,bytes)[])\":{\"notice\":\"Aggregates the results of multiple static calls.\"},\"tryBlockAndAggregate(bool,(address,bytes)[])\":{\"notice\":\"Aggregates the results of multiple static calls, together with the associated block number.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/MultiStaticCall.sol\":\"MultiStaticCall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/utils/MultiStaticCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title MultiStaticCall - Aggregate results from multiple static calls\\n/// @dev Derived from https://github.com/makerdao/multicall (MIT licence)\\ncontract MultiStaticCall {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    /// @notice Aggregates the results of multiple static calls.\\n    /// @dev Reverts if `requireSuccess` is true and one of the static calls fails.\\n    /// @param requireSuccess Whether a failed static call should trigger a revert.\\n    /// @param calls The list of target contracts and encoded function calls for each static call.\\n    /// @return returnData The list of success flags and raw return data for each static call.\\n    function tryAggregate(bool requireSuccess, Call[] calldata calls) public view returns (Result[] memory returnData) {\\n        uint256 length = calls.length;\\n        returnData = new Result[](length);\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                (bool success, bytes memory ret) = calls[i].target.staticcall(calls[i].callData);\\n\\n                if (requireSuccess) {\\n                    require(success, \\\"MultiStaticCall: call failed\\\");\\n                }\\n\\n                returnData[i] = Result(success, ret);\\n            }\\n        }\\n    }\\n\\n    /// @notice Aggregates the results of multiple static calls, together with the associated block number.\\n    /// @dev Warning: Do not use this function as part of a transaction: `blockNumber` would not be meaningful due to transactions ordering.\\n    /// @dev Reverts if `requireSuccess` is true and one of the static calls fails.\\n    /// @param requireSuccess Whether a failed static call should trigger a revert.\\n    /// @param calls The list of target contracts and encoded function calls for each static call.\\n    /// @return blockNumber The latest mined block number indicating at which point the return data is valid.\\n    /// @return returnData The list of success flags and raw return data for each static call.\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls) public view returns (uint256 blockNumber, Result[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n}\\n\",\"keccak256\":\"0xc2bcbb3672e11dda78c2ee2c0500204f0d9d1b840d2b6ab0161c9b22c8b07f52\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105a4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063399542e91461003b578063bce38bd714610065575b600080fd5b61004e610049366004610294565b610085565b60405161005c9291906103e5565b60405180910390f35b610078610073366004610294565b61009d565b60405161005c9190610406565b43606061009385858561009d565b9050935093915050565b6060818067ffffffffffffffff8111156100b9576100b9610420565b6040519080825280602002602001820160405280156100ff57816020015b6040805180820190915260008152606060208201528152602001906001900390816100d75790505b50915060005b81811461028b576000808686848181106101215761012161044f565b9050602002810190610133919061047e565b6101419060208101906104bc565b73ffffffffffffffffffffffffffffffffffffffff168787858181106101695761016961044f565b905060200281019061017b919061047e565b6101899060208101906104f2565b60405161019792919061055e565b600060405180830381855afa9150503d80600081146101d2576040519150601f19603f3d011682016040523d82523d6000602084013e6101d7565b606091505b5091509150871561024d578161024d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4d756c746953746174696343616c6c3a2063616c6c206661696c656400000000604482015260640160405180910390fd5b60405180604001604052808315158152602001828152508584815181106102765761027661044f565b60209081029190910101525050600101610105565b50509392505050565b6000806000604084860312156102a957600080fd5b833580151581146102b957600080fd5b9250602084013567ffffffffffffffff808211156102d657600080fd5b818601915086601f8301126102ea57600080fd5b8135818111156102f957600080fd5b8760208260051b850101111561030e57600080fd5b6020830194508093505050509250925092565b600082825180855260208086019550808260051b8401018186016000805b858110156103d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe087850381018b5283518051151586528601516040878701819052815190870181905284905b808210156103ab57828201890151888301606001529088019061038d565b87810160609081018790529d89019d601f9091019093169096019091019450509184019160010161033f565b509198975050505050505050565b8281526040602082015260006103fe6040830184610321565b949350505050565b6020815260006104196020830184610321565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126104b257600080fd5b9190910192915050565b6000602082840312156104ce57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461041957600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261052757600080fd5b83018035915067ffffffffffffffff82111561054257600080fd5b60200191503681900382131561055757600080fd5b9250929050565b818382376000910190815291905056fea264697066735822122091997eaa50636245972c9f2af4ee17ee87a66a2ec0f7dbb26fe3efdb51b0d9dc64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063399542e91461003b578063bce38bd714610065575b600080fd5b61004e610049366004610294565b610085565b60405161005c9291906103e5565b60405180910390f35b610078610073366004610294565b61009d565b60405161005c9190610406565b43606061009385858561009d565b9050935093915050565b6060818067ffffffffffffffff8111156100b9576100b9610420565b6040519080825280602002602001820160405280156100ff57816020015b6040805180820190915260008152606060208201528152602001906001900390816100d75790505b50915060005b81811461028b576000808686848181106101215761012161044f565b9050602002810190610133919061047e565b6101419060208101906104bc565b73ffffffffffffffffffffffffffffffffffffffff168787858181106101695761016961044f565b905060200281019061017b919061047e565b6101899060208101906104f2565b60405161019792919061055e565b600060405180830381855afa9150503d80600081146101d2576040519150601f19603f3d011682016040523d82523d6000602084013e6101d7565b606091505b5091509150871561024d578161024d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4d756c746953746174696343616c6c3a2063616c6c206661696c656400000000604482015260640160405180910390fd5b60405180604001604052808315158152602001828152508584815181106102765761027661044f565b60209081029190910101525050600101610105565b50509392505050565b6000806000604084860312156102a957600080fd5b833580151581146102b957600080fd5b9250602084013567ffffffffffffffff808211156102d657600080fd5b818601915086601f8301126102ea57600080fd5b8135818111156102f957600080fd5b8760208260051b850101111561030e57600080fd5b6020830194508093505050509250925092565b600082825180855260208086019550808260051b8401018186016000805b858110156103d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe087850381018b5283518051151586528601516040878701819052815190870181905284905b808210156103ab57828201890151888301606001529088019061038d565b87810160609081018790529d89019d601f9091019093169096019091019450509184019160010161033f565b509198975050505050505050565b8281526040602082015260006103fe6040830184610321565b949350505050565b6020815260006104196020830184610321565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126104b257600080fd5b9190910192915050565b6000602082840312156104ce57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461041957600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261052757600080fd5b83018035915067ffffffffffffffff82111561054257600080fd5b60200191503681900382131561055757600080fd5b9250929050565b818382376000910190815291905056fea264697066735822122091997eaa50636245972c9f2af4ee17ee87a66a2ec0f7dbb26fe3efdb51b0d9dc64736f6c63430008110033",
  "devdoc": {
    "details": "Derived from https://github.com/makerdao/multicall (MIT licence)",
    "kind": "dev",
    "methods": {
      "tryAggregate(bool,(address,bytes)[])": {
        "details": "Reverts if `requireSuccess` is true and one of the static calls fails.",
        "params": {
          "calls": "The list of target contracts and encoded function calls for each static call.",
          "requireSuccess": "Whether a failed static call should trigger a revert."
        },
        "returns": {
          "returnData": "The list of success flags and raw return data for each static call."
        }
      },
      "tryBlockAndAggregate(bool,(address,bytes)[])": {
        "details": "Warning: Do not use this function as part of a transaction: `blockNumber` would not be meaningful due to transactions ordering.Reverts if `requireSuccess` is true and one of the static calls fails.",
        "params": {
          "calls": "The list of target contracts and encoded function calls for each static call.",
          "requireSuccess": "Whether a failed static call should trigger a revert."
        },
        "returns": {
          "blockNumber": "The latest mined block number indicating at which point the return data is valid.",
          "returnData": "The list of success flags and raw return data for each static call."
        }
      }
    },
    "title": "MultiStaticCall - Aggregate results from multiple static calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tryAggregate(bool,(address,bytes)[])": {
        "notice": "Aggregates the results of multiple static calls."
      },
      "tryBlockAndAggregate(bool,(address,bytes)[])": {
        "notice": "Aggregates the results of multiple static calls, together with the associated block number."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}