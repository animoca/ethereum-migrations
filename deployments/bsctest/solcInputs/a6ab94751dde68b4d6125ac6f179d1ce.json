{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\n\n}\n"
    },
    "contracts/access/base/AccessControlBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when a role is granted.\n    /// @param role the granted role.\n    /// @param account the account granted with the role.\n    /// @param operator the initiator of the grant.\n    event RoleGranted(bytes32 role, address account, address operator);\n\n    /// @notice Emitted when a role is revoked or renounced.\n    /// @param role the revoked or renounced role.\n    /// @param account the account losing the role.\n    /// @param operator the initiator of the revocation, or identical to `account` for a renouncement.\n    event RoleRevoked(bytes32 role, address account, address operator);\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if the sender does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"
    },
    "contracts/access/base/ContractOwnershipBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is Context, IERC173 {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual override returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual override {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"
    },
    "contracts/access/ContractOwnership.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"
    },
    "contracts/access/facets/AccessControlFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {AccessControlBase} from \"./../base/AccessControlBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Access control via roles management (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ContractOwnershipFacet}.\ncontract AccessControlFacet is AccessControlBase, ForwarderRegistryContextBase {\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/access/facets/ContractOwnershipFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ContractOwnershipBase} from \"./../base/ContractOwnershipBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC173 Contract Ownership Standard (facet version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract ContractOwnershipFacet is ContractOwnershipBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Reverts if the sender is not the proxy admin.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function initContractOwnershipStorage(address initialOwner) external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ContractOwnershipStorage.layout().proxyInit(initialOwner);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/access/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC-173 Contract Ownership Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"
    },
    "contracts/access/libraries/AccessControlStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {Bytes32} from \"./../../utils/libraries/Bytes32.sol\";\n\nlibrary AccessControlStorage {\n    using Bytes32 for bytes32;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    event RoleGranted(bytes32 role, address account, address operator);\n    event RoleRevoked(bytes32 role, address account, address operator);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) {\n            revert(string(abi.encodePacked(\"AccessControl: missing '\", role.toASCIIString(), \"' role\")));\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/access/libraries/ContractOwnershipStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        require(sender == previousOwner, \"Ownership: not the owner\");\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        require(account == s.contractOwner, \"Ownership: not the owner\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/cryptography/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Standard Signature Validation Method for Contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1271\ninterface IERC1271 {\n    /// @notice Returns whether the signature is valid for the data hash.\n    /// @param hash The hash of the signed data.\n    /// @param signature The signature for `hash`.\n    /// @return magicValue `0x1626ba7e` (`bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")`) if the signature is valid, else any other value.\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "contracts/diamond/Diamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\npragma experimental ABIEncoderV2;\n\nimport {IDiamondCutCommon} from \"./interfaces/IDiamondCutCommon.sol\";\nimport {DiamondStorage} from \"./libraries/DiamondStorage.sol\";\n\n/// @title ERC2535 Diamond Standard, Diamond.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2535\ncontract Diamond {\n    using DiamondStorage for DiamondStorage.Layout;\n\n    /// @notice Add/replace/remove facet functions and execute a batch of functions with delegatecall.\n    /// @dev Emits a {DiamondCut} event.\n    /// @param cuts The list of facet addresses, actions and function selectors to apply to the diamond.\n    /// @param initializations The list of addresses and encoded function calls to execute with delegatecall.\n    constructor(IDiamondCutCommon.FacetCut[] memory cuts, IDiamondCutCommon.Initialization[] memory initializations) payable {\n        DiamondStorage.layout().diamondCut(cuts, initializations);\n    }\n\n    fallback() external payable {\n        address facet = DiamondStorage.layout().facetAddress(msg.sig);\n        require(facet != address(0), \"Diamond: function not found\");\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/diamond/facets/DiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\npragma experimental ABIEncoderV2;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {IDiamondCut} from \"./../interfaces/IDiamondCut.sol\";\nimport {IDiamondCutBatchInit} from \"./../interfaces/IDiamondCutBatchInit.sol\";\nimport {DiamondStorage} from \"./../libraries/DiamondStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Diamond Cut (facet version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-2535\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract DiamondCutFacet is IDiamondCut, IDiamondCutBatchInit, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n    using DiamondStorage for DiamondStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: DiamondCut, DiamondCutBatchInit.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initDiamondCutStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        DiamondStorage.initDiamondCut();\n    }\n\n    /// @inheritdoc IDiamondCut\n    /// @dev Reverts if the sender is not the proxy admin.\n    function diamondCut(FacetCut[] calldata cuts, address target, bytes calldata data) external override {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        DiamondStorage.layout().diamondCut(cuts, target, data);\n    }\n\n    /// @inheritdoc IDiamondCutBatchInit\n    /// @dev Reverts if the sender is not the proxy admin.\n    function diamondCut(FacetCut[] calldata cuts, Initialization[] calldata initializations) external override {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        DiamondStorage.layout().diamondCut(cuts, initializations);\n    }\n}\n"
    },
    "contracts/diamond/facets/DiamondLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\npragma experimental ABIEncoderV2;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {IDiamondLoupe} from \"./../interfaces/IDiamondLoupe.sol\";\nimport {DiamondStorage} from \"./../libraries/DiamondStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Diamond Loupe (facet version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-2535\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract DiamondLoupeFacet is IDiamondLoupe, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n    using DiamondStorage for DiamondStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: DiamondLoupe.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initDiamondLoupeStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        DiamondStorage.initDiamondLoupe();\n    }\n\n    /// @inheritdoc IDiamondLoupe\n    function facets() external view override returns (IDiamondLoupe.Facet[] memory facets_) {\n        facets_ = DiamondStorage.layout().facets();\n    }\n\n    /// @inheritdoc IDiamondLoupe\n    function facetFunctionSelectors(address facet) external view override returns (bytes4[] memory facetFunctionSelectors_) {\n        facetFunctionSelectors_ = DiamondStorage.layout().facetFunctionSelectors(facet);\n    }\n\n    /// @inheritdoc IDiamondLoupe\n    function facetAddresses() external view override returns (address[] memory facetAddresses_) {\n        facetAddresses_ = DiamondStorage.layout().facetAddresses();\n    }\n\n    /// @inheritdoc IDiamondLoupe\n    function facetAddress(bytes4 functionSelector) external view override returns (address facetAddress_) {\n        facetAddress_ = DiamondStorage.layout().facetAddress(functionSelector);\n    }\n}\n"
    },
    "contracts/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\npragma experimental ABIEncoderV2;\n\nimport {IDiamondCutCommon} from \"./IDiamondCutCommon.sol\";\n\n/// @title ERC2535 Diamond Standard, Diamond Cut.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2535\n/// @dev Note: the ERC-165 identifier for this interface is 0x1f931c1c\ninterface IDiamondCut is IDiamondCutCommon {\n    /// @notice Add/replace/remove facet functions and optionally execute a function with delegatecall.\n    /// @dev Emits a {DiamondCut} event.\n    /// @param cuts The list of facet addresses, actions and function selectors to apply to the diamond.\n    /// @param target The address of the contract to execute `data` on.\n    /// @param data The encoded function call to execute on `target`.\n    function diamondCut(FacetCut[] calldata cuts, address target, bytes calldata data) external;\n}\n"
    },
    "contracts/diamond/interfaces/IDiamondCutBatchInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\npragma experimental ABIEncoderV2;\n\nimport {IDiamondCutCommon} from \"./IDiamondCutCommon.sol\";\n\n/// @title ERCXXX Diamond Standard, Diamond Cut Batch Init extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-XXXX\n/// @dev Note: the ERC-165 identifier for this interface is 0xb2afc5b5\ninterface IDiamondCutBatchInit is IDiamondCutCommon {\n    /// @notice Add/replace/remove facet functions and execute a batch of functions with delegatecall.\n    /// @dev Emits a {DiamondCut} event.\n    /// @param cuts The list of facet addresses, actions and function selectors to apply to the diamond.\n    /// @param initializations The list of addresses and encoded function calls to execute with delegatecall.\n    function diamondCut(FacetCut[] calldata cuts, Initialization[] calldata initializations) external;\n}\n"
    },
    "contracts/diamond/interfaces/IDiamondCutCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\npragma experimental ABIEncoderV2;\n\ninterface IDiamondCutCommon {\n    enum FacetCutAction {\n        ADD,\n        REPLACE,\n        REMOVE\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facet;\n        FacetCutAction action;\n        bytes4[] selectors;\n    }\n\n    struct Initialization {\n        address target;\n        bytes data;\n    }\n\n    /// @notice Emitted when at least a cut action is operated on the diamond.\n    /// @param cuts The list of facet addresses, actions and function selectors applied to the diamond.\n    /// @param target The address of the contract where `data` was executed.\n    /// @param data The encoded function call executed on `target`.\n    event DiamondCut(FacetCut[] cuts, address target, bytes data);\n}\n"
    },
    "contracts/diamond/interfaces/IDiamondLoupe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\npragma experimental ABIEncoderV2;\n\n/// @title ERC2535 Diamond Standard, Diamond Loupe.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2535\n/// @dev Note: the ERC-165 identifier for this interface is 0x48e2b093\ninterface IDiamondLoupe {\n    struct Facet {\n        address facet;\n        bytes4[] selectors;\n    }\n\n    /// @notice Gets all the facet addresses used by the diamond and their function selectors.\n    /// @return diamondFacets The facet addresses used by the diamond and their function selectors.\n    function facets() external view returns (Facet[] memory diamondFacets);\n\n    /// @notice Gets all the function selectors supported by a facet.\n    /// @param facetAddress The facet address.\n    /// @return selectors The function selectors supported by `facet`.\n    function facetFunctionSelectors(address facetAddress) external view returns (bytes4[] memory selectors);\n\n    /// @notice Get all the facet addresses used by the diamond.\n    /// @return diamondFacetsAddresses The facet addresses used by the diamond.\n    function facetAddresses() external view returns (address[] memory diamondFacetsAddresses);\n\n    /// @notice Gets the facet address that supports a given function selector.\n    /// @param functionSelector The function selector.\n    /// @return diamondFacetAddress The facet address that supports `functionSelector`, or the zero address if the facet is not found.\n    function facetAddress(bytes4 functionSelector) external view returns (address diamondFacetAddress);\n}\n"
    },
    "contracts/diamond/libraries/DiamondStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\npragma experimental ABIEncoderV2;\n\nimport {IDiamondCutCommon} from \"./../interfaces/IDiamondCutCommon.sol\";\nimport {IDiamondCut} from \"./../interfaces/IDiamondCut.sol\";\nimport {IDiamondCutBatchInit} from \"./../interfaces/IDiamondCutBatchInit.sol\";\nimport {IDiamondLoupe} from \"./../interfaces/IDiamondLoupe.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\n/// @dev derived from https://github.com/mudgen/diamond-2 (MIT licence) and https://github.com/solidstate-network/solidstate-solidity (MIT licence)\nlibrary DiamondStorage {\n    using Address for address;\n    using DiamondStorage for DiamondStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        // selector => (facet address, selector slot position)\n        mapping(bytes4 => bytes32) diamondFacets;\n        // number of selectors registered in selectorSlots\n        uint16 selectorCount;\n        // array of selector slots with 8 selectors per slot\n        mapping(uint256 => bytes32) selectorSlots;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.Diamond.storage\")) - 1);\n\n    bytes32 internal constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\n    bytes32 internal constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\n\n    event DiamondCut(IDiamondCutCommon.FacetCut[] cuts, address target, bytes data);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: DiamondCut, DiamondCutBatchInit.\n    function initDiamondCut() internal {\n        InterfaceDetectionStorage.Layout storage interfaceDetectionLayout = InterfaceDetectionStorage.layout();\n        interfaceDetectionLayout.setSupportedInterface(type(IDiamondCut).interfaceId, true);\n        interfaceDetectionLayout.setSupportedInterface(type(IDiamondCutBatchInit).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: DiamondLoupe.\n    function initDiamondLoupe() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IDiamondLoupe).interfaceId, true);\n    }\n\n    function diamondCut(Layout storage s, IDiamondCutCommon.FacetCut[] memory cuts, address target, bytes memory data) internal {\n        cutFacets(s, cuts);\n        emit DiamondCut(cuts, target, data);\n        initializationCall(target, data);\n    }\n\n    function diamondCut(\n        Layout storage s,\n        IDiamondCutCommon.FacetCut[] memory cuts,\n        IDiamondCutCommon.Initialization[] memory initializations\n    ) internal {\n        unchecked {\n            s.cutFacets(cuts);\n            emit DiamondCut(cuts, address(0), \"\");\n            uint256 length = initializations.length;\n            for (uint256 i; i != length; ++i) {\n                initializationCall(initializations[i].target, initializations[i].data);\n            }\n        }\n    }\n\n    function cutFacets(Layout storage s, IDiamondCutCommon.FacetCut[] memory facetCuts) internal {\n        unchecked {\n            uint256 originalSelectorCount = s.selectorCount;\n            uint256 selectorCount = originalSelectorCount;\n            bytes32 selectorSlot;\n\n            // Check if last selector slot is not full\n            if (selectorCount & 7 > 0) {\n                // get last selectorSlot\n                selectorSlot = s.selectorSlots[selectorCount >> 3];\n            }\n\n            uint256 length = facetCuts.length;\n            for (uint256 i; i != length; ++i) {\n                IDiamondCutCommon.FacetCut memory facetCut = facetCuts[i];\n                IDiamondCutCommon.FacetCutAction action = facetCut.action;\n\n                require(facetCut.selectors.length != 0, \"Diamond: no function selectors\");\n\n                if (action == IDiamondCutCommon.FacetCutAction.ADD) {\n                    (selectorCount, selectorSlot) = s.addFacetSelectors(selectorCount, selectorSlot, facetCut);\n                } else if (action == IDiamondCutCommon.FacetCutAction.REPLACE) {\n                    s.replaceFacetSelectors(facetCut);\n                } else {\n                    (selectorCount, selectorSlot) = s.removeFacetSelectors(selectorCount, selectorSlot, facetCut);\n                }\n            }\n\n            if (selectorCount != originalSelectorCount) {\n                s.selectorCount = uint16(selectorCount);\n            }\n\n            // If last selector slot is not full\n            if (selectorCount & 7 > 0) {\n                s.selectorSlots[selectorCount >> 3] = selectorSlot;\n            }\n        }\n    }\n\n    function addFacetSelectors(\n        Layout storage s,\n        uint256 selectorCount,\n        bytes32 selectorSlot,\n        IDiamondCutCommon.FacetCut memory facetCut\n    ) internal returns (uint256, bytes32) {\n        unchecked {\n            if (facetCut.facet != address(this)) {\n                // allows immutable functions to be added from a constructor\n                require(facetCut.facet.isContract(), \"Diamond: facet has no code\"); // reverts if executed from a constructor\n            }\n\n            uint256 length = facetCut.selectors.length;\n            for (uint256 i; i != length; ++i) {\n                bytes4 selector = facetCut.selectors[i];\n                bytes32 oldFacet = s.diamondFacets[selector];\n\n                require(address(bytes20(oldFacet)) == address(0), \"Diamond: selector already added\");\n\n                // add facet for selector\n                s.diamondFacets[selector] = bytes20(facetCut.facet) | bytes32(selectorCount);\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\n\n                // clear selector position in slot and add selector\n                selectorSlot = (selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\n\n                // if slot is full then write it to storage\n                if (selectorInSlotPosition == 224) {\n                    s.selectorSlots[selectorCount >> 3] = selectorSlot;\n                    selectorSlot = 0;\n                }\n\n                ++selectorCount;\n            }\n\n            return (selectorCount, selectorSlot);\n        }\n    }\n\n    function removeFacetSelectors(\n        Layout storage s,\n        uint256 selectorCount,\n        bytes32 selectorSlot,\n        IDiamondCutCommon.FacetCut memory facetCut\n    ) internal returns (uint256, bytes32) {\n        unchecked {\n            require(facetCut.facet == address(0), \"Diamond: non-zero address facet\");\n\n            uint256 selectorSlotCount = selectorCount >> 3;\n            uint256 selectorInSlotIndex = selectorCount & 7;\n\n            for (uint256 i; i != facetCut.selectors.length; ++i) {\n                bytes4 selector = facetCut.selectors[i];\n                bytes32 oldFacet = s.diamondFacets[selector];\n\n                require(address(bytes20(oldFacet)) != address(0), \"Diamond: selector not found\");\n                require(address(bytes20(oldFacet)) != address(this), \"Diamond: immutable function\");\n\n                if (selectorSlot == 0) {\n                    selectorSlotCount--;\n                    selectorSlot = s.selectorSlots[selectorSlotCount];\n                    selectorInSlotIndex = 7;\n                } else {\n                    selectorInSlotIndex--;\n                }\n\n                bytes4 lastSelector;\n                uint256 oldSelectorsSlotCount;\n                uint256 oldSelectorInSlotPosition;\n\n                // adding a block here prevents stack too deep error\n                {\n                    // replace selector with last selector in l.facets\n                    lastSelector = bytes4(selectorSlot << (selectorInSlotIndex << 5));\n\n                    if (lastSelector != selector) {\n                        // update last selector slot position info\n                        s.diamondFacets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(s.diamondFacets[lastSelector]);\n                    }\n\n                    delete s.diamondFacets[selector];\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\n                }\n\n                if (oldSelectorsSlotCount != selectorSlotCount) {\n                    bytes32 oldSelectorSlot = s.selectorSlots[oldSelectorsSlotCount];\n\n                    // clears the selector we are deleting and puts the last selector in its place.\n                    oldSelectorSlot =\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\n\n                    // update storage with the modified slot\n                    s.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\n                } else {\n                    // clears the selector we are deleting and puts the last selector in its place.\n                    selectorSlot =\n                        (selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\n                }\n\n                if (selectorInSlotIndex == 0) {\n                    delete s.selectorSlots[selectorSlotCount];\n                    selectorSlot = 0;\n                }\n            }\n\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\n\n            return (selectorCount, selectorSlot);\n        }\n    }\n\n    function replaceFacetSelectors(Layout storage s, IDiamondCutCommon.FacetCut memory facetCut) internal {\n        unchecked {\n            require(facetCut.facet.isContract(), \"Diamond: facet has no code\");\n\n            uint256 length = facetCut.selectors.length;\n            for (uint256 i; i != length; ++i) {\n                bytes4 selector = facetCut.selectors[i];\n                bytes32 oldFacet = s.diamondFacets[selector];\n                address oldFacetAddress = address(bytes20(oldFacet));\n\n                require(oldFacetAddress != address(0), \"Diamond: selector not found\");\n                require(oldFacetAddress != address(this), \"Diamond: immutable function\");\n                require(oldFacetAddress != facetCut.facet, \"Diamond: identical function\");\n\n                // replace old facet address\n                s.diamondFacets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(facetCut.facet);\n            }\n        }\n    }\n\n    function initializationCall(address target, bytes memory data) internal {\n        if (target == address(0)) {\n            require(data.length == 0, \"Diamond: data is not empty\");\n        } else {\n            require(data.length != 0, \"Diamond: data is empty\");\n            if (target != address(this)) {\n                require(target.isContract(), \"Diamond: target has no code\");\n            }\n\n            (bool success, bytes memory returndata) = target.delegatecall(data);\n            if (!success) {\n                uint256 returndataLength = returndata.length;\n                if (returndataLength != 0) {\n                    assembly {\n                        revert(add(32, returndata), returndataLength)\n                    }\n                } else {\n                    revert(\"Diamond: init call reverted\");\n                }\n            }\n        }\n    }\n\n    function facets(Layout storage s) internal view returns (IDiamondLoupe.Facet[] memory diamondFacets) {\n        unchecked {\n            uint16 selectorCount = s.selectorCount;\n            diamondFacets = new IDiamondLoupe.Facet[](selectorCount);\n\n            uint256[] memory numFacetSelectors = new uint256[](selectorCount);\n            uint256 numFacets;\n            uint256 selectorIndex;\n\n            // loop through function selectors\n            for (uint256 slotIndex; selectorIndex < selectorCount; ++slotIndex) {\n                bytes32 slot = s.selectorSlots[slotIndex];\n\n                for (uint256 selectorSlotIndex; selectorSlotIndex != 8; ++selectorSlotIndex) {\n                    ++selectorIndex;\n\n                    if (selectorIndex > selectorCount) {\n                        break;\n                    }\n\n                    bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\n                    address facet = address(bytes20(s.diamondFacets[selector]));\n\n                    bool continueLoop;\n\n                    for (uint256 facetIndex; facetIndex != numFacets; ++facetIndex) {\n                        if (diamondFacets[facetIndex].facet == facet) {\n                            diamondFacets[facetIndex].selectors[numFacetSelectors[facetIndex]] = selector;\n                            ++numFacetSelectors[facetIndex];\n                            continueLoop = true;\n                            break;\n                        }\n                    }\n\n                    if (continueLoop) {\n                        continue;\n                    }\n\n                    diamondFacets[numFacets].facet = facet;\n                    diamondFacets[numFacets].selectors = new bytes4[](selectorCount);\n                    diamondFacets[numFacets].selectors[0] = selector;\n                    numFacetSelectors[numFacets] = 1;\n                    ++numFacets;\n                }\n            }\n\n            for (uint256 facetIndex; facetIndex != numFacets; ++facetIndex) {\n                uint256 numSelectors = numFacetSelectors[facetIndex];\n                bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\n\n                // setting the number of selectors\n                assembly {\n                    mstore(selectors, numSelectors)\n                }\n            }\n\n            // setting the number of facets\n            assembly {\n                mstore(diamondFacets, numFacets)\n            }\n        }\n    }\n\n    function facetFunctionSelectors(Layout storage s, address facet) internal view returns (bytes4[] memory selectors) {\n        unchecked {\n            uint16 selectorCount = s.selectorCount;\n            selectors = new bytes4[](selectorCount);\n\n            uint256 numSelectors;\n            uint256 selectorIndex;\n\n            // loop through function selectors\n            for (uint256 slotIndex; selectorIndex < selectorCount; ++slotIndex) {\n                bytes32 slot = s.selectorSlots[slotIndex];\n\n                for (uint256 selectorSlotIndex; selectorSlotIndex != 8; ++selectorSlotIndex) {\n                    ++selectorIndex;\n\n                    if (selectorIndex > selectorCount) {\n                        break;\n                    }\n\n                    bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\n\n                    if (facet == address(bytes20(s.diamondFacets[selector]))) {\n                        selectors[numSelectors] = selector;\n                        ++numSelectors;\n                    }\n                }\n            }\n\n            // set the number of selectors in the array\n            assembly {\n                mstore(selectors, numSelectors)\n            }\n        }\n    }\n\n    function facetAddresses(Layout storage s) internal view returns (address[] memory addresses) {\n        unchecked {\n            uint16 selectorCount = s.selectorCount;\n            addresses = new address[](selectorCount);\n            uint256 numFacets;\n            uint256 selectorIndex;\n\n            for (uint256 slotIndex; selectorIndex < selectorCount; ++slotIndex) {\n                bytes32 slot = s.selectorSlots[slotIndex];\n\n                for (uint256 selectorSlotIndex; selectorSlotIndex != 8; ++selectorSlotIndex) {\n                    ++selectorIndex;\n\n                    if (selectorIndex > selectorCount) {\n                        break;\n                    }\n\n                    bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\n                    address facet = address(bytes20(s.diamondFacets[selector]));\n\n                    bool continueLoop;\n\n                    for (uint256 facetIndex; facetIndex != numFacets; ++facetIndex) {\n                        if (facet == addresses[facetIndex]) {\n                            continueLoop = true;\n                            break;\n                        }\n                    }\n\n                    if (continueLoop) {\n                        continue;\n                    }\n\n                    addresses[numFacets] = facet;\n                    ++numFacets;\n                }\n            }\n\n            // set the number of facet addresses in the array\n            assembly {\n                mstore(addresses, numFacets)\n            }\n        }\n    }\n\n    function facetAddress(Layout storage s, bytes4 selector) internal view returns (address facet) {\n        facet = address(bytes20(s.diamondFacets[selector]));\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/introspection/facets/InterfaceDetectionFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {InterfaceDetection} from \"./../InterfaceDetection.sol\";\n\n/// @title ERC165 Interface Detection Standard (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\ncontract InterfaceDetectionFacet is InterfaceDetection {\n\n}\n"
    },
    "contracts/introspection/InterfaceDetection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/introspection/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"
    },
    "contracts/introspection/libraries/InterfaceDetectionStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \"InterfaceDetection: wrong value\");\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/lifecycle/base/CheckpointsBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {CheckpointsStorage} from \"./../libraries/CheckpointsStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Timestamp-based checkpoints management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract CheckpointsBase is Context {\n    using CheckpointsStorage for CheckpointsStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when a checkpoint is set.\n    /// @param checkpointId The checkpoint identifier.\n    /// @param timestamp The timestamp associated to the checkpoint.\n    event CheckpointSet(bytes32 checkpointId, uint256 timestamp);\n\n    /// @notice Sets the checkpoints.\n    /// @dev Reverts if the caller is not the contract owner.\n    /// @dev Reverts if the checkpoint is already set.\n    /// @dev Emits a {CheckpointSet} event if the timestamp is set to a non-zero value.\n    /// @param checkpointId The checkpoint identifiers.\n    /// @param timestamp The checkpoint timestamps.\n    function setCheckpoint(bytes32 checkpointId, uint256 timestamp) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        CheckpointsStorage.layout().setCheckpoint(checkpointId, timestamp);\n    }\n\n    /// @notice Sets a batch of checkpoints.\n    /// @dev Reverts if the caller is not the contract owner.\n    /// @dev Reverts if one of the checkpoints is already set.\n    /// @dev Emits a {CheckpointSet} event for each timestamp set to a non-zero value.\n    /// @param checkpointIds The checkpoint identifier.\n    /// @param timestamps The checkpoint timestamp.\n    function batchSetCheckpoint(bytes32[] calldata checkpointIds, uint256[] calldata timestamps) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        CheckpointsStorage.layout().batchSetCheckpoint(checkpointIds, timestamps);\n    }\n\n    /// @notice Sets the checkpoint to the current block timestamp.\n    /// @dev Reverts if the caller is not the contract owner.\n    /// @dev Reverts if the checkpoint is set and the current block timestamp has already reached it.\n    /// @dev Emits a {CheckpointSet} event.\n    /// @param checkpointId The checkpoint identifier.\n    function triggerCheckpoint(bytes32 checkpointId) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        CheckpointsStorage.layout().triggerCheckpoint(checkpointId);\n    }\n\n    /// @notice Gets the checkpoint timestamp.\n    /// @param checkpointId The checkpoint identifier.\n    /// @return timestamp The timestamp associated to the checkpoint. A zero value indicates that the checkpoint is not set.\n    function checkpoint(bytes32 checkpointId) external view returns (uint256) {\n        return CheckpointsStorage.layout().checkpoint(checkpointId);\n    }\n\n    /// @notice Retrieves whether the checkpoint has been reached already.\n    /// @param checkpointId The checkpoint identifier.\n    /// @return reached True if the checkpoint has been set and the current block timestamp has already reached it, false otherwise.\n    function checkpointReached(bytes32 checkpointId) external view returns (bool) {\n        return CheckpointsStorage.layout().checkpointReached(checkpointId);\n    }\n}\n"
    },
    "contracts/lifecycle/base/PauseBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {PauseStorage} from \"./../libraries/PauseStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Pausing mechanism (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract PauseBase is Context {\n    using PauseStorage for PauseStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when the pause is triggered.\n    event Paused();\n\n    /// @notice Emitted when the pause is lifted.\n    event Unpaused();\n\n    /// @notice Pauses the contract.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if the contract is paused.\n    /// @dev Emits a {Paused} event.\n    function pause() external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().pause();\n    }\n\n    /// @notice Unpauses the contract.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if the contract is not paused.\n    /// @dev Emits an {Unpaused} event.\n    function unpause() external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PauseStorage.layout().unpause();\n    }\n\n    /// @notice Gets the paused state of the contract.\n    /// @return isPaused The paused state of the contract.\n    function paused() external view returns (bool) {\n        return PauseStorage.layout().paused();\n    }\n}\n"
    },
    "contracts/lifecycle/Checkpoints.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {CheckpointsStorage} from \"./libraries/CheckpointsStorage.sol\";\nimport {CheckpointsBase} from \"./base/CheckpointsBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Timestamp-based checkpoints management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract Checkpoints is CheckpointsBase, ContractOwnership {\n\n}\n"
    },
    "contracts/lifecycle/facets/CheckpointsFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ProxyAdminStorage} from \"./../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {CheckpointsBase} from \"./../base/CheckpointsBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Timestamp-based checkpoints management (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {ContractOwnershipFacet}.\ncontract CheckpointsFacet is CheckpointsBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/lifecycle/facets/PauseFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {PauseStorage} from \"./../libraries/PauseStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {PauseBase} from \"./../base/PauseBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Pausing mechanism (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {ContractOwnershipFacet}.\ncontract PauseFacet is PauseBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n    using PauseStorage for PauseStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Initializes the storage with an initial pause state.\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Reverts if the caller is not the proxy admin.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function initPauseStorage(bool isPaused) external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        PauseStorage.layout().proxyInit(isPaused);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/lifecycle/libraries/CheckpointsStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {Bytes32} from \"./../../utils/libraries/Bytes32.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary CheckpointsStorage {\n    using Bytes32 for bytes32;\n    using CheckpointsStorage for CheckpointsStorage.Layout;\n\n    struct Layout {\n        // checkpointId => timestamp\n        mapping(bytes32 => uint256) checkpoints;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Checkpoints.storage\")) - 1);\n\n    event CheckpointSet(bytes32 checkpointId, uint256 timestamp);\n\n    /// @notice Sets the checkpoint.\n    /// @dev Reverts if the checkpoint is already set.\n    /// @dev Emits a {CheckpointSet} event if the timestamp is set to a non-zero value.\n    /// @param checkpointId The checkpoint identifier.\n    /// @param timestamp The checkpoint timestamp.\n    function setCheckpoint(Layout storage s, bytes32 checkpointId, uint256 timestamp) internal {\n        if (s.checkpoints[checkpointId] != 0) {\n            revert(string(abi.encodePacked(\"Checkpoints: checkpoint '\", checkpointId.toASCIIString(), \"' already set\")));\n        }\n        if (timestamp != 0) {\n            s.checkpoints[checkpointId] = timestamp;\n            emit CheckpointSet(checkpointId, timestamp);\n        }\n    }\n\n    /// @notice Sets a batch of checkpoints.\n    /// @dev Reverts if one of the checkpoints is already set.\n    /// @dev Emits a {CheckpointSet} event for each timestamp set to a non-zero value.\n    /// @param checkpointIds The checkpoint identifiers.\n    /// @param timestamps The checkpoint timestamps.\n    function batchSetCheckpoint(Layout storage s, bytes32[] calldata checkpointIds, uint256[] calldata timestamps) internal {\n        uint256 length = checkpointIds.length;\n        require(length == timestamps.length, \"Checkpoints: wrong array length\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                s.setCheckpoint(checkpointIds[i], timestamps[i]);\n            }\n        }\n    }\n\n    /// @notice Sets the checkpoint to the current block timestamp.\n    /// @dev Reverts if the checkpoint is set and the current block timestamp has already reached it.\n    /// @dev Emits a {CheckpointSet} event.\n    /// @param checkpointId The checkpoint identifier.\n    function triggerCheckpoint(Layout storage s, bytes32 checkpointId) internal {\n        s.enforceCheckpointNotReached(checkpointId);\n        s.checkpoints[checkpointId] = block.timestamp;\n        emit CheckpointSet(checkpointId, block.timestamp);\n    }\n\n    /// @notice Gets the checkpoint timestamp.\n    /// @param checkpointId The checkpoint identifier.\n    /// @return timestamp The timestamp associated to the checkpoint. A zero value indicates that the checkpoint is not set.\n    function checkpoint(Layout storage s, bytes32 checkpointId) internal view returns (uint256 timestamp) {\n        return s.checkpoints[checkpointId];\n    }\n\n    /// @notice Retrieves whether the checkpoint has been reached already.\n    /// @param checkpointId The checkpoint identifier.\n    /// @return reached True if the checkpoint has been set and the current block timestamp has already reached it, false otherwise.\n    function checkpointReached(Layout storage s, bytes32 checkpointId) internal view returns (bool) {\n        uint256 checkpoint_ = s.checkpoints[checkpointId];\n        return checkpoint_ != 0 && block.timestamp >= checkpoint_;\n    }\n\n    /// @notice Ensures that the checkpoint has been reached already.\n    /// @dev Reverts if the checkpoint is not set or if the current block timestamp has not reached it yet.\n    /// @param checkpointId The checkpoint identifier.\n    function enforceCheckpointReached(Layout storage s, bytes32 checkpointId) internal view {\n        if (!s.checkpointReached(checkpointId)) {\n            revert(string(abi.encodePacked(\"Checkpoints: checkpoint '\", checkpointId.toASCIIString(), \"' not reached yet\")));\n        }\n    }\n\n    /// @notice Ensures that the checkpoint has not been reached yet.\n    /// @dev Reverts if checkpoint is set and the current block timestamp has already reached it.\n    /// @param checkpointId The checkpoint identifier.\n    function enforceCheckpointNotReached(Layout storage s, bytes32 checkpointId) internal view {\n        if (s.checkpointReached(checkpointId)) {\n            revert(string(abi.encodePacked(\"Checkpoints: checkpoint '\", checkpointId.toASCIIString(), \"' already reached\")));\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/lifecycle/libraries/PauseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary PauseStorage {\n    using PauseStorage for PauseStorage.Layout;\n\n    struct Layout {\n        bool isPaused;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Pause.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.lifecycle.Pause.phase\")) - 1);\n\n    event Paused();\n    event Unpaused();\n\n    /// @notice Initializes the storage with an initial pause state (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function constructorInit(Layout storage s, bool isPaused) internal {\n        if (isPaused) {\n            s.isPaused = true;\n            emit Paused();\n        }\n    }\n\n    /// @notice Initializes the storage with an initial pause state (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    function proxyInit(Layout storage s, bool isPaused) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(isPaused);\n    }\n\n    /// @notice Pauses the contract.\n    /// @dev Reverts if the contract is paused.\n    /// @dev Emits a {Paused} event.\n    function pause(Layout storage s) internal {\n        s.enforceIsNotPaused();\n        s.isPaused = true;\n        emit Paused();\n    }\n\n    /// @notice Unpauses the contract.\n    /// @dev Reverts if the contract is not paused.\n    /// @dev Emits an {Unpaused} event.\n    function unpause(Layout storage s) internal {\n        s.enforceIsPaused();\n        s.isPaused = false;\n        emit Unpaused();\n    }\n\n    /// @notice Gets the paused state of the contract.\n    /// @return isPaused The paused state of the contract.\n    function paused(Layout storage s) internal view returns (bool isPaused) {\n        return s.isPaused;\n    }\n\n    /// @notice Ensures that the contract is paused.\n    /// @dev Reverts if the contract is not paused.\n    function enforceIsPaused(Layout storage s) internal view {\n        require(s.isPaused, \"Pause: not paused\");\n    }\n\n    /// @notice Ensures that the contract is not paused.\n    /// @dev Reverts if the contract is paused.\n    function enforceIsNotPaused(Layout storage s) internal view {\n        require(!s.isPaused, \"Pause: paused\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/lifecycle/Pause.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {PauseStorage} from \"./libraries/PauseStorage.sol\";\nimport {PauseBase} from \"./base/PauseBase.sol\";\nimport {ContractOwnership} from \"../access/ContractOwnership.sol\";\n\n/// @title Pausing mechanism (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract Pause is PauseBase, ContractOwnership {\n    using PauseStorage for PauseStorage.Layout;\n\n    /// @notice Initializes the storage with an initial pause state.\n    /// @dev Emits a {Paused} event if `isPaused` is true.\n    /// @param isPaused The initial pause state.\n    constructor(bool isPaused) {\n        PauseStorage.layout().constructorInit(isPaused);\n    }\n}\n"
    },
    "contracts/metatx/base/ForwarderRegistryContextBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _forwarderRegistry;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _forwarderRegistry = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"
    },
    "contracts/metatx/facets/ForwarderRegistryContextFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC2771} from \"./../interfaces/IERC2771.sol\";\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ncontract ForwarderRegistryContextFacet is IERC2771 {\n    IForwarderRegistry public immutable forwarderRegistry;\n\n    constructor(IForwarderRegistry forwarderRegistry_) {\n        forwarderRegistry = forwarderRegistry_;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\n        return forwarder == address(forwarderRegistry);\n    }\n}\n"
    },
    "contracts/metatx/ForwarderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC1271} from \"./../cryptography/interfaces/IERC1271.sol\";\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ERC2771Calldata} from \"./libraries/ERC2771Calldata.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @notice Users can allow specific EIP-2771 forwarders to forward meta-transactions on their behalf.\n/// @dev This contract should be deployed uniquely per network, in a non-upgradeable way.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ncontract ForwarderRegistry is IForwarderRegistry, IERC2771 {\n    using Address for address;\n    using ECDSA for bytes32;\n\n    struct Forwarder {\n        uint248 nonce;\n        bool approved;\n    }\n\n    error ForwarderNotApproved(address sender, address forwarder);\n    error InvalidEIP1271Signature();\n    error WrongSigner();\n\n    bytes4 private constant EIP1271_MAGICVALUE = 0x1626ba7e;\n    bytes32 private constant EIP712_DOMAIN_NAME = keccak256(\"ForwarderRegistry\");\n    bytes32 private constant APPROVAL_TYPEHASH = keccak256(\"ForwarderApproval(address sender,address forwarder,bool approved,uint256 nonce)\");\n\n    mapping(address => mapping(address => Forwarder)) private _forwarders;\n\n    uint256 private immutable _deploymentChainId;\n    bytes32 private immutable _deploymentDomainSeparator;\n\n    /// @notice Emitted when a forwarder is approved or disapproved.\n    /// @param sender The account for which `forwarder` is approved or disapproved.\n    /// @param forwarder The account approved or disapproved as forwarder.\n    /// @param approved True for an approval, false for a disapproval.\n    /// @param nonce The `sender`'s account nonce before the approval change.\n    event ForwarderApproval(address indexed sender, address indexed forwarder, bool approved, uint256 nonce);\n\n    constructor() {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        _deploymentChainId = chainId;\n        _deploymentDomainSeparator = _calculateDomainSeparator(chainId);\n    }\n\n    /// @notice Disapproves a forwarder for the sender.\n    /// @dev Emits a {ForwarderApproval} event.\n    /// @param forwarder The address of the forwarder to disapprove.\n    function removeForwarderApproval(address forwarder) external {\n        Forwarder storage forwarderData = _forwarders[msg.sender][forwarder];\n        _setForwarderApproval(forwarderData, msg.sender, forwarder, false, forwarderData.nonce);\n    }\n\n    /// @notice Approves or disapproves a forwarder using a signature.\n    /// @dev Reverts with {InvalidEIP1271Signature} if `isEIP1271Signature` is true and the signature is reported invalid by the `sender` contract.\n    /// @dev Reverts with {WrongSigner} if `isEIP1271Signature` is false and `sender` is not the actual signer.\n    /// @dev Emits a {ForwarderApproval} event.\n    /// @param sender The address which signed the approval of the approval.\n    /// @param forwarder The address of the forwarder to change the approval of.\n    /// @param approved Whether to approve or disapprove the forwarder.\n    /// @param signature Signature by `sender` for approving forwarder.\n    /// @param isEIP1271Signature True if `sender` is a contract that provides authorization via EIP-1271.\n    function setForwarderApproval(address sender, address forwarder, bool approved, bytes calldata signature, bool isEIP1271Signature) public {\n        Forwarder storage forwarderData = _forwarders[sender][forwarder];\n        uint256 nonce = forwarderData.nonce;\n\n        _requireValidSignature(sender, forwarder, approved, nonce, signature, isEIP1271Signature);\n        _setForwarderApproval(forwarderData, sender, forwarder, approved, nonce);\n    }\n\n    /// @notice Forwards the meta-transaction using EIP-2771.\n    /// @dev Reverts with {ForwarderNotApproved} if the caller has not been previously approved as a forwarder by the sender.\n    /// @param target The destination of the call (that will receive the meta-transaction).\n    /// @param data The content of the call (the `sender` address will be appended to it according to EIP-2771).\n    function forward(address target, bytes calldata data) external payable {\n        address sender = ERC2771Calldata.msgSender();\n        if (!_forwarders[sender][msg.sender].approved) revert ForwarderNotApproved(sender, msg.sender);\n        target.functionCallWithValue(abi.encodePacked(data, sender), msg.value);\n    }\n\n    /// @notice Approves the forwarder and forwards the meta-transaction using EIP-2771.\n    /// @dev Reverts with {InvalidEIP1271Signature} if `isEIP1271Signature` is true and the signature is reported invalid by the `sender` contract.\n    /// @dev Reverts with {WrongSigner} if `isEIP1271Signature` is false and `sender` is not the actual signer.\n    /// @dev Emits a {ForwarderApproval} event.\n    /// @param signature Signature by `sender` for approving the forwarder.\n    /// @param isEIP1271Signature True if `sender` is a contract that provides authorization via EIP-1271.\n    /// @param target The destination of the call (that will receive the meta-transaction).\n    /// @param data The content of the call (the `sender` address will be appended to it according to EIP-2771).\n    function approveAndForward(bytes calldata signature, bool isEIP1271Signature, address target, bytes calldata data) external payable {\n        address sender = ERC2771Calldata.msgSender();\n        setForwarderApproval(sender, msg.sender, true, signature, isEIP1271Signature);\n        target.functionCallWithValue(abi.encodePacked(data, sender), msg.value);\n    }\n\n    /// @notice Returns the EIP-712 DOMAIN_SEPARATOR.\n    /// @return domainSeparator The EIP-712 domain separator.\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() public view returns (bytes32 domainSeparator) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n\n        // in case a fork happens, to support the chain that had to change its chainId, we compute the domain operator\n        return chainId == _deploymentChainId ? _deploymentDomainSeparator : _calculateDomainSeparator(chainId);\n    }\n\n    /// @notice Gets the current nonce for the sender/forwarder pair.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return nonce The current nonce for the `sender`/`forwarder` pair.\n    function getNonce(address sender, address forwarder) external view returns (uint256 nonce) {\n        return _forwarders[sender][forwarder].nonce;\n    }\n\n    /// @inheritdoc IForwarderRegistry\n    function isApprovedForwarder(address sender, address forwarder) external view override returns (bool) {\n        return _forwarders[sender][forwarder].approved;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address) external pure override returns (bool) {\n        return true;\n    }\n\n    function _requireValidSignature(\n        address sender,\n        address forwarder,\n        bool approved,\n        uint256 nonce,\n        bytes calldata signature,\n        bool isEIP1271Signature\n    ) private view {\n        bytes memory data = abi.encodePacked(\n            \"\\x19\\x01\",\n            DOMAIN_SEPARATOR(),\n            keccak256(abi.encode(APPROVAL_TYPEHASH, sender, forwarder, approved, nonce))\n        );\n        if (isEIP1271Signature) {\n            if (IERC1271(sender).isValidSignature(keccak256(data), signature) != EIP1271_MAGICVALUE) revert InvalidEIP1271Signature();\n        } else {\n            if (keccak256(data).recover(signature) != sender) revert WrongSigner();\n        }\n    }\n\n    function _setForwarderApproval(Forwarder storage forwarderData, address sender, address forwarder, bool approved, uint256 nonce) private {\n        forwarderData.approved = approved;\n        unchecked {\n            forwarderData.nonce = uint248(nonce + 1);\n        }\n        emit ForwarderApproval(sender, forwarder, approved, nonce);\n    }\n\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"),\n                    EIP712_DOMAIN_NAME,\n                    chainId,\n                    address(this)\n                )\n            );\n    }\n}\n"
    },
    "contracts/metatx/ForwarderRegistryContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _forwarderRegistry;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\n        return forwarder == address(_forwarderRegistry);\n    }\n}\n"
    },
    "contracts/metatx/interfaces/IERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"
    },
    "contracts/metatx/interfaces/IForwarderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"
    },
    "contracts/metatx/libraries/ERC2771Calldata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"
    },
    "contracts/mocks/access/AccessControlMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {AccessControlStorage} from \"./../../access/libraries/AccessControlStorage.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\n\ncontract AccessControlMock is AccessControl, ForwarderRegistryContext {\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant TEST_ROLE = \"tester\";\n\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function enforceHasRole(bytes32 role, address account) external view {\n        AccessControlStorage.layout().enforceHasRole(role, account);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/access/ContractOwnershipMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ContractOwnershipMock is ContractOwnership, ForwarderRegistryContext {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    constructor(\n        address initialOwner,\n        IForwarderRegistry forwarderRegistry\n    ) ContractOwnership(initialOwner) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function enforceIsContractOwner(address account) external view {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(account);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/access/facets/AccessControlFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {AccessControlFacet} from \"./../../../access/facets/AccessControlFacet.sol\";\n\ncontract AccessControlFacetMock is AccessControlFacet {\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant TEST_ROLE = \"tester\";\n\n    constructor(IForwarderRegistry forwarderRegistry) AccessControlFacet(forwarderRegistry) {}\n\n    function enforceHasRole(bytes32 role, address account) external view {\n        AccessControlStorage.layout().enforceHasRole(role, account);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/access/facets/ContractOwnershipFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipFacet} from \"./../../../access/facets/ContractOwnershipFacet.sol\";\n\ncontract ContractOwnershipFacetMock is ContractOwnershipFacet {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnershipFacet(forwarderRegistry) {}\n\n    function enforceIsContractOwner(address account) external view {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(account);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/cryptography/ERC1654Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC1271} from \"./../../cryptography/interfaces/IERC1271.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract ERC1271Mock is IERC1271 {\n    using ECDSA for bytes32;\n\n    address internal immutable _owner;\n\n    constructor(address owner) {\n        _owner = owner;\n    }\n\n    function isValidSignature(bytes32 hash, bytes memory signature) external view override returns (bytes4 magicValue) {\n        address signer = hash.recover(signature);\n        if (signer == _owner) {\n            return 0x1626ba7e;\n        } else {\n            return 0xffffffff;\n        }\n    }\n}\n"
    },
    "contracts/mocks/diamond/DiamondMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IDiamondCutCommon} from \"./../../diamond/interfaces/IDiamondCutCommon.sol\";\nimport {DiamondStorage} from \"./../../diamond/libraries/DiamondStorage.sol\";\nimport {Diamond} from \"./../../diamond/Diamond.sol\";\n\ncontract DiamondMock is Diamond {\n    using DiamondStorage for DiamondStorage.Layout;\n\n    event ImmutableFunctionCalled();\n\n    constructor(\n        IDiamondCutCommon.FacetCut[] memory cuts,\n        IDiamondCutCommon.Initialization[] memory initializations\n    ) payable Diamond(cuts, initializations) {\n        bytes4[] memory selectors = new bytes4[](1);\n        selectors[0] = DiamondMock.immutableFunction.selector;\n        IDiamondCutCommon.FacetCut[] memory cut = new IDiamondCutCommon.FacetCut[](1);\n        cut[0].facet = address(this);\n        cut[0].action = IDiamondCutCommon.FacetCutAction.ADD;\n        cut[0].selectors = selectors;\n\n        DiamondStorage.layout().diamondCut(cut, address(0), \"\");\n    }\n\n    function immutableFunction() external {\n        emit ImmutableFunctionCalled();\n    }\n}\n"
    },
    "contracts/mocks/diamond/FacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract FacetMock {\n    event FacetFunctionCalled();\n\n    function doSomething() external {\n        emit FacetFunctionCalled();\n    }\n\n    function revertsWithoutMessage() external pure {\n        // solhint-disable-next-line reason-string\n        revert();\n    }\n\n    function revertsWithMessage() external pure {\n        revert(\"Facet: reverted\");\n    }\n\n    // These functions are placeholders for tests to manipulate the selectorCount in different scenarios\n    function a() external pure {}\n\n    function b() external pure {}\n\n    function c() external pure {}\n\n    function d() external pure {}\n\n    function e() external pure {}\n\n    function f() external pure {}\n\n    function g() external pure {}\n\n    function h() external pure {}\n\n    function i() external pure {}\n\n    function j() external pure {}\n\n    function k() external pure {}\n}\n"
    },
    "contracts/mocks/introspection/facets/InterfaceDetectionFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetectionFacet} from \"./../../../introspection/facets/InterfaceDetectionFacet.sol\";\n\ncontract InterfaceDetectionFacetMock is InterfaceDetectionFacet {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    function setSupportedInterface(bytes4 interfaceId, bool supported) external {\n        InterfaceDetectionStorage.layout().setSupportedInterface(interfaceId, supported);\n    }\n}\n"
    },
    "contracts/mocks/introspection/InterfaceDetectionMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\ncontract InterfaceDetectionMock is InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    function setSupportedInterface(bytes4 interfaceId, bool supported) external {\n        InterfaceDetectionStorage.layout().setSupportedInterface(interfaceId, supported);\n    }\n}\n"
    },
    "contracts/mocks/lifecycle/CheckpointsMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {CheckpointsStorage} from \"./../../lifecycle/libraries/CheckpointsStorage.sol\";\nimport {Checkpoints} from \"./../../lifecycle/Checkpoints.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\n\ncontract CheckpointsMock is Checkpoints, ForwarderRegistryContext {\n    using CheckpointsStorage for CheckpointsStorage.Layout;\n\n    bytes32 public constant START_CHECKPOINTID = \"START\";\n\n    constructor(IForwarderRegistry forwarderRegistry) Checkpoints() ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function enforceCheckpointReached(bytes32 checkpointId) external view {\n        CheckpointsStorage.layout().enforceCheckpointReached(checkpointId);\n    }\n\n    function enforceCheckpointNotReached(bytes32 checkpointId) external view {\n        CheckpointsStorage.layout().enforceCheckpointNotReached(checkpointId);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/lifecycle/facets/CheckpointsFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {CheckpointsStorage} from \"./../../../lifecycle/libraries/CheckpointsStorage.sol\";\nimport {CheckpointsFacet} from \"./../../../lifecycle/facets/CheckpointsFacet.sol\";\n\ncontract CheckpointsFacetMock is CheckpointsFacet {\n    using CheckpointsStorage for CheckpointsStorage.Layout;\n\n    bytes32 public constant START_CHECKPOINTID = \"START\";\n\n    constructor(IForwarderRegistry forwarderRegistry) CheckpointsFacet(forwarderRegistry) {}\n\n    function enforceCheckpointReached(bytes32 checkpointId) external view {\n        CheckpointsStorage.layout().enforceCheckpointReached(checkpointId);\n    }\n\n    function enforceCheckpointNotReached(bytes32 checkpointId) external view {\n        CheckpointsStorage.layout().enforceCheckpointNotReached(checkpointId);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/lifecycle/facets/PauseFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {PauseStorage} from \"./../../../lifecycle/libraries/PauseStorage.sol\";\nimport {PauseFacet} from \"./../../../lifecycle/facets/PauseFacet.sol\";\n\ncontract PauseFacetMock is PauseFacet {\n    using PauseStorage for PauseStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) PauseFacet(forwarderRegistry) {}\n\n    function enforceIsPaused() external view {\n        PauseStorage.layout().enforceIsPaused();\n    }\n\n    function enforceIsNotPaused() external view {\n        PauseStorage.layout().enforceIsNotPaused();\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/lifecycle/PauseMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {PauseStorage} from \"./../../lifecycle/libraries/PauseStorage.sol\";\nimport {Pause} from \"./../../lifecycle/Pause.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\n\ncontract PauseMock is Pause, ForwarderRegistryContext {\n    using PauseStorage for PauseStorage.Layout;\n\n    constructor(\n        bool isPaused,\n        IForwarderRegistry forwarderRegistry\n    ) Pause(isPaused) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function enforceIsPaused() external view {\n        PauseStorage.layout().enforceIsPaused();\n    }\n\n    function enforceIsNotPaused() external view {\n        PauseStorage.layout().enforceIsNotPaused();\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/metatx/ForwarderMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\ncontract ForwarderMock {\n    using Address for address;\n\n    /// @notice Forward without appending a sender address to the calldata, so that msg.data.length < 24 (non-EIP-2771)\n    function non2771Forward(address target, bytes calldata data) external payable {\n        target.functionCallWithValue(data, msg.value);\n    }\n\n    /// @notice Forward while appending a sender address to the calldata (EIP-2771-compatible)\n    function forward(address from, address target, bytes calldata data) external payable {\n        target.functionCallWithValue(abi.encodePacked(data, from), msg.value);\n    }\n}\n"
    },
    "contracts/mocks/metatx/ForwarderRegistryReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ForwarderRegistryContext} from \"../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ForwarderRegistryReceiverMock is ForwarderRegistryContext {\n    mapping(address => uint256) internal _d;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContext(forwarderRegistry) {}\n\n    // test function without arguments, so that msg.data.length < 24\n    function smallDataTest() external {\n        address sender = _msgSender();\n        _msgData();\n        ++_d[sender];\n    }\n\n    function test(uint256 d) external {\n        address sender = _msgSender();\n        _msgData();\n        _d[sender] = d;\n    }\n\n    function getData(address who) external view returns (uint256) {\n        return _d[who];\n    }\n}\n"
    },
    "contracts/mocks/payment/facets/PayoutWalletFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {PayoutWalletFacet} from \"./../../../payment/facets/PayoutWalletFacet.sol\";\n\ncontract PayoutWalletFacetMock is PayoutWalletFacet {\n    constructor(IForwarderRegistry forwarderRegistry) PayoutWalletFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/payment/PayoutWalletMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {PayoutWallet} from \"./../../payment/PayoutWallet.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\n\ncontract PayoutWalletMock is PayoutWallet, ForwarderRegistryContext {\n    constructor(\n        address payable initialPayoutWallet,\n        IForwarderRegistry forwarderRegistry\n    ) PayoutWallet(initialPayoutWallet) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/proxy/facets/ProxyAdminFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ProxyAdminFacet} from \"./../../../proxy/facets/ProxyAdminFacet.sol\";\n\ncontract ProxyAdminFacetMock is ProxyAdminFacet {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ProxyAdminFacet(forwarderRegistry) {}\n\n    function enforceIsProxyAdmin(address account) external view {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(account);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/proxy/ProxyAdminMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ProxyAdminStorage} from \"./../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ProxyAdmin} from \"./../../proxy/ProxyAdmin.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ProxyAdminMock is ProxyAdmin, ForwarderRegistryContext {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(address admin, IForwarderRegistry forwarderRegistry) ProxyAdmin(admin) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function enforceIsProxyAdmin(address account) external view {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(account);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/security/facets/TokenRecoveryFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {TokenRecoveryFacet} from \"./../../../security/facets/TokenRecoveryFacet.sol\";\n\ncontract TokenRecoveryFacetMock is TokenRecoveryFacet {\n    constructor(IForwarderRegistry forwarderRegistry) TokenRecoveryFacet(forwarderRegistry) {}\n\n    receive() external payable {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/security/SealedExecutorMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {SealedExecutor} from \"./../../security/SealedExecutor.sol\";\n\ncontract SealedExecutorMock is SealedExecutor {\n    constructor(IForwarderRegistry forwarderRegistry) SealedExecutor(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/security/TokenRecoveryMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {TokenRecovery} from \"./../../security/TokenRecovery.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\n\ncontract TokenRecoveryMock is TokenRecovery, ForwarderRegistryContext {\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    receive() external payable {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/ERC1155BurnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Mock} from \"./ERC1155Mock.sol\";\nimport {ERC1155Burnable} from \"./../../../token/ERC1155/ERC1155Burnable.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155BurnableMock\ncontract ERC1155BurnableMock is ERC1155Mock, ERC1155Burnable {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155Mock(forwarderRegistry) {}\n\n    /// @inheritdoc ERC1155Mock\n    function _msgSender() internal view virtual override(Context, ERC1155Mock) returns (address) {\n        return ERC1155Mock._msgSender();\n    }\n\n    /// @inheritdoc ERC1155Mock\n    function _msgData() internal view virtual override(Context, ERC1155Mock) returns (bytes calldata) {\n        return ERC1155Mock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/ERC1155MetadataURIPerTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155MetadataURIPerToken} from \"./../../../token/ERC1155/ERC1155MetadataURIPerToken.sol\";\nimport {ERC1155SimpleMock} from \"./ERC1155SimpleMock.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155TokenMetadataMock\ncontract ERC1155MetadataURIPerTokenMock is ERC1155SimpleMock, ERC1155MetadataURIPerToken {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155SimpleMock(forwarderRegistry) {}\n\n    /// @inheritdoc ERC1155SimpleMock\n    function _msgSender() internal view virtual override(Context, ERC1155SimpleMock) returns (address) {\n        return ERC1155SimpleMock._msgSender();\n    }\n\n    /// @inheritdoc ERC1155SimpleMock\n    function _msgData() internal view virtual override(Context, ERC1155SimpleMock) returns (bytes calldata) {\n        return ERC1155SimpleMock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/ERC1155Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155SimpleMock} from \"./ERC1155SimpleMock.sol\";\nimport {ERC1155Deliverable} from \"./../../../token/ERC1155/ERC1155Deliverable.sol\";\nimport {ERC1155MetadataURIWithBaseURI} from \"./../../../token/ERC1155/ERC1155MetadataURIWithBaseURI.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155Mock\ncontract ERC1155Mock is ERC1155SimpleMock, ERC1155Deliverable, ERC1155MetadataURIWithBaseURI {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155MetadataURIWithBaseURI() ERC1155SimpleMock(forwarderRegistry) {}\n\n    /// @inheritdoc ERC1155SimpleMock\n    function _msgSender() internal view virtual override(Context, ERC1155SimpleMock) returns (address) {\n        return ERC1155SimpleMock._msgSender();\n    }\n\n    /// @inheritdoc ERC1155SimpleMock\n    function _msgData() internal view virtual override(Context, ERC1155SimpleMock) returns (bytes calldata) {\n        return ERC1155SimpleMock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/ERC1155SimpleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155} from \"./../../../token/ERC1155/ERC1155.sol\";\nimport {ERC1155Mintable} from \"./../../../token/ERC1155/ERC1155Mintable.sol\";\nimport {ContractOwnership} from \"./../../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ERC1155SimpleMock is ERC1155, ERC1155Mintable, ForwarderRegistryContext {\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/ERC1155TokenReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC1155TokenReceiver} from \"./../../../token/ERC1155/interfaces/IERC1155TokenReceiver.sol\";\nimport {ERC1155Storage} from \"./../../../token/ERC1155/libraries/ERC1155Storage.sol\";\nimport {ERC1155TokenReceiver} from \"./../../../token/ERC1155/ERC1155TokenReceiver.sol\";\n\n/// @title ERC1155 Receiver Mock\ncontract ERC1155TokenReceiverMock is ERC1155TokenReceiver {\n    bool internal immutable _accept1155;\n    address internal immutable _tokenAddress1155;\n\n    event ERC1155Received(address operator, address from, uint256 id, uint256 value, bytes data);\n    event ERC1155BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data);\n\n    constructor(bool accept1155, address tokenAddress) {\n        _accept1155 = accept1155;\n        _tokenAddress1155 = tokenAddress;\n    }\n\n    //=================================================== ERC1155Receiver ====================================================//\n\n    /// @inheritdoc IERC1155TokenReceiver\n    /// @dev reverts if the sender is not the supported ERC1155 contract.\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public virtual override returns (bytes4) {\n        require(msg.sender == _tokenAddress1155, \"ERC1155Receiver: wrong token\");\n        if (_accept1155) {\n            emit ERC1155Received(operator, from, id, value, data);\n            return ERC1155Storage.ERC1155_SINGLE_RECEIVED;\n        } else {\n            return 0x0;\n        }\n    }\n\n    /// @inheritdoc IERC1155TokenReceiver\n    /// @dev reverts if the sender is not the supported ERC1155 contract.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes memory data\n    ) public virtual override returns (bytes4) {\n        require(msg.sender == _tokenAddress1155, \"ERC1155Receiver: wrong token\");\n        if (_accept1155) {\n            emit ERC1155BatchReceived(operator, from, ids, values, data);\n            return ERC1155Storage.ERC1155_BATCH_RECEIVED;\n        } else {\n            return 0x0;\n        }\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/ERC1155WithOperatorFiltererMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IOperatorFilterRegistry} from \"./../../../token/royalty/interfaces/IOperatorFilterRegistry.sol\";\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155WithOperatorFilterer} from \"./../../../token/ERC1155/ERC1155WithOperatorFilterer.sol\";\nimport {ERC1155Mintable} from \"./../../../token/ERC1155/ERC1155Mintable.sol\";\nimport {ContractOwnership} from \"./../../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ERC1155WithOperatorFiltererMock is ERC1155WithOperatorFilterer, ERC1155Mintable, ForwarderRegistryContext {\n    constructor(\n        IOperatorFilterRegistry filterRegistry,\n        IForwarderRegistry forwarderRegistry\n    ) ERC1155WithOperatorFilterer(filterRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/facets/ERC1155BurnableFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155BurnableFacet} from \"./../../../../token/ERC1155/facets/ERC1155BurnableFacet.sol\";\n\n/// @title ERC1155BurnableFacetMock\ncontract ERC1155BurnableFacetMock is ERC1155BurnableFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155BurnableFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/facets/ERC1155DeliverableFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155DeliverableFacet} from \"./../../../../token/ERC1155/facets/ERC1155DeliverableFacet.sol\";\n\n/// @title ERC1155DeliverableFacetMock\ncontract ERC1155DeliverableFacetMock is ERC1155DeliverableFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155DeliverableFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/facets/ERC1155FacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Facet} from \"./../../../../token/ERC1155/facets/ERC1155Facet.sol\";\n\n/// @title ERC1155FacetMock\ncontract ERC1155FacetMock is ERC1155Facet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155Facet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/facets/ERC1155MetadataURIPerTokenFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155MetadataURIPerTokenFacet} from \"./../../../../token/ERC1155/facets/ERC1155MetadataURIPerTokenFacet.sol\";\n\ncontract ERC1155MetadataURIPerTokenFacetMock is ERC1155MetadataURIPerTokenFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155MetadataURIPerTokenFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/facets/ERC1155MetadataURIWithBaseURIFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155MetadataURIWithBaseURIFacet} from \"./../../../../token/ERC1155/facets/ERC1155MetadataURIWithBaseURIFacet.sol\";\n\ncontract ERC1155MetadataURIWithBaseURIFacetMock is ERC1155MetadataURIWithBaseURIFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155MetadataURIWithBaseURIFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/facets/ERC1155MintableFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155MintableFacet} from \"./../../../../token/ERC1155/facets/ERC1155MintableFacet.sol\";\n\n/// @title ERC1155MintableFacetMock\ncontract ERC1155MintableFacetMock is ERC1155MintableFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155MintableFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/facets/ERC1155WithOperatorFiltererFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155WithOperatorFiltererFacet} from \"./../../../../token/ERC1155/facets/ERC1155WithOperatorFiltererFacet.sol\";\n\n/// @title ERC1155FacetMock\ncontract ERC1155WithOperatorFiltererFacetMock is ERC1155WithOperatorFiltererFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155WithOperatorFiltererFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/proxied/ERC1155BurnableProxiedMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"../../../../token/ERC1155/libraries/ERC1155Storage.sol\";\nimport {ERC1155ProxiedMock} from \"./ERC1155ProxiedMock.sol\";\nimport {ERC1155BurnableBase} from \"./../../../../token/ERC1155/base/ERC1155BurnableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\ncontract ERC1155BurnableProxiedMock is ERC1155ProxiedMock, ERC1155BurnableBase {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155ProxiedMock(forwarderRegistry) {}\n\n    function init() public virtual override {\n        super.init();\n        ERC1155Storage.initERC1155Burnable();\n    }\n\n    /// @inheritdoc ERC1155ProxiedMock\n    function _msgSender() internal view virtual override(Context, ERC1155ProxiedMock) returns (address) {\n        return ERC1155ProxiedMock._msgSender();\n    }\n\n    /// @inheritdoc ERC1155ProxiedMock\n    function _msgData() internal view virtual override(Context, ERC1155ProxiedMock) returns (bytes calldata) {\n        return ERC1155ProxiedMock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/proxied/ERC1155MetadataURIPerTokenProxiedMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"../../../../token/ERC1155/libraries/ERC1155Storage.sol\";\nimport {ERC1155SimpleProxiedMock} from \"./ERC1155SimpleProxiedMock.sol\";\nimport {ERC1155MetadataURIPerTokenBase} from \"./../../../../token/ERC1155/base/ERC1155MetadataURIPerTokenBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\ncontract ERC1155MetadataURIPerTokenProxiedMock is ERC1155SimpleProxiedMock, ERC1155MetadataURIPerTokenBase {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155SimpleProxiedMock(forwarderRegistry) {}\n\n    function init() public virtual override {\n        super.init();\n        ERC1155Storage.initERC1155MetadataURI();\n    }\n\n    /// @inheritdoc ERC1155SimpleProxiedMock\n    function _msgSender() internal view virtual override(Context, ERC1155SimpleProxiedMock) returns (address) {\n        return ERC1155SimpleProxiedMock._msgSender();\n    }\n\n    /// @inheritdoc ERC1155SimpleProxiedMock\n    function _msgData() internal view virtual override(Context, ERC1155SimpleProxiedMock) returns (bytes calldata) {\n        return ERC1155SimpleProxiedMock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/proxied/ERC1155ProxiedMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"../../../../token/ERC1155/libraries/ERC1155Storage.sol\";\nimport {ERC1155SimpleProxiedMock} from \"./ERC1155SimpleProxiedMock.sol\";\nimport {ERC1155DeliverableBase} from \"./../../../../token/ERC1155/base/ERC1155DeliverableBase.sol\";\nimport {ERC1155MetadataURIWithBaseURIBase} from \"./../../../../token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\ncontract ERC1155ProxiedMock is ERC1155SimpleProxiedMock, ERC1155DeliverableBase, ERC1155MetadataURIWithBaseURIBase {\n    constructor(IForwarderRegistry forwarderRegistry) ERC1155SimpleProxiedMock(forwarderRegistry) {}\n\n    function init() public virtual override {\n        super.init();\n        ERC1155Storage.initERC1155Deliverable();\n        ERC1155Storage.initERC1155MetadataURI();\n    }\n\n    /// @inheritdoc ERC1155SimpleProxiedMock\n    function _msgSender() internal view virtual override(Context, ERC1155SimpleProxiedMock) returns (address) {\n        return ERC1155SimpleProxiedMock._msgSender();\n    }\n\n    /// @inheritdoc ERC1155SimpleProxiedMock\n    function _msgData() internal view virtual override(Context, ERC1155SimpleProxiedMock) returns (bytes calldata) {\n        return ERC1155SimpleProxiedMock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC1155/proxied/ERC1155SimpleProxiedMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"./../../../../token/ERC1155/libraries/ERC1155Storage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {ERC1155Base} from \"./../../../../token/ERC1155/base/ERC1155Base.sol\";\nimport {ERC1155MintableBase} from \"./../../../../token/ERC1155/base/ERC1155MintableBase.sol\";\nimport {ContractOwnershipBase} from \"./../../../../access/base/ContractOwnershipBase.sol\";\nimport {AccessControlBase} from \"./../../../../access/base/AccessControlBase.sol\";\nimport {InterfaceDetection} from \"./../../../../introspection/InterfaceDetection.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ERC1155SimpleProxiedMock is\n    ERC1155Base,\n    ERC1155MintableBase,\n    ContractOwnershipBase,\n    AccessControlBase,\n    InterfaceDetection,\n    ForwarderRegistryContext\n{\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function init() public virtual {\n        ContractOwnershipStorage.layout().proxyInit(_msgSender());\n        ERC1155Storage.init();\n        ERC1155Storage.initERC1155Mintable();\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/ERC20BurnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Mock} from \"./ERC20Mock.sol\";\nimport {ERC20Burnable} from \"./../../../token/ERC20/ERC20Burnable.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\ncontract ERC20BurnableMock is ERC20Mock, ERC20Burnable {\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals,\n        IForwarderRegistry forwarderRegistry\n    ) ERC20Mock(tokenName, tokenSymbol, tokenDecimals, forwarderRegistry) {}\n\n    /// @inheritdoc ERC20Mock\n    function _msgSender() internal view virtual override(Context, ERC20Mock) returns (address) {\n        return ERC20Mock._msgSender();\n    }\n\n    /// @inheritdoc ERC20Mock\n    function _msgData() internal view virtual override(Context, ERC20Mock) returns (bytes calldata) {\n        return ERC20Mock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20MetadataStorage} from \"./../../../token/ERC20/libraries/ERC20MetadataStorage.sol\";\nimport {ERC20SimpleMock} from \"./ERC20SimpleMock.sol\";\nimport {ERC20Detailed} from \"./../../../token/ERC20/ERC20Detailed.sol\";\nimport {ERC20Metadata} from \"./../../../token/ERC20/ERC20Metadata.sol\";\nimport {ERC20Permit} from \"./../../../token/ERC20/ERC20Permit.sol\";\nimport {ERC20SafeTransfers} from \"./../../../token/ERC20/ERC20SafeTransfers.sol\";\nimport {ERC20BatchTransfers} from \"./../../../token/ERC20/ERC20BatchTransfers.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\ncontract ERC20Mock is ERC20SimpleMock, ERC20Detailed, ERC20Metadata, ERC20Permit, ERC20SafeTransfers, ERC20BatchTransfers {\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals,\n        IForwarderRegistry forwarderRegistry\n    ) ERC20SimpleMock(forwarderRegistry) ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) ERC20Metadata() {}\n\n    /// @inheritdoc ERC20SimpleMock\n    function _msgSender() internal view virtual override(Context, ERC20SimpleMock) returns (address) {\n        return ERC20SimpleMock._msgSender();\n    }\n\n    /// @inheritdoc ERC20SimpleMock\n    function _msgData() internal view virtual override(Context, ERC20SimpleMock) returns (bytes calldata) {\n        return ERC20SimpleMock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/ERC20ReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC20Receiver} from \"./../../../token/ERC20/interfaces/IERC20Receiver.sol\";\nimport {ERC20Storage} from \"./../../../token/ERC20/libraries/ERC20Storage.sol\";\nimport {ERC20Receiver} from \"./../../../token/ERC20/ERC20Receiver.sol\";\n\n/// @title ERC20 Receiver Mock.\ncontract ERC20ReceiverMock is ERC20Receiver {\n    bool internal immutable _accept;\n    address internal immutable _tokenAddress;\n\n    event ERC20Received(address sender, address from, uint256 value, bytes data);\n\n    constructor(bool accept, address tokenAddress) {\n        _accept = accept;\n        _tokenAddress = tokenAddress;\n    }\n\n    //==================================================== ERC20Receiver ====================================================//\n\n    /// @inheritdoc IERC20Receiver\n    function onERC20Received(address sender, address from, uint256 value, bytes memory data) public virtual override returns (bytes4) {\n        require(msg.sender == _tokenAddress, \"ERC20Receiver: wrong token\");\n        if (_accept) {\n            emit ERC20Received(sender, from, value, data);\n            return ERC20Storage.ERC20_RECEIVED;\n        } else {\n            return 0x0;\n        }\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/ERC20SimpleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20} from \"./../../../token/ERC20/ERC20.sol\";\nimport {ERC20Mintable} from \"./../../../token/ERC20/ERC20Mintable.sol\";\nimport {ContractOwnership} from \"./../../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ERC20SimpleMock is ERC20, ERC20Mintable, ForwarderRegistryContext {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20() ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/facets/ERC20BatchTransfersFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20BatchTransfersFacet} from \"./../../../../token/ERC20/facets/ERC20BatchTransfersFacet.sol\";\n\ncontract ERC20BatchTransfersFacetMock is ERC20BatchTransfersFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20BatchTransfersFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/facets/ERC20BurnableFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20BurnableFacet} from \"./../../../../token/ERC20/facets/ERC20BurnableFacet.sol\";\n\ncontract ERC20BurnableFacetMock is ERC20BurnableFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20BurnableFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/facets/ERC20DetailedFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20DetailedFacet} from \"./../../../../token/ERC20/facets/ERC20DetailedFacet.sol\";\n\ncontract ERC20DetailedFacetMock is ERC20DetailedFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20DetailedFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/facets/ERC20FacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Facet} from \"./../../../../token/ERC20/facets/ERC20Facet.sol\";\n\ncontract ERC20FacetMock is ERC20Facet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20Facet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/facets/ERC20MetadataFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20MetadataFacet} from \"./../../../../token/ERC20/facets/ERC20MetadataFacet.sol\";\n\ncontract ERC20MetadataFacetMock is ERC20MetadataFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20MetadataFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/facets/ERC20MintableFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20MintableFacet} from \"./../../../../token/ERC20/facets/ERC20MintableFacet.sol\";\n\ncontract ERC20MintableFacetMock is ERC20MintableFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20MintableFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/facets/ERC20PermitFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20PermitFacet} from \"./../../../../token/ERC20/facets/ERC20PermitFacet.sol\";\n\ncontract ERC20PermitFacetMock is ERC20PermitFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20PermitFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC20/facets/ERC20SafeTransfersFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20SafeTransfersFacet} from \"./../../../../token/ERC20/facets/ERC20SafeTransfersFacet.sol\";\n\ncontract ERC20SafeTransfersFacetMock is ERC20SafeTransfersFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC20SafeTransfersFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/ERC721BurnableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Mock} from \"./ERC721Mock.sol\";\nimport {ERC721Burnable} from \"./../../../token/ERC721/ERC721Burnable.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721BurnableMock\ncontract ERC721BurnableMock is ERC721Mock, ERC721Burnable {\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        IForwarderRegistry forwarderRegistry\n    ) ERC721Mock(tokenName, tokenSymbol, forwarderRegistry) {}\n\n    /// @inheritdoc ERC721Mock\n    function _msgSender() internal view virtual override(Context, ERC721Mock) returns (address) {\n        return ERC721Mock._msgSender();\n    }\n\n    /// @inheritdoc ERC721Mock\n    function _msgData() internal view virtual override(Context, ERC721Mock) returns (bytes calldata) {\n        return ERC721Mock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/ERC721MetadataPerTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721MetadataPerToken} from \"./../../../token/ERC721/ERC721MetadataPerToken.sol\";\nimport {ERC721SimpleMock} from \"./ERC721SimpleMock.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721TokenMetadataMock\ncontract ERC721MetadataPerTokenMock is ERC721SimpleMock, ERC721MetadataPerToken {\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        IForwarderRegistry forwarderRegistry\n    ) ERC721MetadataPerToken(tokenName, tokenSymbol) ERC721SimpleMock(forwarderRegistry) {}\n\n    /// @inheritdoc ERC721SimpleMock\n    function _msgSender() internal view virtual override(Context, ERC721SimpleMock) returns (address) {\n        return ERC721SimpleMock._msgSender();\n    }\n\n    /// @inheritdoc ERC721SimpleMock\n    function _msgData() internal view virtual override(Context, ERC721SimpleMock) returns (bytes calldata) {\n        return ERC721SimpleMock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/ERC721MintableOnceMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721} from \"./../../../token/ERC721/ERC721.sol\";\nimport {ERC721MintableOnce} from \"./../../../token/ERC721/ERC721MintableOnce.sol\";\nimport {ERC721DeliverableOnce} from \"./../../../token/ERC721/ERC721DeliverableOnce.sol\";\nimport {ERC721Burnable} from \"./../../../token/ERC721/ERC721Burnable.sol\";\nimport {ContractOwnership} from \"./../../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../../metatx/ForwarderRegistryContext.sol\";\n\n/// @title ERC721MintableOnceFacetMock\ncontract ERC721MintableOnceMock is ERC721, ERC721MintableOnce, ERC721DeliverableOnce, ERC721Burnable, ForwarderRegistryContext {\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {}\n\n    /// @dev mock coverage function\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/ERC721Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721SimpleMock} from \"./ERC721SimpleMock.sol\";\nimport {ERC721Deliverable} from \"./../../../token/ERC721/ERC721Deliverable.sol\";\nimport {ERC721BatchTransfer} from \"./../../../token/ERC721/ERC721BatchTransfer.sol\";\nimport {ERC721MetadataWithBaseURI} from \"./../../../token/ERC721/ERC721MetadataWithBaseURI.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721Mock\ncontract ERC721Mock is ERC721SimpleMock, ERC721Deliverable, ERC721BatchTransfer, ERC721MetadataWithBaseURI {\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        IForwarderRegistry forwarderRegistry\n    ) ERC721MetadataWithBaseURI(tokenName, tokenSymbol) ERC721SimpleMock(forwarderRegistry) {}\n\n    /// @inheritdoc ERC721SimpleMock\n    function _msgSender() internal view virtual override(Context, ERC721SimpleMock) returns (address) {\n        return ERC721SimpleMock._msgSender();\n    }\n\n    /// @inheritdoc ERC721SimpleMock\n    function _msgData() internal view virtual override(Context, ERC721SimpleMock) returns (bytes calldata) {\n        return ERC721SimpleMock._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/ERC721ReceiverMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IERC721Receiver} from \"./../../../token/ERC721/interfaces/IERC721Receiver.sol\";\nimport {ERC721Storage} from \"./../../../token/ERC721/libraries/ERC721Storage.sol\";\nimport {ERC721Receiver} from \"./../../../token/ERC721/ERC721Receiver.sol\";\n\n/// @title ERC721 Receiver Mock\ncontract ERC721ReceiverMock is ERC721Receiver {\n    bool internal immutable _accept721;\n    address internal immutable _tokenAddress721;\n\n    event ERC721Received(address operator, address from, uint256 tokenId, bytes data);\n\n    constructor(bool accept721, address tokenAddress) ERC721Receiver() {\n        _accept721 = accept721;\n        _tokenAddress721 = tokenAddress;\n    }\n\n    //=================================================== ERC721Receiver ====================================================//\n\n    /// @inheritdoc IERC721Receiver\n    /// @dev reverts if the sender is not the supported ERC721 contract.\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public virtual override returns (bytes4) {\n        require(msg.sender == _tokenAddress721, \"ERC721Receiver: wrong token\");\n        if (_accept721) {\n            emit ERC721Received(operator, from, tokenId, data);\n            return ERC721Storage.ERC721_RECEIVED;\n        } else {\n            return 0x0;\n        }\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/ERC721SimpleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721} from \"./../../../token/ERC721/ERC721.sol\";\nimport {ERC721Mintable} from \"./../../../token/ERC721/ERC721Mintable.sol\";\nimport {ContractOwnership} from \"./../../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ERC721SimpleMock is ERC721, ERC721Mintable, ForwarderRegistryContext {\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/ERC721WithOperatorFiltererMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IOperatorFilterRegistry} from \"./../../../token/royalty/interfaces/IOperatorFilterRegistry.sol\";\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721WithOperatorFilterer} from \"./../../../token/ERC721/ERC721WithOperatorFilterer.sol\";\nimport {ERC721BatchTransferWithOperatorFilterer} from \"./../../../token/ERC721/ERC721BatchTransferWithOperatorFilterer.sol\";\nimport {ERC721Mintable} from \"./../../../token/ERC721/ERC721Mintable.sol\";\nimport {ContractOwnership} from \"./../../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../../metatx/ForwarderRegistryContext.sol\";\n\ncontract ERC721WithOperatorFiltererMock is\n    ERC721WithOperatorFilterer,\n    ERC721BatchTransferWithOperatorFilterer,\n    ERC721Mintable,\n    ForwarderRegistryContext\n{\n    constructor(\n        IOperatorFilterRegistry filterRegistry,\n        IForwarderRegistry forwarderRegistry\n    ) ERC721WithOperatorFilterer(filterRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721BatchTransferFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721BatchTransferFacet} from \"./../../../../token/ERC721/facets/ERC721BatchTransferFacet.sol\";\n\n/// @title ERC721BatchTransferFacetMock\ncontract ERC721BatchTransferFacetMock is ERC721BatchTransferFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721BatchTransferFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721BatchTransferWithOperatorFiltererFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721BatchTransferWithOperatorFiltererFacet} from \"./../../../../token/ERC721/facets/ERC721BatchTransferWithOperatorFiltererFacet.sol\";\n\n/// @title ERC721BatchTransferFacetMock\ncontract ERC721BatchTransferWithOperatorFiltererFacetMock is ERC721BatchTransferWithOperatorFiltererFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721BatchTransferWithOperatorFiltererFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721BurnableFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721BurnableFacet} from \"./../../../../token/ERC721/facets/ERC721BurnableFacet.sol\";\n\n/// @title ERC721BurnableFacetMock\ncontract ERC721BurnableFacetMock is ERC721BurnableFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721BurnableFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721DeliverableFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721DeliverableFacet} from \"./../../../../token/ERC721/facets/ERC721DeliverableFacet.sol\";\n\n/// @title ERC721DeliverableFacetMock\ncontract ERC721DeliverableFacetMock is ERC721DeliverableFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721DeliverableFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721DeliverableOnceFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721DeliverableOnceFacet} from \"./../../../../token/ERC721/facets/ERC721DeliverableOnceFacet.sol\";\n\n/// @title ERC721DeliverableOnceFacetMock\ncontract ERC721DeliverableOnceFacetMock is ERC721DeliverableOnceFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721DeliverableOnceFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721FacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Facet} from \"./../../../../token/ERC721/facets/ERC721Facet.sol\";\n\n/// @title ERC721FacetMock\ncontract ERC721FacetMock is ERC721Facet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721Facet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721MetadataPerTokenFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721MetadataPerTokenFacet} from \"./../../../../token/ERC721/facets/ERC721MetadataPerTokenFacet.sol\";\n\ncontract ERC721MetadataPerTokenFacetMock is ERC721MetadataPerTokenFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721MetadataPerTokenFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721MetadataWithBaseURIFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721MetadataWithBaseURIFacet} from \"./../../../../token/ERC721/facets/ERC721MetadataWithBaseURIFacet.sol\";\n\ncontract ERC721MetadataWithBaseURIFacetMock is ERC721MetadataWithBaseURIFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721MetadataWithBaseURIFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721MintableFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721MintableFacet} from \"./../../../../token/ERC721/facets/ERC721MintableFacet.sol\";\n\n/// @title ERC721MintableFacetMock\ncontract ERC721MintableFacetMock is ERC721MintableFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721MintableFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721MintableOnceFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721MintableOnceFacet} from \"./../../../../token/ERC721/facets/ERC721MintableOnceFacet.sol\";\n\n/// @title ERC721MintableOnceFacetMock\ncontract ERC721MintableOnceFacetMock is ERC721MintableOnceFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721MintableOnceFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/ERC721/facets/ERC721WithOperatorFiltererFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721WithOperatorFiltererFacet} from \"./../../../../token/ERC721/facets/ERC721WithOperatorFiltererFacet.sol\";\n\n/// @title ERC721FacetMock\ncontract ERC721WithOperatorFiltererFacetMock is ERC721WithOperatorFiltererFacet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC721WithOperatorFiltererFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/royalty/ERC2981Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC2981} from \"./../../../token/royalty/ERC2981.sol\";\nimport {ContractOwnership} from \"./../../../access/ContractOwnership.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../../metatx/ForwarderRegistryContext.sol\";\n\n/// @title ERC2981Mock\ncontract ERC2981Mock is ERC2981, ForwarderRegistryContext {\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/royalty/facets/ERC2981FacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC2981Facet} from \"./../../../../token/royalty/facets/ERC2981Facet.sol\";\n\n/// @title ERC2981FacetMock\ncontract ERC2981FacetMock is ERC2981Facet {\n    constructor(IForwarderRegistry forwarderRegistry) ERC2981Facet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/royalty/facets/OperatorFiltererFacetMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {OperatorFiltererFacet} from \"./../../../../token/royalty/facets/OperatorFiltererFacet.sol\";\n\n/// @title OperatorFiltererFacetMock\ncontract OperatorFiltererFacetMock is OperatorFiltererFacet {\n    constructor(IForwarderRegistry forwarderRegistry) OperatorFiltererFacet(forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/token/royalty/OperatorFilterRegistryMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IOperatorFilterRegistry} from \"./../../../token/royalty/interfaces/IOperatorFilterRegistry.sol\";\n\ncontract OperatorFilterRegistryMock is IOperatorFilterRegistry {\n    bool public operatorAllowed;\n\n    constructor(bool allowed) {\n        operatorAllowed = allowed;\n    }\n\n    function isOperatorAllowed(address, address) external view returns (bool) {\n        return operatorAllowed;\n    }\n\n    function register(address registrant) external {}\n\n    function registerAndSubscribe(address registrant, address subscription) external {}\n\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external {}\n\n    function unregister(address addr) external {}\n\n    function updateOperator(address registrant, address operator, bool filtered) external {}\n\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external {}\n\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external {}\n\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external {}\n\n    function subscribe(address registrant, address registrantToSubscribe) external {}\n\n    function unsubscribe(address registrant, bool copyExistingEntries) external {}\n\n    function subscriptionOf(address addr) external returns (address registrant) {}\n\n    function subscribers(address registrant) external returns (address[] memory) {}\n\n    function subscriberAt(address registrant, uint256 index) external returns (address) {}\n\n    function copyEntriesOf(address registrant, address registrantToCopy) external {}\n\n    function isOperatorFiltered(address registrant, address operator) external returns (bool) {}\n\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool) {}\n\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool) {}\n\n    function filteredOperators(address addr) external returns (address[] memory) {}\n\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory) {}\n\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address) {}\n\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32) {}\n\n    function isRegistered(address addr) external returns (bool) {}\n\n    function codeHashOf(address addr) external returns (bytes32) {}\n}\n"
    },
    "contracts/mocks/utils/Bytes32Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {Bytes32} from \"./../../utils/libraries/Bytes32.sol\";\n\ncontract Bytes32Mock {\n    function toBase32String(bytes32 value) external pure returns (string memory) {\n        return Bytes32.toBase32String(value);\n    }\n\n    function toASCIIString(bytes32 value) external pure returns (string memory) {\n        return Bytes32.toASCIIString(value);\n    }\n}\n"
    },
    "contracts/mocks/utils/MultiStaticCallMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {MultiStaticCall} from \"./../../utils/MultiStaticCall.sol\";\n\ncontract MultiStaticCallMock is MultiStaticCall {\n    function getBlockNumber() public view returns (uint256 blockNumber) {\n        blockNumber = block.number;\n    }\n\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n        coinbase = block.coinbase;\n    }\n\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n        gaslimit = block.gaslimit;\n    }\n\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n        timestamp = block.timestamp;\n    }\n\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function revertingCall() public pure {\n        revert(\"reverted\");\n    }\n}\n"
    },
    "contracts/payment/base/PayoutWalletBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {PayoutWalletStorage} from \"./../libraries/PayoutWalletStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Payout wallet (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract PayoutWalletBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    /// @notice Emitted when the payout wallet address changes.\n    /// @param payoutWallet the new payout wallet address.\n    event PayoutWalletSet(address payoutWallet);\n\n    /// @notice Sets the payout wallet.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `payoutWallet_` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param newPayoutWallet The payout wallet.\n    function setPayoutWallet(address payable newPayoutWallet) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\n    }\n\n    /// @notice Gets the payout wallet.\n    /// @return wallet The payout wallet.\n    function payoutWallet() external view returns (address payable wallet) {\n        return PayoutWalletStorage.layout().payoutWallet();\n    }\n}\n"
    },
    "contracts/payment/facets/PayoutWalletFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {PayoutWalletStorage} from \"./../libraries/PayoutWalletStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {PayoutWalletBase} from \"./../base/PayoutWalletBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Payout wallet (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {ContractOwnershipFacet}.\ncontract PayoutWalletFacet is PayoutWalletBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Initializes the storage with an initial payout wallet.\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Reverts if the sender is not the proxy admin.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Reverts if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    function initPayoutWalletStorage(address payable initialPayoutWallet) external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        PayoutWalletStorage.layout().proxyInit(initialPayoutWallet);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/payment/libraries/PayoutWalletStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary PayoutWalletStorage {\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    struct Layout {\n        address payable wallet;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.payment.PayoutWallet.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.payment.PayoutWallet.phase\")) - 1);\n\n    event PayoutWalletSet(address payoutWallet);\n\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Reverts if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\n        s.setPayoutWallet(initialPayoutWallet);\n    }\n\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Reverts if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.setPayoutWallet(initialPayoutWallet);\n    }\n\n    /// @notice Sets the payout wallet.\n    /// @dev Reverts if `newPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param newPayoutWallet The payout wallet.\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\n        require(newPayoutWallet != address(0), \"PayoutWallet: zero address\");\n        s.wallet = newPayoutWallet;\n        emit PayoutWalletSet(newPayoutWallet);\n    }\n\n    /// @notice Gets the payout wallet.\n    /// @return wallet The payout wallet.\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\n        return s.wallet;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/payment/PayoutWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {PayoutWalletStorage} from \"./libraries/PayoutWalletStorage.sol\";\nimport {PayoutWalletBase} from \"./base/PayoutWalletBase.sol\";\nimport {ContractOwnership} from \"../access/ContractOwnership.sol\";\n\n/// @title Payout wallet (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract PayoutWallet is PayoutWalletBase, ContractOwnership {\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    /// @notice Initializes the storage with an initial payout wallet.\n    /// @dev Reverts if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    constructor(address payable initialPayoutWallet) {\n        PayoutWalletStorage.layout().constructorInit(initialPayoutWallet);\n    }\n}\n"
    },
    "contracts/proxy/base/ProxyAdminBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ProxyAdminStorage} from \"./../libraries/ProxyAdminStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1967 Standard Proxy Storage Slots, Admin Address (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-1967\n/// @dev This contract is to be used via inheritance in a proxied implementation.\nabstract contract ProxyAdminBase is Context {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    /// @notice Emitted when the proxy admin changes.\n    /// @param previousAdmin the previous admin.\n    /// @param newAdmin the new admin.\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /// @notice Sets a new proxy admin.\n    /// @dev Reverts if `sender` is not the proxy admin.\n    /// @dev Emits an {AdminChanged} event if `newAdmin` is different from the current proxy admin.\n    /// @param newAdmin The new proxy admin.\n    function changeProxyAdmin(address newAdmin) external {\n        ProxyAdminStorage.layout().changeProxyAdmin(_msgSender(), newAdmin);\n    }\n\n    /// @notice Gets the proxy admin.\n    /// @return admin The proxy admin\n    function proxyAdmin() public view returns (address admin) {\n        return ProxyAdminStorage.layout().proxyAdmin();\n    }\n}\n"
    },
    "contracts/proxy/facets/ProxyAdminFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ProxyAdminStorage} from \"./../libraries/ProxyAdminStorage.sol\";\nimport {ProxyAdminBase} from \"./../base/ProxyAdminBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC1967 Standard Proxy Storage Slots, Admin Address (facet version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-1967\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\ncontract ProxyAdminFacet is ProxyAdminBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Initializes the storage with an initial admin.\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {AdminChanged} event if `initialAdmin` is not the zero address.\n    /// @param initialAdmin The initial payout wallet.\n    function initProxyAdminStorage(address initialAdmin) external {\n        ProxyAdminStorage.layout().proxyInit(initialAdmin);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/proxy/libraries/ProxyAdminStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport {ProxyInitialization} from \"./ProxyInitialization.sol\";\n\nlibrary ProxyAdminStorage {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    struct Layout {\n        address admin;\n    }\n\n    // bytes32 public constant PROXYADMIN_STORAGE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"eip1967.proxy.admin.phase\")) - 1);\n\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /// @notice Initializes the storage with an initial admin (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Reverts if `initialAdmin` is the zero address.\n    /// @dev Emits an {AdminChanged} event.\n    /// @param initialAdmin The initial payout wallet.\n    function constructorInit(Layout storage s, address initialAdmin) internal {\n        require(initialAdmin != address(0), \"ProxyAdmin: no initial admin\");\n        s.admin = initialAdmin;\n        emit AdminChanged(address(0), initialAdmin);\n    }\n\n    /// @notice Initializes the storage with an initial admin (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Reverts if `initialAdmin` is the zero address.\n    /// @dev Emits an {AdminChanged} event.\n    /// @param initialAdmin The initial payout wallet.\n    function proxyInit(Layout storage s, address initialAdmin) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialAdmin);\n    }\n\n    /// @notice Sets a new proxy admin.\n    /// @dev Reverts if `sender` is not the proxy admin.\n    /// @dev Emits an {AdminChanged} event if `newAdmin` is different from the current proxy admin.\n    /// @param newAdmin The new proxy admin.\n    function changeProxyAdmin(Layout storage s, address sender, address newAdmin) internal {\n        address previousAdmin = s.admin;\n        require(sender == previousAdmin, \"ProxyAdmin: not the admin\");\n        if (previousAdmin != newAdmin) {\n            s.admin = newAdmin;\n            emit AdminChanged(previousAdmin, newAdmin);\n        }\n    }\n\n    /// @notice Gets the proxy admin.\n    /// @return admin The proxy admin\n    function proxyAdmin(Layout storage s) internal view returns (address admin) {\n        return s.admin;\n    }\n\n    /// @notice Ensures that an account is the proxy admin.\n    /// @dev Reverts if `account` is not the proxy admin.\n    /// @param account The account.\n    function enforceIsProxyAdmin(Layout storage s, address account) internal view {\n        require(account == s.admin, \"ProxyAdmin: not the admin\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/proxy/libraries/ProxyInitialization.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        require(currentVersion.value < phase, \"Storage: phase reached\");\n        currentVersion.value = phase;\n    }\n}\n"
    },
    "contracts/proxy/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ProxyAdminStorage} from \"./libraries/ProxyAdminStorage.sol\";\nimport {ProxyAdminBase} from \"./base/ProxyAdminBase.sol\";\n\n/// @title ERC1967 Standard Proxy Storage Slots, Admin Address (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-1967\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ProxyAdmin is ProxyAdminBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    /// @notice Initializes the storage with an initial admin.\n    /// @dev Emits an {AdminChanged} event if `initialAdmin` is not the zero address.\n    /// @param initialAdmin The initial payout wallet.\n    constructor(address initialAdmin) {\n        ProxyAdminStorage.layout().constructorInit(initialAdmin);\n    }\n}\n"
    },
    "contracts/security/base/SealsBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {SealsStorage} from \"./../libraries/SealsStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\nabstract contract SealsBase is Context {\n    using SealsStorage for SealsStorage.Layout;\n\n    /// @notice Emitted when a seal is used.\n    /// @param sealId the seal identifier.\n    /// @param sealer the sealer address.\n    event Sealed(uint256 sealId, address sealer);\n\n    /// @notice Retrieves whether a seal has been used already.\n    /// @param sealId the seal identifier.\n    /// @return wasSealed Whether a seal has been used already.\n    function isSealed(uint256 sealId) external view returns (bool wasSealed) {\n        return SealsStorage.layout().isSealed(sealId);\n    }\n}\n"
    },
    "contracts/security/base/TokenRecoveryBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\ncontract TokenRecoveryBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == amounts.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                accounts[i].sendValue(amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == tokens.length && length == amounts.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == contracts.length && length == tokenIds.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\n            }\n        }\n    }\n}\n"
    },
    "contracts/security/facets/TokenRecoveryFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {TokenRecoveryBase} from \"./../base/TokenRecoveryBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ContractOwnershipFacet}.\ncontract TokenRecoveryFacet is TokenRecoveryBase, ForwarderRegistryContextBase {\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/security/libraries/SealsStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nlibrary SealsStorage {\n    using SealsStorage for SealsStorage.Layout;\n\n    struct Layout {\n        mapping(uint256 => bool) seals;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.security.Seals.storage\")) - 1);\n\n    event Sealed(uint256 sealId, address sealer);\n\n    /// @notice Registers a unique seal identifier.\n    /// @dev Reverts if the sealId has already been used.\n    /// @dev Emits a {Sealed} event.\n    /// @param sealer The sealer address\n    /// @param sealId The seal identifier.\n    function seal(Layout storage s, address sealer, uint256 sealId) internal {\n        require(!s.seals[sealId], \"Seals: sealed\");\n        s.seals[sealId] = true;\n        emit Sealed(sealId, sealer);\n    }\n\n    /// @notice Retrieves whether a seal has been used already.\n    /// @param sealId the seal identifier.\n    /// @return wasSealed Whether a seal has been used already.\n    function isSealed(Layout storage s, uint256 sealId) internal view returns (bool) {\n        return s.seals[sealId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/security/SealedExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../metatx/interfaces/IForwarderRegistry.sol\";\nimport {AccessControlStorage} from \"./../access/libraries/AccessControlStorage.sol\";\nimport {SealsStorage} from \"./libraries/SealsStorage.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {SealsBase} from \"./base/SealsBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\nimport {AccessControl} from \"./../access/AccessControl.sol\";\nimport {ForwarderRegistryContextBase} from \"./../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Sealead executions via calls on target contracts.\n/// @notice Enables contract calls to be performed uniquely thanks to a seal identifier.\n/// @notice Multiple executions can happen for example due to automation bugs in a backend or in a script.\n/// @notice Typically, it can be a good practice to protect the minting of fungible tokens with an immutable seal identifier,\n/// @notice such as a constant defined in a script or in a unique database field.\ncontract SealedExecutor is SealsBase, AccessControl, ForwarderRegistryContextBase {\n    using SealsStorage for SealsStorage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using Address for address;\n\n    bytes32 public constant SEALER_ROLE = \"sealer\";\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) ContractOwnership(msg.sender) {}\n\n    /// @notice Calls a contract function uniquely for a given seal identifier.\n    /// @dev Reverts if the sender does not have the sealer role.\n    /// @dev Reverts if the sealId has already been used.\n    /// @dev Emits a {Sealed} event.\n    /// @param target The target contract.\n    /// @param callData The encoded function call.\n    /// @param sealId The seal identifier.\n    /// @param returnData The data returned by the call.\n    function sealedCall(address target, bytes calldata callData, uint256 sealId) external returns (bytes memory returnData) {\n        address sealer = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(SEALER_ROLE, sealer);\n        SealsStorage.layout().seal(sealer, sealId);\n        return target.functionCall(callData);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/security/TokenRecovery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\n\n}\n"
    },
    "contracts/token/ERC1155/base/ERC1155Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155} from \"./../interfaces/IERC1155.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC1155Base is Context, IERC1155 {\n    using ERC1155Storage for ERC1155Storage.Layout;\n\n    /// @inheritdoc IERC1155\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\n        ERC1155Storage.layout().safeTransferFrom(_msgSender(), from, to, id, value, data);\n    }\n\n    /// @inheritdoc IERC1155\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external virtual override {\n        ERC1155Storage.layout().safeBatchTransferFrom(_msgSender(), from, to, ids, values, data);\n    }\n\n    /// @inheritdoc IERC1155\n    function setApprovalForAll(address operator, bool approved) external virtual override {\n        ERC1155Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC1155\n    function isApprovedForAll(address owner, address operator) external view override returns (bool approvedForAll) {\n        return ERC1155Storage.layout().isApprovedForAll(owner, operator);\n    }\n\n    /// @inheritdoc IERC1155\n    function balanceOf(address owner, uint256 id) external view virtual override returns (uint256 balance) {\n        return ERC1155Storage.layout().balanceOf(owner, id);\n    }\n\n    /// @inheritdoc IERC1155\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory balances) {\n        return ERC1155Storage.layout().balanceOfBatch(owners, ids);\n    }\n}\n"
    },
    "contracts/token/ERC1155/base/ERC1155BurnableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155Burnable} from \"./../interfaces/IERC1155Burnable.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\nabstract contract ERC1155BurnableBase is Context, IERC1155Burnable {\n    using ERC1155Storage for ERC1155Storage.Layout;\n\n    /// @inheritdoc IERC1155Burnable\n    function burnFrom(address from, uint256 id, uint256 value) external virtual override {\n        ERC1155Storage.layout().burnFrom(_msgSender(), from, id, value);\n    }\n\n    /// @inheritdoc IERC1155Burnable\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external virtual override {\n        ERC1155Storage.layout().batchBurnFrom(_msgSender(), from, ids, values);\n    }\n}\n"
    },
    "contracts/token/ERC1155/base/ERC1155DeliverableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155Deliverable} from \"./../interfaces/IERC1155Deliverable.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC1155DeliverableBase is Context, IERC1155Deliverable {\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    // prevent variable name clash with public ERC1155MintableBase.MINTER_ROLE\n    bytes32 private constant _MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC1155Deliverable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function safeDeliver(\n        address[] calldata recipients,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external virtual override {\n        address sender = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(_MINTER_ROLE, sender);\n        ERC1155Storage.layout().safeDeliver(sender, recipients, ids, values, data);\n    }\n}\n"
    },
    "contracts/token/ERC1155/base/ERC1155MetadataURIPerTokenBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155MetadataURI} from \"./../interfaces/IERC1155MetadataURI.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {TokenMetadataPerTokenStorage} from \"./../../metadata/libraries/TokenMetadataPerTokenStorage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI (proxiable version).\n/// @notice ERC1155MetadataURI implementation where tokenURIs are set individually per token.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC1155MetadataURIPerTokenBase is Context, IERC1155MetadataURI {\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using TokenMetadataPerTokenStorage for TokenMetadataPerTokenStorage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    // prevent variable name clash with public ERC1155MintableBase.MINTER_ROLE\n    bytes32 private constant _MINTER_ROLE = \"minter\";\n\n    /// @notice Sets the metadata URI for a token.\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    /// @param id The token identifier.\n    /// @param metadataURI The token metadata URI.\n    function setTokenURI(uint256 id, string calldata metadataURI) external {\n        AccessControlStorage.layout().enforceHasRole(_MINTER_ROLE, _msgSender());\n        TokenMetadataPerTokenStorage.layout().setTokenURI(id, metadataURI);\n    }\n\n    /// @notice Sets the metadata URIs for a batch of tokens.\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    /// @param ids The token identifiers.\n    /// @param metadataURIs The token metadata URIs.\n    function batchSetTokenURI(uint256[] calldata ids, string[] calldata metadataURIs) external {\n        AccessControlStorage.layout().enforceHasRole(_MINTER_ROLE, _msgSender());\n        TokenMetadataPerTokenStorage.layout().batchSetTokenURI(ids, metadataURIs);\n    }\n\n    /// @inheritdoc IERC1155MetadataURI\n    function uri(uint256 id) external view override returns (string memory metadataURI) {\n        return TokenMetadataPerTokenStorage.layout().tokenMetadataURI(id);\n    }\n}\n"
    },
    "contracts/token/ERC1155/base/ERC1155MetadataURIWithBaseURIBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155MetadataURI} from \"./../interfaces/IERC1155MetadataURI.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {TokenMetadataWithBaseURIStorage} from \"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard (proxiable version), optional extension: Metadata URI (proxiable version).\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract ERC1155MetadataURIWithBaseURIBase is Context, IERC1155MetadataURI {\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when the base token metadata URI is updated.\n    /// @param baseMetadataURI The new base metadata URI.\n    event BaseMetadataURISet(string baseMetadataURI);\n\n    /// @notice Sets the base metadata URI.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {BaseMetadataURISet} event.\n    /// @param baseURI The base metadata URI.\n    function setBaseMetadataURI(string calldata baseURI) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenMetadataWithBaseURIStorage.layout().setBaseMetadataURI(baseURI);\n    }\n\n    /// @notice Gets the base metadata URI.\n    /// @return baseURI The base metadata URI.\n    function baseMetadataURI() external view returns (string memory baseURI) {\n        return TokenMetadataWithBaseURIStorage.layout().baseMetadataURI();\n    }\n\n    /// @inheritdoc IERC1155MetadataURI\n    function uri(uint256 id) external view override returns (string memory metadataURI) {\n        return TokenMetadataWithBaseURIStorage.layout().tokenMetadataURI(id);\n    }\n}\n"
    },
    "contracts/token/ERC1155/base/ERC1155MintableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155Mintable} from \"./../interfaces/IERC1155Mintable.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC1155MintableBase is Context, IERC1155Mintable {\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC1155Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\n        address sender = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\n        ERC1155Storage.layout().safeMint(sender, to, id, value, data);\n    }\n\n    /// @inheritdoc IERC1155Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external virtual override {\n        address sender = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, sender);\n        ERC1155Storage.layout().safeBatchMint(sender, to, ids, values, data);\n    }\n}\n"
    },
    "contracts/token/ERC1155/base/ERC1155WithOperatorFiltererBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155} from \"./../interfaces/IERC1155.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {OperatorFiltererStorage} from \"./../../royalty/libraries/OperatorFiltererStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC1155 Multi Token Standard with Operator Filterer (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC1155WithOperatorFiltererBase is Context, IERC1155 {\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using OperatorFiltererStorage for OperatorFiltererStorage.Layout;\n\n    /// @inheritdoc IERC1155\n    /// @dev Reverts with OperatorNotAllowed if the sender is not `from` and is not allowed by the operator registry.\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external virtual override {\n        address sender = _msgSender();\n        OperatorFiltererStorage.layout().requireAllowedOperatorForTransfer(sender, from);\n        ERC1155Storage.layout().safeTransferFrom(sender, from, to, id, value, data);\n    }\n\n    /// @inheritdoc IERC1155\n    /// @dev Reverts with OperatorNotAllowed if the sender is not `from` and is not allowed by the operator registry.\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external virtual override {\n        address sender = _msgSender();\n        OperatorFiltererStorage.layout().requireAllowedOperatorForTransfer(sender, from);\n        ERC1155Storage.layout().safeBatchTransferFrom(sender, from, to, ids, values, data);\n    }\n\n    /// @inheritdoc IERC1155\n    /// @dev Reverts with OperatorNotAllowed if `operator` is not allowed by the operator registry.\n    function setApprovalForAll(address operator, bool approved) external virtual override {\n        if (approved) {\n            OperatorFiltererStorage.layout().requireAllowedOperatorForApproval(operator);\n        }\n        ERC1155Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC1155\n    function isApprovedForAll(address owner, address operator) external view override returns (bool approvedForAll) {\n        return ERC1155Storage.layout().isApprovedForAll(owner, operator);\n    }\n\n    /// @inheritdoc IERC1155\n    function balanceOf(address owner, uint256 id) external view virtual override returns (uint256 balance) {\n        return ERC1155Storage.layout().balanceOf(owner, id);\n    }\n\n    /// @inheritdoc IERC1155\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory balances) {\n        return ERC1155Storage.layout().balanceOfBatch(owners, ids);\n    }\n}\n"
    },
    "contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {ERC1155Base} from \"./base/ERC1155Base.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155 is ERC1155Base, InterfaceDetection {\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155.\n    constructor() {\n        ERC1155Storage.init();\n    }\n}\n"
    },
    "contracts/token/ERC1155/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {ERC1155BurnableBase} from \"./base/ERC1155BurnableBase.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155Burnable is ERC1155BurnableBase {\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Burnable\n    constructor() {\n        ERC1155Storage.initERC1155Burnable();\n    }\n}\n"
    },
    "contracts/token/ERC1155/ERC1155Deliverable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {ERC1155DeliverableBase} from \"./base/ERC1155DeliverableBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155Deliverable is ERC1155DeliverableBase, AccessControl {\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Deliverable\n    constructor() {\n        ERC1155Storage.initERC1155Deliverable();\n    }\n}\n"
    },
    "contracts/token/ERC1155/ERC1155MetadataURIPerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {ERC1155MetadataURIPerTokenBase} from \"./base/ERC1155MetadataURIPerTokenBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: MetadataURIPerToken (immutable version).\n/// @notice ERC1155MetadataURI implementation where tokenURIs are set individually per token.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155MetadataURIPerToken is ERC1155MetadataURIPerTokenBase, AccessControl {\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155MetadataURI\n    constructor() {\n        ERC1155Storage.initERC1155MetadataURI();\n    }\n}\n"
    },
    "contracts/token/ERC1155/ERC1155MetadataURIWithBaseURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {TokenMetadataWithBaseURIStorage} from \"./../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\";\nimport {ERC1155MetadataURIWithBaseURIBase} from \"./base/ERC1155MetadataURIWithBaseURIBase.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: MetadataURIPerToken (immutable version).\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155MetadataURIWithBaseURI is ERC1155MetadataURIWithBaseURIBase, ContractOwnership {\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155MetadataURI\n    constructor() {\n        ERC1155Storage.initERC1155MetadataURI();\n    }\n}\n"
    },
    "contracts/token/ERC1155/ERC1155Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {ERC1155MintableBase} from \"./base/ERC1155MintableBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155Mintable is ERC1155MintableBase, AccessControl {\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC1155Mintable\n    constructor() {\n        ERC1155Storage.initERC1155Mintable();\n    }\n}\n"
    },
    "contracts/token/ERC1155/ERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155TokenReceiver} from \"./interfaces/IERC1155TokenReceiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\n    }\n}\n"
    },
    "contracts/token/ERC1155/ERC1155WithOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IOperatorFilterRegistry} from \"./../royalty/interfaces/IOperatorFilterRegistry.sol\";\nimport {ERC1155Storage} from \"./libraries/ERC1155Storage.sol\";\nimport {OperatorFiltererStorage} from \"./../royalty/libraries/OperatorFiltererStorage.sol\";\nimport {ERC1155WithOperatorFiltererBase} from \"./base/ERC1155WithOperatorFiltererBase.sol\";\nimport {OperatorFiltererBase} from \"./../royalty/base/OperatorFiltererBase.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC1155 Multi Token Standard with Operator Filterer (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155WithOperatorFilterer is ERC1155WithOperatorFiltererBase, OperatorFiltererBase, ContractOwnership {\n    using OperatorFiltererStorage for OperatorFiltererStorage.Layout;\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155.\n    /// @notice Sets the address that the contract will make OperatorFilter checks against.\n    /// @param registry The operator filter registry address. When set to the zero address, checks will be bypassed.\n    constructor(IOperatorFilterRegistry registry) {\n        ERC1155Storage.init();\n        OperatorFiltererStorage.layout().constructorInit(registry);\n    }\n}\n"
    },
    "contracts/token/ERC1155/facets/ERC1155BurnableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC1155BurnableBase} from \"./../base/ERC1155BurnableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\ncontract ERC1155BurnableFacet is ERC1155BurnableBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155Burnable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC1155BurnableStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC1155Storage.initERC1155Burnable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC1155/facets/ERC1155DeliverableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC1155DeliverableBase} from \"./../base/ERC1155DeliverableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\ncontract ERC1155DeliverableFacet is ERC1155DeliverableBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155Deliverable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC1155DeliverableStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC1155Storage.initERC1155Deliverable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC1155/facets/ERC1155Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC1155Base} from \"./../base/ERC1155Base.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC1155 Multi Token Standard (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\ncontract ERC1155Facet is ERC1155Base, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC1155Storage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC1155Storage.init();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC1155/facets/ERC1155MetadataURIPerTokenFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC1155MetadataURIPerTokenBase} from \"./../base/ERC1155MetadataURIPerTokenBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI (facet version).\n/// @notice ERC1155MetadataURI implementation where tokenURIs are set individually per token.\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\ncontract ERC1155MetadataURIPerTokenFacet is ERC1155MetadataURIPerTokenBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155MetadataURI.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC1155MetadataURIStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC1155Storage.initERC1155MetadataURI();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC1155/facets/ERC1155MetadataURIWithBaseURIFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {TokenMetadataWithBaseURIStorage} from \"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC1155MetadataURIWithBaseURIBase} from \"./../base/ERC1155MetadataURIWithBaseURIBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI (facet version).\n/// @notice ERC1155MetadataURI implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\ncontract ERC1155MetadataURIWithBaseURIFacet is ERC1155MetadataURIWithBaseURIBase, ForwarderRegistryContextBase {\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC1155MetadataURIStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC1155Storage.initERC1155MetadataURI();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC1155/facets/ERC1155MintableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC1155MintableBase} from \"./../base/ERC1155MintableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\ncontract ERC1155MintableFacet is ERC1155MintableBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155Mintable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC1155MintableStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC1155Storage.initERC1155Mintable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC1155/facets/ERC1155WithOperatorFiltererFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC1155Storage} from \"./../libraries/ERC1155Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC1155WithOperatorFiltererBase} from \"./../base/ERC1155WithOperatorFiltererBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC1155 Multi Token Standard with Operator Filterer (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet}, {ContractOwnershipFacet} and {OperatorFiltererFacet}.\ncontract ERC1155WithOperatorFiltererFacet is ERC1155WithOperatorFiltererBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC1155Storage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC1155Storage.init();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC1155/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, basic interface.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\ninterface IERC1155 {\n    /// @notice Emitted when some token is transferred.\n    /// @param operator The initiator of the transfer.\n    /// @param from The previous token owner.\n    /// @param to The new token owner.\n    /// @param id The transferred token identifier.\n    /// @param value The amount of token.\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /// @notice Emitted when a batch of tokens is transferred.\n    /// @param operator The initiator of the transfer.\n    /// @param from The previous tokens owner.\n    /// @param to The new tokens owner.\n    /// @param ids The transferred tokens identifiers.\n    /// @param values The amounts of tokens.\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /// @notice Emitted when an approval for all tokens is set or unset.\n    /// @param owner The tokens owner.\n    /// @param operator The approved address.\n    /// @param approved True when then approval is set, false when it is unset.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /// @notice Emitted optionally when a token metadata URI is set.\n    /// @param value The token metadata URI.\n    /// @param id The token identifier.\n    event URI(string value, uint256 indexed id);\n\n    /// @notice Safely transfers some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param from Current token owner.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to transfer.\n    /// @param value Amount of token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely transfers a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to transfer.\n    /// @param values Amounts of tokens to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n\n    /// @notice Enables or disables an operator's approval.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator Address of the operator.\n    /// @param approved True to approve the operator, false to revoke its approval.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Retrieves the approval status of an operator for a given owner.\n    /// @param owner Address of the authorisation giver.\n    /// @param operator Address of the operator.\n    /// @return approved True if the operator is approved, false if not.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\n\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\n    /// @param owner The account to retrieve the balance of.\n    /// @param id The identifier to retrieve the balance of.\n    /// @return balance The balance of `id` owned by account `owner`.\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\n\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\n    /// @dev Reverts if `owners` and `ids` have different lengths.\n    /// @param owners The addresses of the token holders\n    /// @param ids The identifiers to retrieve the balance of.\n    /// @return balances The balances of `ids` owned by accounts `owners`.\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\n}\n"
    },
    "contracts/token/ERC1155/interfaces/IERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\ninterface IERC1155Burnable {\n    /// @notice Burns some token.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(address from, uint256 id, uint256 value) external;\n\n    /// @notice Burns multiple tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\n}\n"
    },
    "contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\ninterface IERC1155Deliverable {\n    /// @notice Safely mints tokens to multiple recipients.\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `recipients` balance overflows.\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"
    },
    "contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\ninterface IERC1155MetadataURI {\n    /// @notice Retrieves the URI for a given token.\n    /// @dev URIs are defined in RFC 3986.\n    /// @dev The URI MUST point to a JSON file that conforms to the \"ERC1155 Metadata URI JSON Schema\".\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\n    ///  an implementation to return a valid string even if the token does not exist.\n    /// @return metadataURI The URI associated to the token.\n    function uri(uint256 id) external view returns (string memory metadataURI);\n}\n"
    },
    "contracts/token/ERC1155/interfaces/IERC1155Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\ninterface IERC1155Mintable {\n    /// @notice Safely mints some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely mints a batch of tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"
    },
    "contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"
    },
    "contracts/token/ERC1155/libraries/ERC1155Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155} from \"./../interfaces/IERC1155.sol\";\nimport {IERC1155MetadataURI} from \"./../interfaces/IERC1155MetadataURI.sol\";\nimport {IERC1155Mintable} from \"./../interfaces/IERC1155Mintable.sol\";\nimport {IERC1155Deliverable} from \"./../interfaces/IERC1155Deliverable.sol\";\nimport {IERC1155Burnable} from \"./../interfaces/IERC1155Burnable.sol\";\nimport {IERC1155TokenReceiver} from \"./../interfaces/IERC1155TokenReceiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC1155Storage {\n    using Address for address;\n    using ERC1155Storage for ERC1155Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(uint256 => mapping(address => uint256)) balances;\n        mapping(address => mapping(address => bool)) operators;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.ERC1155.ERC1155.storage\")) - 1);\n\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\n\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n    event URI(string value, uint256 indexed id);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\n    function initERC1155MetadataURI() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\n    function initERC1155Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\n    function initERC1155Deliverable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\n    function initERC1155Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\n    }\n\n    /// @notice Safely transfers some token by a sender.\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param sender The message sender.\n    /// @param from Current token owner.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to transfer.\n    /// @param value Amount of token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\n        require(to != address(0), \"ERC1155: transfer to address(0)\");\n        require(_isOperatable(s, from, sender), \"ERC1155: non-approved sender\");\n\n        _transferToken(s, from, to, id, value);\n\n        emit TransferSingle(sender, from, to, id, value);\n\n        if (to.isContract()) {\n            _callOnERC1155Received(sender, from, to, id, value, data);\n        }\n    }\n\n    /// @notice Safely transfers a batch of tokens by a sender.\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param sender The message sender.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to transfer.\n    /// @param values Amounts of tokens to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchTransferFrom(\n        Layout storage s,\n        address sender,\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) internal {\n        require(to != address(0), \"ERC1155: transfer to address(0)\");\n        uint256 length = ids.length;\n        require(length == values.length, \"ERC1155: inconsistent arrays\");\n\n        require(_isOperatable(s, from, sender), \"ERC1155: non-approved sender\");\n\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                _transferToken(s, from, to, ids[i], values[i]);\n            }\n        }\n\n        emit TransferBatch(sender, from, to, ids, values);\n\n        if (to.isContract()) {\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\n        }\n    }\n\n    /// @notice Safely mints some token by a sender.\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param sender The message sender.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\n        require(to != address(0), \"ERC1155: mint to address(0)\");\n\n        _mintToken(s, to, id, value);\n\n        emit TransferSingle(sender, address(0), to, id, value);\n\n        if (to.isContract()) {\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\n        }\n    }\n\n    /// @notice Safely mints a batch of tokens by a sender.\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param sender The message sender.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        require(to != address(0), \"ERC1155: mint to address(0)\");\n        uint256 length = ids.length;\n        require(length == values.length, \"ERC1155: inconsistent arrays\");\n\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                _mintToken(s, to, ids[i], values[i]);\n            }\n        }\n\n        emit TransferBatch(sender, address(0), to, ids, values);\n\n        if (to.isContract()) {\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\n        }\n    }\n\n    /// @notice Safely mints tokens to multiple recipients by a sender.\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `recipients` balance overflows.\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\n    /// @param sender The message sender.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeDeliver(\n        Layout storage s,\n        address sender,\n        address[] memory recipients,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        uint256 length = recipients.length;\n        require(length == ids.length && length == values.length, \"ERC1155: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                s.safeMint(sender, recipients[i], ids[i], values[i], data);\n            }\n        }\n    }\n\n    /// @notice Burns some token by a sender.\n    /// @dev Reverts `sender` is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param sender The message sender.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\n        require(_isOperatable(s, from, sender), \"ERC1155: non-approved sender\");\n        _burnToken(s, from, id, value);\n        emit TransferSingle(sender, from, address(0), id, value);\n    }\n\n    /// @notice Burns multiple tokens by a sender.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param sender The message sender.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\n        uint256 length = ids.length;\n        require(length == values.length, \"ERC1155: inconsistent arrays\");\n        require(_isOperatable(s, from, sender), \"ERC1155: non-approved sender\");\n\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                _burnToken(s, from, ids[i], values[i]);\n            }\n        }\n\n        emit TransferBatch(sender, from, address(0), ids, values);\n    }\n\n    /// @notice Enables or disables an operator's approval by a sender.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param sender The message sender.\n    /// @param operator Address of the operator.\n    /// @param approved True to approve the operator, false to revoke its approval.\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\n        require(operator != sender, \"ERC1155: self-approval for all\");\n        s.operators[sender][operator] = approved;\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @notice Retrieves the approval status of an operator for a given owner.\n    /// @param owner Address of the authorisation giver.\n    /// @param operator Address of the operator.\n    /// @return approved True if the operator is approved, false if not.\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\n        return s.operators[owner][operator];\n    }\n\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\n    /// @param owner The account to retrieve the balance of.\n    /// @param id The identifier to retrieve the balance of.\n    /// @return balance The balance of `id` owned by account `owner`.\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\n        require(owner != address(0), \"ERC1155: balance of address(0)\");\n        return s.balances[id][owner];\n    }\n\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\n    /// @dev Reverts if `owners` and `ids` have different lengths.\n    /// @param owners The addresses of the token holders\n    /// @param ids The identifiers to retrieve the balance of.\n    /// @return balances The balances of `ids` owned by accounts `owners`.\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\n        uint256 length = owners.length;\n        require(length == ids.length, \"ERC1155: inconsistent arrays\");\n\n        balances = new uint256[](owners.length);\n\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                balances[i] = s.balanceOf(owners[i], ids[i]);\n            }\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n    /// @param owner The token owner.\n    /// @param account The account to check the operatability of.\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\n        return (owner == account) || s.operators[owner][account];\n    }\n\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\n        if (value != 0) {\n            unchecked {\n                uint256 fromBalance = s.balances[id][from];\n                uint256 newFromBalance = fromBalance - value;\n                require(newFromBalance < fromBalance, \"ERC1155: insufficient balance\");\n                if (from != to) {\n                    uint256 toBalance = s.balances[id][to];\n                    uint256 newToBalance = toBalance + value;\n                    require(newToBalance > toBalance, \"ERC1155: balance overflow\");\n\n                    s.balances[id][from] = newFromBalance;\n                    s.balances[id][to] = newToBalance;\n                }\n            }\n        }\n    }\n\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\n        if (value != 0) {\n            unchecked {\n                uint256 balance = s.balances[id][to];\n                uint256 newBalance = balance + value;\n                require(newBalance > balance, \"ERC1155: balance overflow\");\n                s.balances[id][to] = newBalance;\n            }\n        }\n    }\n\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\n        if (value != 0) {\n            unchecked {\n                uint256 balance = s.balances[id][from];\n                uint256 newBalance = balance - value;\n                require(newBalance < balance, \"ERC1155: insufficient balance\");\n                s.balances[id][from] = newBalance;\n            }\n        }\n    }\n\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param id Identifier of the token transferred.\n    /// @param value Value transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\n        require(IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) == ERC1155_SINGLE_RECEIVED, \"ERC1155: transfer rejected\");\n    }\n\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param ids Identifiers of the tokens transferred.\n    /// @param values Values transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC1155BatchReceived(\n        address sender,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        require(\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) == ERC1155_BATCH_RECEIVED,\n            \"ERC1155: transfer rejected\"\n        );\n    }\n}\n"
    },
    "contracts/token/ERC20/base/ERC20Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20} from \"./../interfaces/IERC20.sol\";\nimport {IERC20Allowance} from \"./../interfaces/IERC20Allowance.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC20Base is Context, IERC20, IERC20Allowance {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20\n    function approve(address spender, uint256 value) external virtual override returns (bool result) {\n        ERC20Storage.layout().approve(_msgSender(), spender, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transfer(address to, uint256 value) external virtual override returns (bool result) {\n        ERC20Storage.layout().transfer(_msgSender(), to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transferFrom(address from, address to, uint256 value) external virtual override returns (bool result) {\n        ERC20Storage.layout().transferFrom(_msgSender(), from, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Allowance\n    function increaseAllowance(address spender, uint256 addedValue) external virtual override returns (bool result) {\n        ERC20Storage.layout().increaseAllowance(_msgSender(), spender, addedValue);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Allowance\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual override returns (bool result) {\n        ERC20Storage.layout().decreaseAllowance(_msgSender(), spender, subtractedValue);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() external view override returns (uint256 supply) {\n        return ERC20Storage.layout().totalSupply();\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address owner) external view override returns (uint256 balance) {\n        return ERC20Storage.layout().balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual override returns (uint256 value) {\n        return ERC20Storage.layout().allowance(owner, spender);\n    }\n}\n"
    },
    "contracts/token/ERC20/base/ERC20BatchTransfersBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20BatchTransfers} from \"./../interfaces/IERC20BatchTransfers.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20BatchTransfersBase is Context, IERC20BatchTransfers {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20BatchTransfers\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external virtual override returns (bool) {\n        ERC20Storage.layout().batchTransfer(_msgSender(), recipients, values);\n        return true;\n    }\n\n    /// @inheritdoc IERC20BatchTransfers\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external virtual override returns (bool) {\n        ERC20Storage.layout().batchTransferFrom(_msgSender(), from, recipients, values);\n        return true;\n    }\n}\n"
    },
    "contracts/token/ERC20/base/ERC20BurnableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Burnable} from \"./../interfaces/IERC20Burnable.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20BurnableBase is Context, IERC20Burnable {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20Burnable\n    function burn(uint256 value) external virtual override returns (bool) {\n        ERC20Storage.layout().burn(_msgSender(), value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Burnable\n    function burnFrom(address from, uint256 value) external virtual override returns (bool) {\n        ERC20Storage.layout().burnFrom(_msgSender(), from, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Burnable\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external virtual override returns (bool) {\n        ERC20Storage.layout().batchBurnFrom(_msgSender(), owners, values);\n        return true;\n    }\n}\n"
    },
    "contracts/token/ERC20/base/ERC20DetailedBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Detailed} from \"./../interfaces/IERC20Detailed.sol\";\nimport {ERC20DetailedStorage} from \"./../libraries/ERC20DetailedStorage.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20DetailedBase is IERC20Detailed {\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n\n    /// @inheritdoc IERC20Detailed\n    function name() external view override returns (string memory) {\n        return ERC20DetailedStorage.layout().name();\n    }\n\n    /// @inheritdoc IERC20Detailed\n    function symbol() external view override returns (string memory) {\n        return ERC20DetailedStorage.layout().symbol();\n    }\n\n    /// @inheritdoc IERC20Detailed\n    function decimals() external view override returns (uint8) {\n        return ERC20DetailedStorage.layout().decimals();\n    }\n}\n"
    },
    "contracts/token/ERC20/base/ERC20MetadataBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Metadata} from \"./../interfaces/IERC20Metadata.sol\";\nimport {ERC20MetadataStorage} from \"./../libraries/ERC20MetadataStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract ERC20MetadataBase is Context, IERC20Metadata {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Sets the token URI.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @param uri The token URI.\n    function setTokenURI(string calldata uri) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        ERC20MetadataStorage.layout().setTokenURI(uri);\n    }\n\n    /// @inheritdoc IERC20Metadata\n    function tokenURI() external view override returns (string memory) {\n        return ERC20MetadataStorage.layout().tokenURI();\n    }\n}\n"
    },
    "contracts/token/ERC20/base/ERC20MintableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Mintable} from \"./../interfaces/IERC20Mintable.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC20MintableBase is Context, IERC20Mintable {\n    using ERC20Storage for ERC20Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC20Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function mint(address to, uint256 value) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC20Storage.layout().mint(to, value);\n    }\n\n    /// @inheritdoc IERC20Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC20Storage.layout().batchMint(recipients, values);\n    }\n}\n"
    },
    "contracts/token/ERC20/base/ERC20PermitBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Permit} from \"./../interfaces/IERC20Permit.sol\";\nimport {ERC20PermitStorage} from \"./../libraries/ERC20PermitStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires ERC20Detailed.\nabstract contract ERC20PermitBase is Context, IERC20Permit {\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\n\n    /// @inheritdoc IERC20Permit\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external override {\n        ERC20PermitStorage.layout().permit(owner, spender, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc IERC20Permit\n    function nonces(address owner) external view override returns (uint256) {\n        return ERC20PermitStorage.layout().nonces(owner);\n    }\n\n    /// @inheritdoc IERC20Permit\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return ERC20PermitStorage.DOMAIN_SEPARATOR();\n    }\n}\n"
    },
    "contracts/token/ERC20/base/ERC20SafeTransfersBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20SafeTransfers} from \"./../interfaces/IERC20SafeTransfers.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20SafeTransfersBase is Context, IERC20SafeTransfers {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20SafeTransfers\n    function safeTransfer(address to, uint256 value, bytes calldata data) external virtual override returns (bool) {\n        ERC20Storage.layout().safeTransfer(_msgSender(), to, value, data);\n        return true;\n    }\n\n    /// @inheritdoc IERC20SafeTransfers\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external virtual override returns (bool) {\n        ERC20Storage.layout().safeTransferFrom(_msgSender(), from, to, value, data);\n        return true;\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20Base} from \"./base/ERC20Base.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20 is ERC20Base, InterfaceDetection {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    constructor() {\n        ERC20Storage.init();\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20BatchTransfers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20BatchTransfersBase} from \"./base/ERC20BatchTransfersBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20BatchTransfers is ERC20BatchTransfersBase {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\n    constructor() {\n        ERC20Storage.initERC20BatchTransfers();\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20BurnableBase} from \"./base/ERC20BurnableBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Burnable is ERC20BurnableBase {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\n    constructor() {\n        ERC20Storage.initERC20Burnable();\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20DetailedStorage} from \"./libraries/ERC20DetailedStorage.sol\";\nimport {ERC20DetailedBase} from \"./base/ERC20DetailedBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Detailed is ERC20DetailedBase {\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n\n    /// @notice Initializes the storage with the token details.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    constructor(string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) {\n        ERC20DetailedStorage.layout().constructorInit(tokenName, tokenSymbol, tokenDecimals);\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20MetadataStorage} from \"./libraries/ERC20MetadataStorage.sol\";\nimport {ERC20MetadataBase} from \"./base/ERC20MetadataBase.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Metadata is ERC20MetadataBase, ContractOwnership {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\n    constructor() {\n        ERC20MetadataStorage.init();\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20MintableBase} from \"./base/ERC20MintableBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Mintable is ERC20MintableBase, AccessControl {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\n    constructor() {\n        ERC20Storage.initERC20Mintable();\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Permit} from \"./interfaces/IERC20Permit.sol\";\nimport {ERC20PermitStorage} from \"./libraries/ERC20PermitStorage.sol\";\nimport {ERC20PermitBase} from \"./base/ERC20PermitBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Note: This contract requires ERC20Detailed.\nabstract contract ERC20Permit is ERC20PermitBase {\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\n    constructor() {\n        ERC20PermitStorage.init();\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Receiver} from \"./interfaces/IERC20Receiver.sol\";\nimport {InterfaceDetectionStorage} from \"../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\n    }\n}\n"
    },
    "contracts/token/ERC20/ERC20SafeTransfers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC20Storage} from \"./libraries/ERC20Storage.sol\";\nimport {ERC20SafeTransfersBase} from \"./base/ERC20SafeTransfersBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20SafeTransfers is ERC20SafeTransfersBase {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\n    constructor() {\n        ERC20Storage.initERC20SafeTransfers();\n    }\n}\n"
    },
    "contracts/token/ERC20/facets/ERC20BatchTransfersFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC20BatchTransfersBase} from \"./../base/ERC20BatchTransfersBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract ERC20BatchTransfersFacet is ERC20BatchTransfersBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC20BatchTransfersStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC20Storage.initERC20BatchTransfers();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC20/facets/ERC20BurnableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC20BurnableBase} from \"./../base/ERC20BurnableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract ERC20BurnableFacet is ERC20BurnableBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC20BurnableStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC20Storage.initERC20Burnable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC20/facets/ERC20DetailedFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20DetailedStorage} from \"./../libraries/ERC20DetailedStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC20DetailedBase} from \"./../base/ERC20DetailedBase.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract ERC20DetailedFacet is ERC20DetailedBase, ForwarderRegistryContextBase {\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Initializes the storage with the token details.\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @dev Reverts if the sender is not the proxy admin.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    function initERC20DetailedStorage(string calldata tokenName, string calldata tokenSymbol, uint8 tokenDecimals) external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC20DetailedStorage.layout().proxyInit(tokenName, tokenSymbol, tokenDecimals);\n    }\n}\n"
    },
    "contracts/token/ERC20/facets/ERC20Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC20Base} from \"./../base/ERC20Base.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC20 Fungible Token Standard (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract ERC20Facet is ERC20Base, ForwarderRegistryContextBase {\n    using ERC20Storage for ERC20Storage.Layout;\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC20Storage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC20Storage.init();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC20/facets/ERC20MetadataFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20MetadataStorage} from \"./../libraries/ERC20MetadataStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC20MetadataBase} from \"./../base/ERC20MetadataBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {ContractOwnershipFacet} and {InterfaceDetectionFacet}.\ncontract ERC20MetadataFacet is ERC20MetadataBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\n    function initERC20MetadataStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC20MetadataStorage.init();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC20/facets/ERC20MintableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC20MintableBase} from \"./../base/ERC20MintableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {ContractOwnershipFacet}, {InterfaceDetectionFacet} and {AccessControlFacet}.\ncontract ERC20MintableFacet is ERC20MintableBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC20MintableStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC20Storage.initERC20Mintable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC20/facets/ERC20PermitFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20PermitStorage} from \"./../libraries/ERC20PermitStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC20PermitBase} from \"./../base/ERC20PermitBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet} and {ERC20DetailedFacet}.\ncontract ERC20PermitFacet is ERC20PermitBase, ForwarderRegistryContextBase {\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC20PermitStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC20PermitStorage.init();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC20/facets/ERC20SafeTransfersFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC20SafeTransfersBase} from \"./../base/ERC20SafeTransfersBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract ERC20SafeTransfersFacet is ERC20SafeTransfersBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC20SafeTransfersStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC20Storage.initERC20SafeTransfers();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, basic interface.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\ninterface IERC20 {\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\n    /// @param from The account where the transferred tokens are withdrawn from.\n    /// @param to The account where the transferred tokens are deposited to.\n    /// @param value The amount of tokens being transferred.\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Emitted when an approval is set.\n    /// @param owner The account granting an allowance to `spender`.\n    /// @param spender The account being granted an allowance from `owner`.\n    /// @param value The allowance amount being granted.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Sets the allowance to an account from the sender.\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param spender The account being granted the allowance by the message caller.\n    /// @param value The allowance amount to grant.\n    /// @return result Whether the operation succeeded.\n    function approve(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transfer(address to, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\n\n    /// @notice Gets the total token supply.\n    /// @return supply The total token supply.\n    function totalSupply() external view returns (uint256 supply);\n\n    /// @notice Gets an account balance.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(address owner, address spender) external view returns (uint256 value);\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20Allowance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Allowance.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\ninterface IERC20Allowance {\n    /// @notice Increases the allowance granted to an account by the sender.\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n    /// @param spender The account whose allowance is being increased.\n    /// @param value The allowance amount increase.\n    /// @return result Whether the operation succeeded.\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Decreases the allowance granted to an account by the sender.\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n    /// @param spender The account whose allowance is being decreased.\n    /// @param value The allowance amount decrease.\n    /// @return result Whether the operation succeeded.\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\ninterface IERC20BatchTransfers {\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    /// @return result Whether the operation succeeded.\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\n\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to be transferred.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    /// @return result Whether the operation succeeded.\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\ninterface IERC20Burnable {\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n    /// @param value The amount of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function burn(uint256 value) external returns (bool result);\n\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account to burn the tokens from.\n    /// @param value The amount of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function burnFrom(address from, uint256 value) external returns (bool result);\n\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n    /// @dev Reverts if `owners` and `values` have different lengths.\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\n    /// @param owners The list of accounts to burn the tokens from.\n    /// @param values The list of amounts of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Detailed.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\ninterface IERC20Detailed {\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name() external view returns (string memory tokenName);\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol() external view returns (string memory tokenSymbol);\n\n    /// @notice Gets the number of decimals used to display the balances.\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\n    /// @return nbDecimals The number of decimals used to display the balances.\n    function decimals() external view returns (uint8 nbDecimals);\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\ninterface IERC20Metadata {\n    /// @notice Gets the token metadata URI.\n    /// @return uri The token metadata URI.\n    function tokenURI() external view returns (string memory uri);\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\ninterface IERC20Mintable {\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(address to, uint256 value) external;\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit – 712-signed approvals\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\ninterface IERC20Permit {\n    /// @notice Sets the allowance to an account from another account using a signed permit.\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\n    /// @dev Reverts if `owner` is the zero address.\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\n    /// @dev Emits an {IERC20-Approval} event.\n    /// @param owner The token owner granting the allowance to `spender`.\n    /// @param spender The token spender being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    /// @param deadline The deadline from which the permit signature is no longer valid.\n    /// @param v Permit signature v parameter\n    /// @param r Permit signature r parameter.\n    /// @param s Permit signature s parameter.\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /// @notice Gets the current permit nonce of an account.\n    /// @param owner The account to check the nonce of.\n    /// @return nonce The current permit nonce of `owner`.\n    function nonces(address owner) external view returns (uint256 nonce);\n\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n    ///  keccak256(\n    ///      abi.encode(\n    ///          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n    ///          keccak256(bytes(name)),\n    ///          keccak256(bytes(version)),\n    ///          chainId,\n    ///          address(this)))\n    ///\n    ///  where\n    ///   - `name` (string) is the ERC-20 token name.\n    ///   - `version` (string) refers to the ERC-20 token contract version.\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\n    ///\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\ninterface IERC20Receiver {\n    /// @notice Handles the receipt of ERC20 tokens.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n}\n"
    },
    "contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\ninterface IERC20SafeTransfers {\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\n}\n"
    },
    "contracts/token/ERC20/libraries/ERC20DetailedStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Detailed} from \"./../interfaces/IERC20Detailed.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20DetailedStorage {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n\n    struct Layout {\n        string tokenName;\n        string tokenSymbol;\n        uint8 tokenDecimals;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Detailed.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Detailed.phase\")) - 1);\n\n    /// @notice Initializes the storage with the token details (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    function constructorInit(Layout storage s, string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) internal {\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenDecimals = tokenDecimals;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with the token details (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    function proxyInit(Layout storage s, string calldata tokenName, string calldata tokenSymbol, uint8 tokenDecimals) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenDecimals = tokenDecimals;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\n    }\n\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name(Layout storage s) internal view returns (string memory tokenName) {\n        return s.tokenName;\n    }\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\n        return s.tokenSymbol;\n    }\n\n    /// @notice Gets the number of decimals used to display the balances.\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\n    /// @return nbDecimals The number of decimals used to display the balances.\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\n        return s.tokenDecimals;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/token/ERC20/libraries/ERC20MetadataStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Metadata} from \"./../interfaces/IERC20Metadata.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20MetadataStorage {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n\n    struct Layout {\n        string uri;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Metadata.storage\")) - 1);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Metadata).interfaceId, true);\n    }\n\n    /// @notice Sets the token URI.\n    /// @param uri The token URI.\n    function setTokenURI(Layout storage s, string calldata uri) internal {\n        s.uri = uri;\n    }\n\n    /// @notice Gets the token metadata URI.\n    /// @return uri The token metadata URI.\n    function tokenURI(Layout storage s) internal view returns (string memory uri) {\n        return s.uri;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/token/ERC20/libraries/ERC20PermitStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20Permit} from \"./../interfaces/IERC20Permit.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport {ERC20Storage} from \"./ERC20Storage.sol\";\nimport {ERC20DetailedStorage} from \"./ERC20DetailedStorage.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20PermitStorage {\n    using ERC20Storage for ERC20Storage.Layout;\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(address => uint256) accountNonces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Permit.storage\")) - 1);\n\n    // 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Permit).interfaceId, true);\n    }\n\n    /// @notice Sets the allowance to an account from another account using a signed permit.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\n    /// @dev Emits an {IERC20-Approval} event.\n    /// @param owner The token owner granting the allowance to `spender`.\n    /// @param spender The token spender being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    /// @param deadline The deadline from which the permit signature is no longer valid.\n    /// @param v Permit signature v parameter\n    /// @param r Permit signature r parameter.\n    /// @param s Permit signature s parameter.\n    function permit(Layout storage st, address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal {\n        require(owner != address(0), \"ERC20: permit from address(0)\");\n        require(block.timestamp <= deadline, \"ERC20: expired permit\");\n        unchecked {\n            bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, st.accountNonces[owner]++, deadline));\n            bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR(), hashStruct));\n            address signer = ecrecover(hash, v, r, s);\n            require(signer == owner, \"ERC20: invalid permit\");\n        }\n        ERC20Storage.layout().approve(owner, spender, value);\n    }\n\n    /// @notice Gets the current permit nonce of an account.\n    /// @param owner The account to check the nonce of.\n    /// @return nonce The current permit nonce of `owner`.\n    function nonces(Layout storage s, address owner) internal view returns (uint256 nonce) {\n        return s.accountNonces[owner];\n    }\n\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n    ///  keccak256(\n    ///      abi.encode(\n    ///          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n    ///          keccak256(bytes(name)),\n    ///          keccak256(bytes(version)),\n    ///          chainId,\n    ///          address(this)))\n    ///\n    ///  where\n    ///   - `name` (string) is the ERC-20 token name.\n    ///   - `version` (string) refers to the ERC-20 token contract version.\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\n    ///\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() internal view returns (bytes32) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(ERC20DetailedStorage.layout().name())),\n                    keccak256(\"1\"),\n                    chainId,\n                    address(this)\n                )\n            );\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/token/ERC20/libraries/ERC20Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20} from \"./../interfaces/IERC20.sol\";\nimport {IERC20Allowance} from \"./../interfaces/IERC20Allowance.sol\";\nimport {IERC20BatchTransfers} from \"./../interfaces/IERC20BatchTransfers.sol\";\nimport {IERC20SafeTransfers} from \"./../interfaces/IERC20SafeTransfers.sol\";\nimport {IERC20Mintable} from \"./../interfaces/IERC20Mintable.sol\";\nimport {IERC20Burnable} from \"./../interfaces/IERC20Burnable.sol\";\nimport {IERC20Receiver} from \"./../interfaces/IERC20Receiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20Storage {\n    using Address for address;\n    using ERC20Storage for ERC20Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowances;\n        uint256 supply;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20.storage\")) - 1);\n\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    function init() internal {\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\n    function initERC20BatchTransfers() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\n    function initERC20SafeTransfers() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\n    function initERC20Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\n    function initERC20Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\n    }\n\n    /// @notice Sets the allowance to an account by an owner.\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param owner The account to set the allowance from.\n    /// @param spender The account being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\n        require(spender != address(0), \"ERC20: approval to address(0)\");\n        s.allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /// @notice Increases the allowance granted to an account by an owner.\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender`'s allowance by `owner` overflows.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n    /// @param owner The account increasing the allowance.\n    /// @param spender The account whose allowance is being increased.\n    /// @param value The allowance amount increase.\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\n        require(spender != address(0), \"ERC20: approval to address(0)\");\n        uint256 allowance_ = s.allowances[owner][spender];\n        if (value != 0) {\n            unchecked {\n                uint256 newAllowance = allowance_ + value;\n                require(newAllowance > allowance_, \"ERC20: allowance overflow\");\n                s.allowances[owner][spender] = newAllowance;\n                allowance_ = newAllowance;\n            }\n        }\n        emit Approval(owner, spender, allowance_);\n    }\n\n    /// @notice Decreases the allowance granted to an account by an owner.\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by `owner`.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n    /// @param owner The account decreasing the allowance.\n    /// @param spender The account whose allowance is being decreased.\n    /// @param value The allowance amount decrease.\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\n        require(spender != address(0), \"ERC20: approval to address(0)\");\n        uint256 allowance_ = s.allowances[owner][spender];\n\n        if (allowance_ != type(uint256).max && value != 0) {\n            unchecked {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                uint256 newAllowance = allowance_ - value;\n                require(newAllowance < allowance_, \"ERC20: insufficient allowance\");\n                s.allowances[owner][spender] = newAllowance;\n                allowance_ = newAllowance;\n            }\n        }\n        emit Approval(owner, spender, allowance_);\n    }\n\n    /// @notice Transfers an amount of tokens from an account to a recipient.\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\n        require(to != address(0), \"ERC20: transfer to address(0)\");\n\n        if (value != 0) {\n            uint256 balance = s.balances[from];\n            unchecked {\n                uint256 newBalance = balance - value;\n                require(newBalance < balance, \"ERC20: insufficient balance\");\n                if (from != to) {\n                    s.balances[from] = newBalance;\n                    s.balances[to] += value;\n                }\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\n    /// @param sender The message sender.\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, value);\n        }\n        s.transfer(from, to, value);\n    }\n\n    //================================================= Batch Transfers ==================================================//\n\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\n    /// @dev Emits a {Transfer} event for each transfer.\n    /// @param from The account transferring the tokens.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\n        uint256 length = recipients.length;\n        require(length == values.length, \"ERC20: inconsistent arrays\");\n\n        if (length == 0) return;\n\n        uint256 balance = s.balances[from];\n\n        uint256 totalValue;\n        uint256 selfTransferTotalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                require(to != address(0), \"ERC20: transfer to address(0)\");\n\n                uint256 value = values[i];\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    require(newTotalValue > totalValue, \"ERC20: values overflow\");\n                    totalValue = newTotalValue;\n                    if (from != to) {\n                        s.balances[to] += value;\n                    } else {\n                        require(value <= balance, \"ERC20: insufficient balance\");\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\n                    }\n                }\n                emit Transfer(from, to, value);\n            }\n\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\n                uint256 newBalance = balance - totalValue;\n                require(newBalance < balance, \"ERC20: insufficient balance\"); // balance must be sufficient, including self-transfers\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\n            }\n        }\n    }\n\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\n    /// @dev Reverts if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\n    /// @dev Emits a {Transfer} event for each transfer.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account transferring the tokens.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\n        uint256 length = recipients.length;\n        require(length == values.length, \"ERC20: inconsistent arrays\");\n\n        if (length == 0) return;\n\n        uint256 balance = s.balances[from];\n\n        uint256 totalValue;\n        uint256 selfTransferTotalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                require(to != address(0), \"ERC20: transfer to address(0)\");\n\n                uint256 value = values[i];\n\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    require(newTotalValue > totalValue, \"ERC20: values overflow\");\n                    totalValue = newTotalValue;\n                    if (from != to) {\n                        s.balances[to] += value;\n                    } else {\n                        require(value <= balance, \"ERC20: insufficient balance\");\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\n                    }\n                }\n\n                emit Transfer(from, to, value);\n            }\n\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\n                uint256 newBalance = balance - totalValue;\n                require(newBalance < balance, \"ERC20: insufficient balance\"); // balance must be sufficient, including self-transfers\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\n            }\n        }\n\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, totalValue);\n        }\n    }\n\n    //================================================= Safe Transfers ==================================================//\n\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\n        s.transfer(from, to, value);\n        if (to.isContract()) {\n            _callOnERC20Received(from, from, to, value, data);\n        }\n    }\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\n        s.transferFrom(sender, from, to, value);\n        if (to.isContract()) {\n            _callOnERC20Received(sender, from, to, value, data);\n        }\n    }\n\n    //================================================= Minting ==================================================//\n\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(Layout storage s, address to, uint256 value) internal {\n        require(to != address(0), \"ERC20: mint to address(0)\");\n        if (value != 0) {\n            uint256 supply = s.supply;\n            unchecked {\n                uint256 newSupply = supply + value;\n                require(newSupply > supply, \"ERC20: supply overflow\");\n                s.supply = newSupply;\n                s.balances[to] += value; // balance cannot overflow if supply does not\n            }\n        }\n        emit Transfer(address(0), to, value);\n    }\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\n        uint256 length = recipients.length;\n        require(length == values.length, \"ERC20: inconsistent arrays\");\n\n        if (length == 0) return;\n\n        uint256 totalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                require(to != address(0), \"ERC20: mint to address(0)\");\n\n                uint256 value = values[i];\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    require(newTotalValue > totalValue, \"ERC20: values overflow\");\n                    totalValue = newTotalValue;\n                    s.balances[to] += value; // balance cannot overflow if supply does not\n                }\n                emit Transfer(address(0), to, value);\n            }\n\n            if (totalValue != 0) {\n                uint256 supply = s.supply;\n                uint256 newSupply = supply + totalValue;\n                require(newSupply > supply, \"ERC20: supply overflow\");\n                s.supply = newSupply;\n            }\n        }\n    }\n\n    //================================================= Burning ==================================================//\n\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @param from The account burning the tokens.\n    /// @param value The amount of tokens to burn.\n    function burn(Layout storage s, address from, uint256 value) internal {\n        if (value != 0) {\n            uint256 balance = s.balances[from];\n            unchecked {\n                uint256 newBalance = balance - value;\n                require(newBalance < balance, \"ERC20: insufficient balance\");\n                s.balances[from] = newBalance;\n                s.supply -= value; // will not underflow if balance does not\n            }\n        }\n\n        emit Transfer(from, address(0), value);\n    }\n\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account to burn the tokens from.\n    /// @param value The amount of tokens to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, value);\n        }\n        s.burn(from, value);\n    }\n\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\n    /// @dev Reverts if `owners` and `values` have different lengths.\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n    /// @dev Reverts if `sender` is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\n    /// @param sender The message sender.\n    /// @param owners The list of accounts to burn the tokens from.\n    /// @param values The list of amounts of tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\n        uint256 length = owners.length;\n        require(length == values.length, \"ERC20: inconsistent arrays\");\n\n        if (length == 0) return;\n\n        uint256 totalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address from = owners[i];\n                uint256 value = values[i];\n\n                if (from != sender) {\n                    s.decreaseAllowance(from, sender, value);\n                }\n\n                if (value != 0) {\n                    uint256 balance = s.balances[from];\n                    uint256 newBalance = balance - value;\n                    require(newBalance < balance, \"ERC20: insufficient balance\");\n                    s.balances[from] = newBalance;\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\n                }\n\n                emit Transfer(from, address(0), value);\n            }\n\n            if (totalValue != 0) {\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\n            }\n        }\n    }\n\n    /// @notice Gets the total token supply.\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\n    /// @return supply The total token supply.\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\n        return s.supply;\n    }\n\n    /// @notice Gets an account balance.\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\n        return s.balances[owner];\n    }\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\n        return s.allowances[owner][spender];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param value The value transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\n        require(IERC20Receiver(to).onERC20Received(sender, from, value, data) == ERC20_RECEIVED, \"ERC20: safe transfer rejected\");\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721} from \"./../interfaces/IERC721.sol\";\nimport {IERC721Events} from \"./../interfaces/IERC721Events.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC721Base is Context, IERC721, IERC721Events {\n    using ERC721Storage for ERC721Storage.Layout;\n\n    /// @inheritdoc IERC721\n    function approve(address to, uint256 tokenId) external virtual override {\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function setApprovalForAll(address operator, bool approved) external virtual override {\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC721\n    function transferFrom(address from, address to, uint256 tokenId) external override {\n        ERC721Storage.layout().transferFrom(_msgSender(), from, to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual override {\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual override {\n        ERC721Storage.layout().safeTransferFrom(_msgSender(), from, to, tokenId, data);\n    }\n\n    /// @inheritdoc IERC721\n    function balanceOf(address owner) external view override returns (uint256 balance) {\n        return ERC721Storage.layout().balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC721\n    function ownerOf(uint256 tokenId) external view override returns (address tokenOwner) {\n        return ERC721Storage.layout().ownerOf(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function getApproved(uint256 tokenId) external view override returns (address approved) {\n        return ERC721Storage.layout().getApproved(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function isApprovedForAll(address owner, address operator) external view override returns (bool approvedForAll) {\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721BatchTransferBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721BatchTransfer} from \"./../interfaces/IERC721BatchTransfer.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\nabstract contract ERC721BatchTransferBase is Context, IERC721BatchTransfer {\n    using ERC721Storage for ERC721Storage.Layout;\n\n    /// @inheritdoc IERC721BatchTransfer\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external virtual override {\n        ERC721Storage.layout().batchTransferFrom(_msgSender(), from, to, tokenIds);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721BatchTransferWithOperatorFiltererBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721BatchTransfer} from \"./../interfaces/IERC721BatchTransfer.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {OperatorFiltererStorage} from \"./../../royalty/libraries/OperatorFiltererStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer with Operator Filterer (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\nabstract contract ERC721BatchTransferWithOperatorFiltererBase is Context, IERC721BatchTransfer {\n    using ERC721Storage for ERC721Storage.Layout;\n    using OperatorFiltererStorage for OperatorFiltererStorage.Layout;\n\n    /// @inheritdoc IERC721BatchTransfer\n    /// @dev Reverts with OperatorNotAllowed if the sender is not `from` and is not allowed by the operator registry.\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external virtual override {\n        address sender = _msgSender();\n        OperatorFiltererStorage.layout().requireAllowedOperatorForTransfer(sender, from);\n        ERC721Storage.layout().batchTransferFrom(sender, from, to, tokenIds);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721BurnableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Burnable} from \"./../interfaces/IERC721Burnable.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\nabstract contract ERC721BurnableBase is Context, IERC721Burnable {\n    using ERC721Storage for ERC721Storage.Layout;\n\n    /// @inheritdoc IERC721Burnable\n    function burnFrom(address from, uint256 tokenId) external virtual override {\n        ERC721Storage.layout().burnFrom(_msgSender(), from, tokenId);\n    }\n\n    /// @inheritdoc IERC721Burnable\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external virtual override {\n        ERC721Storage.layout().batchBurnFrom(_msgSender(), from, tokenIds);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721DeliverableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Deliverable} from \"./../interfaces/IERC721Deliverable.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable (proxiable version).\n/// @notice ERC721Deliverable implementation where burnt tokens can be minted again.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC721DeliverableBase is Context, IERC721Deliverable {\n    using ERC721Storage for ERC721Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    // prevent variable name clash with public ERC721MintableBase.MINTER_ROLE\n    bytes32 private constant _MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC721Deliverable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(_MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().deliver(recipients, tokenIds);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721DeliverableOnceBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Deliverable} from \"./../interfaces/IERC721Deliverable.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable (proxiable version)\n/// @notice ERC721Deliverable implementation where burnt tokens cannot be minted again.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC721DeliverableOnceBase is Context, IERC721Deliverable {\n    using ERC721Storage for ERC721Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    // prevent variable name clash with public ERC721MintableOnceBase.MINTER_ROLE\n    bytes32 private constant _MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC721Deliverable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    /// @dev Reverts if one of `tokenIds` has been previously burnt.\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(_MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().deliverOnce(recipients, tokenIds);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721MetadataPerTokenBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ERC721ContractMetadataStorage} from \"./../libraries/ERC721ContractMetadataStorage.sol\";\nimport {TokenMetadataPerTokenStorage} from \"./../../metadata/libraries/TokenMetadataPerTokenStorage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\n/// @notice ERC721Metadata implementation where tokenURIs are set individually per token.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC721MetadataPerTokenBase is Context, IERC721Metadata {\n    using ERC721Storage for ERC721Storage.Layout;\n    using ERC721ContractMetadataStorage for ERC721ContractMetadataStorage.Layout;\n    using TokenMetadataPerTokenStorage for TokenMetadataPerTokenStorage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    // prevent variable name clash with public ERC721Mintable(Once)Base.MINTER_ROLE\n    bytes32 private constant _MINTER_ROLE = \"minter\";\n\n    /// @notice Sets the metadata URI for a token.\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    /// @param tokenId The token identifier.\n    /// @param uri The token metadata URI.\n    function setTokenURI(uint256 tokenId, string calldata uri) external {\n        AccessControlStorage.layout().enforceHasRole(_MINTER_ROLE, _msgSender());\n        TokenMetadataPerTokenStorage.layout().setTokenURI(tokenId, uri);\n    }\n\n    /// @notice Sets the metadata URIs for a batch of tokens.\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    /// @param tokenIds The token identifiers.\n    /// @param uris The token metadata URIs.\n    function batchSetTokenURI(uint256[] calldata tokenIds, string[] calldata uris) external {\n        AccessControlStorage.layout().enforceHasRole(_MINTER_ROLE, _msgSender());\n        TokenMetadataPerTokenStorage.layout().batchSetTokenURI(tokenIds, uris);\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function name() external view override returns (string memory tokenName) {\n        return ERC721ContractMetadataStorage.layout().name();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function symbol() external view override returns (string memory tokenSymbol) {\n        return ERC721ContractMetadataStorage.layout().symbol();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function tokenURI(uint256 tokenId) external view override returns (string memory uri) {\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\n        return TokenMetadataPerTokenStorage.layout().tokenMetadataURI(tokenId);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721MetadataWithBaseURIBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ERC721ContractMetadataStorage} from \"./../libraries/ERC721ContractMetadataStorage.sol\";\nimport {TokenMetadataWithBaseURIStorage} from \"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard (proxiable version), optional extension: Metadata (proxiable version).\n/// @notice ERC721Metadata implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract ERC721MetadataWithBaseURIBase is Context, IERC721Metadata {\n    using ERC721Storage for ERC721Storage.Layout;\n    using ERC721ContractMetadataStorage for ERC721ContractMetadataStorage.Layout;\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Emitted when the base token metadata URI is updated.\n    /// @param baseMetadataURI The new base metadata URI.\n    event BaseMetadataURISet(string baseMetadataURI);\n\n    /// @notice Sets the base metadata URI.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits a {BaseMetadataURISet} event.\n    /// @param baseURI The base metadata URI.\n    function setBaseMetadataURI(string calldata baseURI) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenMetadataWithBaseURIStorage.layout().setBaseMetadataURI(baseURI);\n    }\n\n    /// @notice Gets the base metadata URI.\n    /// @return baseURI The base metadata URI.\n    function baseMetadataURI() external view returns (string memory baseURI) {\n        return TokenMetadataWithBaseURIStorage.layout().baseMetadataURI();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function name() external view override returns (string memory tokenName) {\n        return ERC721ContractMetadataStorage.layout().name();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function symbol() external view override returns (string memory tokenSymbol) {\n        return ERC721ContractMetadataStorage.layout().symbol();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function tokenURI(uint256 tokenId) external view override returns (string memory uri) {\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\n        return TokenMetadataWithBaseURIStorage.layout().tokenMetadataURI(tokenId);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721MintableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Mintable} from \"./../interfaces/IERC721Mintable.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version).\n/// @notice ERC721Mintable implementation where burnt tokens can be minted again.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC721MintableBase is Context, IERC721Mintable {\n    using ERC721Storage for ERC721Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function mint(address to, uint256 tokenId) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().mint(to, tokenId);\n    }\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().safeMint(_msgSender(), to, tokenId, data);\n    }\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    function batchMint(address to, uint256[] calldata tokenIds) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().batchMint(to, tokenIds);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721MintableOnceBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Mintable} from \"./../interfaces/IERC721Mintable.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (proxiable version)\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC721MintableOnceBase is Context, IERC721Mintable {\n    using ERC721Storage for ERC721Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    /// @dev Reverts if `tokenId` has been previously burnt.\n    function mint(address to, uint256 tokenId) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().mintOnce(to, tokenId);\n    }\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    /// @dev Reverts if `tokenId` has been previously burnt.\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().safeMintOnce(_msgSender(), to, tokenId, data);\n    }\n\n    /// @inheritdoc IERC721Mintable\n    /// @dev Reverts if the sender does not have the 'minter' role.\n    /// @dev Reverts if one of `tokenIds` has been previously burnt.\n    function batchMint(address to, uint256[] calldata tokenIds) external virtual override {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC721Storage.layout().batchMintOnce(to, tokenIds);\n    }\n\n    /// @notice Gets whether a token was burnt.\n    /// @param tokenId The token identifier.\n    /// @return tokenWasBurnt Whether the token was burnt.\n    function wasBurnt(uint256 tokenId) external view virtual returns (bool tokenWasBurnt) {\n        return ERC721Storage.layout().wasBurnt(tokenId);\n    }\n}\n"
    },
    "contracts/token/ERC721/base/ERC721WithOperatorFiltererBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721} from \"./../interfaces/IERC721.sol\";\nimport {IERC721Events} from \"./../interfaces/IERC721Events.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {OperatorFiltererStorage} from \"./../../royalty/libraries/OperatorFiltererStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard with Operator Filterer (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\n/// @dev Note: This contract requires OperatorFilterer.\nabstract contract ERC721WithOperatorFiltererBase is Context, IERC721, IERC721Events {\n    using ERC721Storage for ERC721Storage.Layout;\n    using OperatorFiltererStorage for OperatorFiltererStorage.Layout;\n\n    /// @inheritdoc IERC721\n    /// @dev Reverts with OperatorNotAllowed if `to` is not the zero address and is not allowed by the operator registry.\n    function approve(address to, uint256 tokenId) external virtual override {\n        if (to != address(0)) {\n            OperatorFiltererStorage.layout().requireAllowedOperatorForApproval(to);\n        }\n        ERC721Storage.layout().approve(_msgSender(), to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    /// @dev Reverts with OperatorNotAllowed if `approved` is true and `operator` is not allowed by the operator registry.\n    function setApprovalForAll(address operator, bool approved) external virtual override {\n        if (approved) {\n            OperatorFiltererStorage.layout().requireAllowedOperatorForApproval(operator);\n        }\n        ERC721Storage.layout().setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /// @inheritdoc IERC721\n    /// @dev Reverts with OperatorNotAllowed if the sender is not `from` and is not allowed by the operator registry.\n    function transferFrom(address from, address to, uint256 tokenId) external override {\n        address sender = _msgSender();\n        OperatorFiltererStorage.layout().requireAllowedOperatorForTransfer(sender, from);\n        ERC721Storage.layout().transferFrom(sender, from, to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    /// @dev Reverts with OperatorNotAllowed if the sender is not `from` and is not allowed by the operator registry.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual override {\n        address sender = _msgSender();\n        OperatorFiltererStorage.layout().requireAllowedOperatorForTransfer(sender, from);\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    /// @dev Reverts with OperatorNotAllowed if the sender is not `from` and is not allowed by the operator registry.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual override {\n        address sender = _msgSender();\n        OperatorFiltererStorage.layout().requireAllowedOperatorForTransfer(sender, from);\n        ERC721Storage.layout().safeTransferFrom(sender, from, to, tokenId, data);\n    }\n\n    /// @inheritdoc IERC721\n    function balanceOf(address owner) external view override returns (uint256 balance) {\n        return ERC721Storage.layout().balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC721\n    function ownerOf(uint256 tokenId) external view override returns (address tokenOwner) {\n        return ERC721Storage.layout().ownerOf(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function getApproved(uint256 tokenId) external view override returns (address approved) {\n        return ERC721Storage.layout().getApproved(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function isApprovedForAll(address owner, address operator) external view override returns (bool approvedForAll) {\n        return ERC721Storage.layout().isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721Base} from \"./base/ERC721Base.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721 is ERC721Base, InterfaceDetection {\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721.\n    constructor() {\n        ERC721Storage.init();\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721BatchTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721BatchTransferBase} from \"./base/ERC721BatchTransferBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard: optional extension: BatchTransfer (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721BatchTransfer is ERC721BatchTransferBase {\n    /// @notice Marks the following ERC165 interfaces(s) as supported: ERC721BatchTransfer\n    constructor() {\n        ERC721Storage.initERC721BatchTransfer();\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721BatchTransferWithOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721BatchTransferWithOperatorFiltererBase} from \"./base/ERC721BatchTransferWithOperatorFiltererBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard: optional extension: Batch Transfer with Operator Filterer (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721BatchTransferWithOperatorFilterer is ERC721BatchTransferWithOperatorFiltererBase {\n    /// @notice Marks the following ERC165 interfaces(s) as supported: ERC721BatchTransfer\n    constructor() {\n        ERC721Storage.initERC721BatchTransfer();\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721BurnableBase} from \"./base/ERC721BurnableBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721Burnable is ERC721BurnableBase {\n    /// @notice Marks the fllowing ERC165 interface(s) as supported: ERC721Burnable\n    constructor() {\n        ERC721Storage.initERC721Burnable();\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721Deliverable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721DeliverableBase} from \"./base/ERC721DeliverableBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable (immutable version).\n/// @notice ERC721Deliverable implementation where burnt tokens can be minted again.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721Deliverable is ERC721DeliverableBase, AccessControl {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\n    constructor() {\n        ERC721Storage.initERC721Deliverable();\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721DeliverableOnce.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721DeliverableOnceBase} from \"./base/ERC721DeliverableOnceBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable (immutable version)\n/// @notice ERC721Deliverable implementation where burnt tokens cannot be minted again.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721DeliverableOnce is ERC721DeliverableOnceBase, AccessControl {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\n    constructor() {\n        ERC721Storage.initERC721Deliverable();\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721MetadataPerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721ContractMetadataStorage} from \"./libraries/ERC721ContractMetadataStorage.sol\";\nimport {ERC721MetadataPerTokenBase} from \"./base/ERC721MetadataPerTokenBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\n/// @notice ERC721Metadata implementation where tokenURIs are set individually per token.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721MetadataPerToken is ERC721MetadataPerTokenBase, AccessControl {\n    using ERC721ContractMetadataStorage for ERC721ContractMetadataStorage.Layout;\n\n    /// @notice Initializes the storage with a name and symbol.\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    constructor(string memory tokenName, string memory tokenSymbol) {\n        ERC721ContractMetadataStorage.layout().constructorInit(tokenName, tokenSymbol);\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721MetadataWithBaseURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721ContractMetadataStorage} from \"./libraries/ERC721ContractMetadataStorage.sol\";\nimport {ERC721MetadataWithBaseURIBase} from \"./base/ERC721MetadataWithBaseURIBase.sol\";\nimport {TokenMetadataWithBaseURIStorage} from \"./../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\n/// @notice ERC721Metadata implementation where tokenURIs are the concatenation of a base metadata URI and the token identifier (decimal).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721MetadataWithBaseURI is ERC721MetadataWithBaseURIBase, ContractOwnership {\n    using ERC721ContractMetadataStorage for ERC721ContractMetadataStorage.Layout;\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n\n    /// @notice Initializes the storage with a name and symbol.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    constructor(string memory tokenName, string memory tokenSymbol) {\n        ERC721ContractMetadataStorage.layout().constructorInit(tokenName, tokenSymbol);\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721MintableBase} from \"./base/ERC721MintableBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (immutable version).\n/// @notice ERC721Mintable implementation where burnt tokens can be minted again.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721Mintable is ERC721MintableBase, AccessControl {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    constructor() {\n        ERC721Storage.initERC721Mintable();\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721MintableOnce.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721MintableOnceBase} from \"./base/ERC721MintableOnceBase.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (immutable version)\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721MintableOnce is ERC721MintableOnceBase, AccessControl {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    constructor() {\n        ERC721Storage.initERC721Mintable();\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Receiver} from \"./interfaces/IERC721Receiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721Receiver is IERC721Receiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Receiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Receiver).interfaceId, true);\n    }\n}\n"
    },
    "contracts/token/ERC721/ERC721WithOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IOperatorFilterRegistry} from \"./../royalty/interfaces/IOperatorFilterRegistry.sol\";\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {OperatorFiltererStorage} from \"./../royalty/libraries/OperatorFiltererStorage.sol\";\nimport {ERC721WithOperatorFiltererBase} from \"./base/ERC721WithOperatorFiltererBase.sol\";\nimport {OperatorFiltererBase} from \"./../royalty/base/OperatorFiltererBase.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard with Operator Filterer (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721WithOperatorFilterer is ERC721WithOperatorFiltererBase, OperatorFiltererBase, ContractOwnership {\n    using OperatorFiltererStorage for OperatorFiltererStorage.Layout;\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721.\n    /// @notice Sets the address that the contract will make OperatorFilter checks against.\n    /// @param registry The operator filter registry address. When set to the zero address, checks will be bypassed.\n    constructor(IOperatorFilterRegistry registry) {\n        ERC721Storage.init();\n        OperatorFiltererStorage.layout().constructorInit(registry);\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721BatchTransferFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721BatchTransferBase} from \"./../base/ERC721BatchTransferBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: BatchTransfer (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\ncontract ERC721BatchTransferFacet is ERC721BatchTransferBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721BatchTransferStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.initERC721BatchTransfer();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721BatchTransferWithOperatorFiltererFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721BatchTransferWithOperatorFiltererBase} from \"./../base/ERC721BatchTransferWithOperatorFiltererBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer with Operator Filterer (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet}  and {OperatorFiltererFacet}.\ncontract ERC721BatchTransferWithOperatorFiltererFacet is ERC721BatchTransferWithOperatorFiltererBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721BatchTransferStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.initERC721BatchTransfer();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721BurnableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721BurnableBase} from \"./../base/ERC721BurnableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\ncontract ERC721BurnableFacet is ERC721BurnableBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721BurnableStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.initERC721Burnable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721DeliverableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721DeliverableBase} from \"./../base/ERC721DeliverableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable (facet version).\n/// @notice ERC721Deliverable implementation where burnt tokens can be minted again.\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet} and {AccessControlFacet}.\ncontract ERC721DeliverableFacet is ERC721DeliverableBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721DeliverableStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.initERC721Deliverable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721DeliverableOnceFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721DeliverableOnceBase} from \"./../base/ERC721DeliverableOnceBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable (facet version).\n/// @notice ERC721Deliverable implementation where burnt tokens cannot be minted again.\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet} and {AccessControlFacet}.\ncontract ERC721DeliverableOnceFacet is ERC721DeliverableOnceBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721DeliverableOnceStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.initERC721Deliverable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721Base} from \"./../base/ERC721Base.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\ncontract ERC721Facet is ERC721Base, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721Storage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.init();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721MetadataPerTokenFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721ContractMetadataStorage} from \"./../libraries/ERC721ContractMetadataStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721MetadataPerTokenBase} from \"./../base/ERC721MetadataPerTokenBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (facet version).\n/// @notice ERC721Metadata implementation where tokenURIs are set individually per token.\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {ContractOwnershipFacet} and {InterfaceDetectionFacet}.\ncontract ERC721MetadataPerTokenFacet is ERC721MetadataPerTokenBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n    using ERC721ContractMetadataStorage for ERC721ContractMetadataStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Initializes the storage with a name and symbol.\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the sender is not the proxy admin.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    function initERC721MetadataStorage(string calldata tokenName, string calldata tokenSymbol) external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721ContractMetadataStorage.layout().proxyInit(tokenName, tokenSymbol);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721MetadataWithBaseURIFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721ContractMetadataStorage} from \"./../libraries/ERC721ContractMetadataStorage.sol\";\nimport {TokenMetadataWithBaseURIStorage} from \"./../../metadata/libraries/TokenMetadataWithBaseURIStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721MetadataWithBaseURIBase} from \"./../base/ERC721MetadataWithBaseURIBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {ContractOwnershipFacet} and {InterfaceDetectionFacet}.\ncontract ERC721MetadataWithBaseURIFacet is ERC721MetadataWithBaseURIBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n    using ERC721ContractMetadataStorage for ERC721ContractMetadataStorage.Layout;\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Initializes the storage with a name and a symbol.\n    /// @notice Sets the proxy initialization phase for ERC721ContractMetadataStorage to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\n    /// @dev Reverts if the sender is not the proxy admin.\n    /// @dev Reverts if the proxy initialization phase for ERC721ContractMetadataStorage is set to `1` or above.\n    /// @param tokenName The token name\n    /// @param tokenSymbol The token symbol\n    function initERC721MetadataStorage(string calldata tokenName, string calldata tokenSymbol) external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721ContractMetadataStorage.layout().proxyInit(tokenName, tokenSymbol);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721MintableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721MintableBase} from \"./../base/ERC721MintableBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (facet version).\n/// @notice ERC721Mintable implementation where burnt tokens can be minted again.\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet} and {AccessControlFacet}.\ncontract ERC721MintableFacet is ERC721MintableBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721MintableStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.initERC721Mintable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721MintableOnceFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721MintableOnceBase} from \"./../base/ERC721MintableOnceBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable (facet version).\n/// @notice ERC721Mintable implementation where burnt tokens cannot be minted again.\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet} and {AccessControlFacet}.\ncontract ERC721MintableOnceFacet is ERC721MintableOnceBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721MintableOnceStorage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.initERC721Mintable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/facets/ERC721WithOperatorFiltererFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC721WithOperatorFiltererBase} from \"./../base/ERC721WithOperatorFiltererBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard with Operator Filterer (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet}, {ContractOwnershipFacet} and {OperatorFiltererFacet}.\ncontract ERC721WithOperatorFiltererFacet is ERC721WithOperatorFiltererBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function initERC721Storage() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC721Storage.init();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/ERC721/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"
    },
    "contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\ninterface IERC721BatchTransfer {\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\n    /// @dev Resets the token approval for each of `tokenIds`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new token owner.\n    /// @param tokenIds Identifiers of the tokens to transfer.\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\n}\n"
    },
    "contracts/token/ERC721/interfaces/IERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\ninterface IERC721Burnable {\n    /// @notice Burns a token.\n    /// @dev Reverts if `tokenId` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\n    /// @param from The current token owner.\n    /// @param tokenId The identifier of the token to burn.\n    function burnFrom(address from, uint256 tokenId) external;\n\n    /// @notice Burns a batch of tokens.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\n    /// @param from The current tokens owner.\n    /// @param tokenIds The identifiers of the tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\n}\n"
    },
    "contracts/token/ERC721/interfaces/IERC721Deliverable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\ninterface IERC721Deliverable {\n    /// @notice Unsafely mints tokens to multiple recipients.\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\n}\n"
    },
    "contracts/token/ERC721/interfaces/IERC721Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721Events {\n    /// @notice Emitted when a token is transferred.\n    /// @param from The previous token owner.\n    /// @param to The new token owner.\n    /// @param tokenId The transferred token identifier.\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /// @notice Emitted when a single token approval is set.\n    /// @param owner The token owner.\n    /// @param approved The approved address.\n    /// @param tokenId The approved token identifier.\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /// @notice Emitted when an approval for all tokens is set or unset.\n    /// @param owner The tokens owner.\n    /// @param operator The approved address.\n    /// @param approved True when then approval is set, false when it is unset.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n}\n"
    },
    "contracts/token/ERC721/interfaces/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata {\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name() external view returns (string memory tokenName);\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol() external view returns (string memory tokenSymbol);\n\n    /// @notice Gets the metadata URI for a token identifier.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier.\n    /// @return uri The metadata URI for the token identifier.\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\n}\n"
    },
    "contracts/token/ERC721/interfaces/IERC721Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\ninterface IERC721Mintable {\n    /// @notice Unsafely mints a token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mint(address to, uint256 tokenId) external;\n\n    /// @notice Safely mints a token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Unsafely mints a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMint(address to, uint256[] calldata tokenIds) external;\n}\n"
    },
    "contracts/token/ERC721/interfaces/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721Receiver {\n    /// @notice Handles the receipt of an ERC721 token.\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\n    /// @dev Note: The ERC721 contract address is always the message sender.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous token owner.\n    /// @param tokenId The token identifier.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse.\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\n}\n"
    },
    "contracts/token/ERC721/libraries/ERC721ContractMetadataStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC721ContractMetadataStorage {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n    using ERC721ContractMetadataStorage for ERC721ContractMetadataStorage.Layout;\n\n    struct Layout {\n        string tokenName;\n        string tokenSymbol;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.ERC721.ERC721ContractMetadata.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.token.ERC721.ERC712ContractMetadata.phase\")) - 1);\n\n    /// @notice Initializes the storage with a name and symbol (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    function constructorInit(Layout storage s, string memory tokenName, string memory tokenSymbol) internal {\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with a name and symbol (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    function proxyInit(Layout storage s, string calldata tokenName, string calldata tokenSymbol) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\n    }\n\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name(Layout storage s) internal view returns (string memory tokenName) {\n        return s.tokenName;\n    }\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\n        return s.tokenSymbol;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/token/ERC721/libraries/ERC721Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC721} from \"./../interfaces/IERC721.sol\";\nimport {IERC721BatchTransfer} from \"./../interfaces/IERC721BatchTransfer.sol\";\nimport {IERC721Mintable} from \"./../interfaces/IERC721Mintable.sol\";\nimport {IERC721Deliverable} from \"./../interfaces/IERC721Deliverable.sol\";\nimport {IERC721Burnable} from \"./../interfaces/IERC721Burnable.sol\";\nimport {IERC721Receiver} from \"./../interfaces/IERC721Receiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC721Storage {\n    using Address for address;\n    using ERC721Storage for ERC721Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(uint256 => uint256) owners;\n        mapping(address => uint256) balances;\n        mapping(uint256 => address) approvals;\n        mapping(address => mapping(address => bool)) operators;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.ERC721.ERC721.storage\")) - 1);\n\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\n\n    // Single token approval flag\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\n\n    // Burnt token magic value\n    // This magic number is used as the owner's value to indicate that the token has been burnt\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\n    function initERC721BatchTransfer() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    function initERC721Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\n    function initERC721Deliverable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\n    function initERC721Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\n    }\n\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if `sender` is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param sender The message sender.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\n        uint256 owner = s.owners[tokenId];\n        require(_tokenExists(owner), \"ERC721: non-existing token\");\n        address ownerAddress = _tokenOwner(owner);\n        require(to != ownerAddress, \"ERC721: self-approval\");\n        require(_isOperatable(s, ownerAddress, sender), \"ERC721: non-approved sender\");\n        if (to == address(0)) {\n            if (_tokenHasApproval(owner)) {\n                // remove the approval bit if it is present\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\n            }\n        } else {\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\n            if (owner != ownerWithApprovalBit) {\n                // add the approval bit if it is not present\n                s.owners[tokenId] = ownerWithApprovalBit;\n            }\n            s.approvals[tokenId] = to;\n        }\n        emit Approval(ownerAddress, to, tokenId);\n    }\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\n    /// @dev Reverts if `sender` is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param sender The message sender.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\n        require(operator != sender, \"ERC721: self-approval for all\");\n        s.operators[sender][operator] = approved;\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: transfer to address(0)\");\n\n        uint256 owner = s.owners[tokenId];\n        require(_tokenExists(owner), \"ERC721: non-existing token\");\n        require(_tokenOwner(owner) == from, \"ERC721: non-owned token\");\n\n        if (!_isOperatable(s, from, sender)) {\n            require(_tokenHasApproval(owner) && sender == s.approvals[tokenId], \"ERC721: non-approved sender\");\n        }\n\n        s.owners[tokenId] = uint256(uint160(to));\n        if (from != to) {\n            unchecked {\n                // cannot underflow as balance is verified through ownership\n                --s.balances[from];\n                //  cannot overflow as supply cannot overflow\n                ++s.balances[to];\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\n        s.transferFrom(sender, from, to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, from, to, tokenId, \"\");\n        }\n    }\n\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\n        s.transferFrom(sender, from, to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, from, to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n    /// @dev Resets the token approval for each of `tokenIds`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\n    /// @param sender The message sender.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new token owner.\n    /// @param tokenIds Identifiers of the tokens to transfer.\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\n        require(to != address(0), \"ERC721: transfer to address(0)\");\n        bool operatable = _isOperatable(s, from, sender);\n\n        uint256 length = tokenIds.length;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                uint256 tokenId = tokenIds[i];\n                uint256 owner = s.owners[tokenId];\n                require(_tokenExists(owner), \"ERC721: non-existing token\");\n                require(_tokenOwner(owner) == from, \"ERC721: non-owned token\");\n                if (!operatable) {\n                    require(_tokenHasApproval(owner) && sender == s.approvals[tokenId], \"ERC721: non-approved sender\");\n                }\n                s.owners[tokenId] = uint256(uint160(to));\n                emit Transfer(from, to, tokenId);\n            }\n\n            if (from != to && length != 0) {\n                // cannot underflow as balance is verified through ownership\n                s.balances[from] -= length;\n                // cannot overflow as supply cannot overflow\n                s.balances[to] += length;\n            }\n        }\n    }\n\n    /// @notice Unsafely mints a token.\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to address(0)\");\n        require(!_tokenExists(s.owners[tokenId]), \"ERC721: existing token\");\n\n        s.owners[tokenId] = uint256(uint160(to));\n\n        unchecked {\n            // cannot overflow due to the cost of minting individual tokens\n            ++s.balances[to];\n        }\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /// @notice Safely mints a token.\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\n        s.mint(to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely mints a batch of tokens.\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\n        require(to != address(0), \"ERC721: mint to address(0)\");\n\n        uint256 length = tokenIds.length;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                uint256 tokenId = tokenIds[i];\n                require(!_tokenExists(s.owners[tokenId]), \"ERC721: existing token\");\n\n                s.owners[tokenId] = uint256(uint160(to));\n                emit Transfer(address(0), to, tokenId);\n            }\n\n            s.balances[to] += length;\n        }\n    }\n\n    /// @notice Unsafely mints tokens to multiple recipients.\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\n        uint256 length = recipients.length;\n        require(length == tokenIds.length, \"ERC721: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                s.mint(recipients[i], tokenIds[i]);\n            }\n        }\n    }\n\n    /// @notice Unsafely mints a token once.\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Reverts if `tokenId` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to address(0)\");\n\n        uint256 owner = s.owners[tokenId];\n        require(!_tokenExists(owner), \"ERC721: existing token\");\n        require(!_tokenWasBurnt(owner), \"ERC721: burnt token\");\n\n        s.owners[tokenId] = uint256(uint160(to));\n\n        unchecked {\n            // cannot overflow due to the cost of minting individual tokens\n            ++s.balances[to];\n        }\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /// @notice Safely mints a token once.\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Reverts if `tokenId` has been previously burnt.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\n        s.mintOnce(to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely mints a batch of tokens once.\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Reverts if one of `tokenIds` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\n        require(to != address(0), \"ERC721: mint to address(0)\");\n\n        uint256 length = tokenIds.length;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                uint256 tokenId = tokenIds[i];\n                uint256 owner = s.owners[tokenId];\n                require(!_tokenExists(owner), \"ERC721: existing token\");\n                require(!_tokenWasBurnt(owner), \"ERC721: burnt token\");\n\n                s.owners[tokenId] = uint256(uint160(to));\n\n                emit Transfer(address(0), to, tokenId);\n            }\n\n            s.balances[to] += length;\n        }\n    }\n\n    /// @notice Unsafely mints tokens to multiple recipients once.\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Reverts if one of `tokenIds` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\n        uint256 length = recipients.length;\n        require(length == tokenIds.length, \"ERC721: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                require(to != address(0), \"ERC721: mint to address(0)\");\n\n                uint256 tokenId = tokenIds[i];\n                uint256 owner = s.owners[tokenId];\n                require(!_tokenExists(owner), \"ERC721: existing token\");\n                require(!_tokenWasBurnt(owner), \"ERC721: burnt token\");\n\n                s.owners[tokenId] = uint256(uint160(to));\n                ++s.balances[to];\n\n                emit Transfer(address(0), to, tokenId);\n            }\n        }\n    }\n\n    /// @notice Burns a token by a sender.\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\n    /// @dev Reverts if `tokenId` is not owned by `from`.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param tokenId The identifier of the token to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\n        uint256 owner = s.owners[tokenId];\n        require(from == _tokenOwner(owner), \"ERC721: non-owned token\");\n\n        if (!_isOperatable(s, from, sender)) {\n            require(_tokenHasApproval(owner) && sender == s.approvals[tokenId], \"ERC721: non-approved sender\");\n        }\n\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\n\n        unchecked {\n            // cannot underflow as balance is verified through TOKEN ownership\n            --s.balances[from];\n        }\n        emit Transfer(from, address(0), tokenId);\n    }\n\n    /// @notice Burns a batch of tokens by a sender.\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\n    /// @param sender The message sender.\n    /// @param from The current tokens owner.\n    /// @param tokenIds The identifiers of the tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\n        bool operatable = _isOperatable(s, from, sender);\n\n        uint256 length = tokenIds.length;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                uint256 tokenId = tokenIds[i];\n                uint256 owner = s.owners[tokenId];\n                require(from == _tokenOwner(owner), \"ERC721: non-owned token\");\n                if (!operatable) {\n                    require(_tokenHasApproval(owner) && sender == s.approvals[tokenId], \"ERC721: non-approved sender\");\n                }\n                s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\n                emit Transfer(from, address(0), tokenId);\n            }\n\n            if (length != 0) {\n                s.balances[from] -= length;\n            }\n        }\n    }\n\n    /// @notice Gets the balance of an address.\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\n        require(owner != address(0), \"ERC721: balance of address(0)\");\n        return s.balances[owner];\n    }\n\n    /// @notice Gets the owner of a token.\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token.\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\n        uint256 owner = s.owners[tokenId];\n        require(_tokenExists(owner), \"ERC721: non-existing token\");\n        return _tokenOwner(owner);\n    }\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\n        uint256 owner = s.owners[tokenId];\n        require(_tokenExists(owner), \"ERC721: non-existing token\");\n        if (_tokenHasApproval(owner)) {\n            return s.approvals[tokenId];\n        } else {\n            return address(0);\n        }\n    }\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\n        return s.operators[owner][operator];\n    }\n\n    /// @notice Gets whether a token was burnt.\n    /// @param tokenId The token identifier.\n    /// @return tokenWasBurnt Whether the token was burnt.\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\n        return _tokenWasBurnt(s.owners[tokenId]);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\n    /// @dev Reverts if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param tokenId Identifier of the token transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\n        require(IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) == ERC721_RECEIVED, \"ERC721: safe transfer rejected\");\n    }\n\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n    /// @param owner The token owner.\n    /// @param account The account to check the operatability of.\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\n        return (owner == account) || s.operators[owner][account];\n    }\n\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\n        return address(uint160(owner));\n    }\n\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\n        return uint160(owner) != 0;\n    }\n\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\n        return owner == BURNT_TOKEN_OWNER_VALUE;\n    }\n\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\n    }\n}\n"
    },
    "contracts/token/metadata/libraries/TokenMetadataPerTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nlibrary TokenMetadataPerTokenStorage {\n    using TokenMetadataPerTokenStorage for TokenMetadataPerTokenStorage.Layout;\n\n    struct Layout {\n        mapping(uint256 => string) uris;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadataPerToken.storage\")) - 1);\n\n    /// @notice Sets the metadata URI for a token.\n    /// @param id The token identifier.\n    /// @param uri The token metadata URI.\n    function setTokenURI(Layout storage s, uint256 id, string calldata uri) internal {\n        s.uris[id] = uri;\n    }\n\n    /// @notice Sets the metadata URIs for a batch of tokens.\n    /// @param ids The token identifiers.\n    /// @param uris The token metadata URIs.\n    function batchSetTokenURI(Layout storage s, uint256[] calldata ids, string[] calldata uris) internal {\n        uint256 length = ids.length;\n        require(length == uris.length, \"Metadata: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                s.uris[ids[i]] = uris[i];\n            }\n        }\n    }\n\n    /// @notice Gets the token metadata URI for a token.\n    /// @param id The token identifier.\n    /// @return tokenURI The token metadata URI.\n    function tokenMetadataURI(Layout storage s, uint256 id) internal view returns (string memory tokenURI) {\n        return s.uris[id];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/token/metadata/libraries/TokenMetadataWithBaseURIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary TokenMetadataWithBaseURIStorage {\n    using TokenMetadataWithBaseURIStorage for TokenMetadataWithBaseURIStorage.Layout;\n    using Strings for uint256;\n\n    struct Layout {\n        string baseURI;\n    }\n\n    bytes32 public constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadataWithBaseURI.storage\")) - 1);\n\n    event BaseMetadataURISet(string baseMetadataURI);\n\n    /// @notice Sets the base metadata URI.\n    /// @dev Emits a {BaseMetadataURISet} event.\n    /// @param baseURI The base metadata URI.\n    function setBaseMetadataURI(Layout storage s, string calldata baseURI) internal {\n        s.baseURI = baseURI;\n        emit BaseMetadataURISet(baseURI);\n    }\n\n    /// @notice Gets the base metadata URI.\n    /// @return baseURI The base metadata URI.\n    function baseMetadataURI(Layout storage s) internal view returns (string memory baseURI) {\n        return s.baseURI;\n    }\n\n    /// @notice Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identfier.\n    /// @param id The token identifier.\n    /// @return tokenURI The token metadata URI as the concatenation of the base metadata URI and the token identfier.\n    function tokenMetadataURI(Layout storage s, uint256 id) internal view returns (string memory tokenURI) {\n        return string(abi.encodePacked(s.baseURI, id.toString()));\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/token/royalty/base/ERC2981Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC2981} from \"./../interfaces/IERC2981.sol\";\nimport {ERC2981Storage} from \"./../libraries/ERC2981Storage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC2981 NFT Royalty Standard (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract ERC2981Base is Context, IERC2981 {\n    using ERC2981Storage for ERC2981Storage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    uint256 public constant ROYALTY_FEE_DENOMINATOR = ERC2981Storage.ROYALTY_FEE_DENOMINATOR;\n\n    /// @notice Sets the royalty percentage.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts with IncorrectRoyaltyPercentage if `percentage` is above 100% (> FEE_DENOMINATOR).\n    /// @param percentage The new percentage to set. For example 50000 sets 50% royalty.\n    function setRoyaltyPercentage(uint256 percentage) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        ERC2981Storage.layout().setRoyaltyPercentage(percentage);\n    }\n\n    /// @notice Sets the royalty receiver.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts with IncorrectRoyaltyReceiver if `receiver` is the zero address.\n    /// @param receiver The new receiver to set.\n    function setRoyaltyReceiver(address receiver) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        ERC2981Storage.layout().setRoyaltyReceiver(receiver);\n    }\n\n    /// @inheritdoc IERC2981\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount) {\n        return ERC2981Storage.layout().royaltyInfo(tokenId, salePrice);\n    }\n}\n"
    },
    "contracts/token/royalty/base/OperatorFiltererBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IOperatorFilterRegistry} from \"./../interfaces/IOperatorFilterRegistry.sol\";\nimport {OperatorFiltererStorage} from \"./../libraries/OperatorFiltererStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Operator Filterer for token contracts (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract OperatorFiltererBase is Context {\n    using OperatorFiltererStorage for OperatorFiltererStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Updates the address that the contract will make OperatorFilter checks against.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @param registry The new operator filter registry address. When set to the zero address, checks will be bypassed.\n    function updateOperatorFilterRegistry(IOperatorFilterRegistry registry) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        OperatorFiltererStorage.layout().updateOperatorFilterRegistry(registry);\n    }\n\n    /// @notice Gets the operator filter registry address.\n    function operatorFilterRegistry() external view returns (IOperatorFilterRegistry) {\n        return OperatorFiltererStorage.layout().operatorFilterRegistry();\n    }\n}\n"
    },
    "contracts/token/royalty/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ERC2981Storage} from \"./libraries/ERC2981Storage.sol\";\nimport {ERC2981Base} from \"./base/ERC2981Base.sol\";\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\n\n/// @title ERC2981 NFT Royalty Standard (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC2981 is ERC2981Base, ContractOwnership {\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC2981.\n    constructor() {\n        ERC2981Storage.init();\n    }\n}\n"
    },
    "contracts/token/royalty/facets/ERC2981Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC2981Storage} from \"./../libraries/ERC2981Storage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {ERC2981Base} from \"./../base/ERC2981Base.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title ERC2981 NFT Royalty Standard (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet}, {InterfaceDetectionFacet} and {ContractOwnershipFacet}.\ncontract ERC2981Facet is ERC2981Base, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC2981.\n    /// @dev Reverts if the sender is not the proxy admin.\n    function init() external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        ERC2981Storage.init();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/royalty/facets/OperatorFiltererFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\nimport {IOperatorFilterRegistry} from \"./../interfaces/IOperatorFilterRegistry.sol\";\nimport {OperatorFiltererStorage} from \"./../libraries/OperatorFiltererStorage.sol\";\nimport {ProxyAdminStorage} from \"./../../../proxy/libraries/ProxyAdminStorage.sol\";\nimport {OperatorFiltererBase} from \"./../base/OperatorFiltererBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../../metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title Operator Filterer for token contracts (facet version).\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {ContractOwnershipFacet}.\ncontract OperatorFiltererFacet is OperatorFiltererBase, ForwarderRegistryContextBase {\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\n    using OperatorFiltererStorage for OperatorFiltererStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\n\n    /// @notice Sets the address that the contract will make OperatorFilter checks against.\n    /// @dev Reverts if the sender is not the proxy admin.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @param registry The operator filter registry address. When set to the zero address, checks will be bypassed.\n    function init(IOperatorFilterRegistry registry) external {\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\n        OperatorFiltererStorage.layout().proxyInit(registry);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/token/royalty/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC2981 NFT Royalty Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2981\n/// @dev Note: The ERC-165 identifier for this interface is 0x2a55205a.\ninterface IERC2981 {\n    /// @notice Called with the sale price to determine how much royalty is owed and to whom.\n    /// @param tokenId The NFT asset queried for royalty information\n    /// @param salePrice The sale price of the NFT asset specified by `tokenId`\n    /// @return receiver Address of who should be sent the royalty payment\n    /// @return royaltyAmount The royalty payment amount for `salePrice`\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/token/royalty/interfaces/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    function register(address registrant) external;\n\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    function unregister(address addr) external;\n\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    function subscribers(address registrant) external returns (address[] memory);\n\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    function isRegistered(address addr) external returns (bool);\n\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
    },
    "contracts/token/royalty/libraries/ERC2981Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC2981} from \"./../interfaces/IERC2981.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC2981Storage {\n    using ERC2981Storage for ERC2981Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address royaltyReceiver;\n        uint96 royaltyPercentage;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.royalty.ERC2981.storage\")) - 1);\n\n    uint256 internal constant ROYALTY_FEE_DENOMINATOR = 100000;\n\n    error IncorrectRoyaltyPercentage(uint256 percentage);\n    error IncorrectRoyaltyReceiver();\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC2981.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC2981).interfaceId, true);\n    }\n\n    /// @notice Sets the royalty percentage.\n    /// @dev Reverts with IncorrectRoyaltyPercentage if `percentage` is above 100% (> FEE_DENOMINATOR).\n    /// @param percentage The new percentage to set. For example 50000 sets 50% royalty.\n    function setRoyaltyPercentage(Layout storage s, uint256 percentage) internal {\n        if (percentage > ROYALTY_FEE_DENOMINATOR) {\n            revert IncorrectRoyaltyPercentage(percentage);\n        }\n        s.royaltyPercentage = uint96(percentage);\n    }\n\n    /// @notice Sets the royalty receiver.\n    /// @dev Reverts with IncorrectRoyaltyReceiver if `receiver` is the zero address.\n    /// @param receiver The new receiver to set.\n    function setRoyaltyReceiver(Layout storage s, address receiver) internal {\n        if (receiver == address(0)) {\n            revert IncorrectRoyaltyReceiver();\n        }\n        s.royaltyReceiver = receiver;\n    }\n\n    /// @notice Called with the sale price to determine how much royalty is owed and to whom.\n    // / @param tokenId The NFT asset queried for royalty information\n    /// @param salePrice The sale price of the NFT asset specified by `tokenId`\n    /// @return receiver Address of who should be sent the royalty payment\n    /// @return royaltyAmount The royalty payment amount for `salePrice`\n    function royaltyInfo(Layout storage s, uint256, uint256 salePrice) internal view returns (address receiver, uint256 royaltyAmount) {\n        receiver = s.royaltyReceiver;\n        uint256 royaltyPercentage = s.royaltyPercentage;\n        if (salePrice == 0 || royaltyPercentage == 0) {\n            royaltyAmount = 0;\n        } else {\n            if (salePrice < ROYALTY_FEE_DENOMINATOR) {\n                royaltyAmount = (salePrice * royaltyPercentage) / ROYALTY_FEE_DENOMINATOR;\n            } else {\n                royaltyAmount = (salePrice / ROYALTY_FEE_DENOMINATOR) * royaltyPercentage;\n            }\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/token/royalty/libraries/OperatorFiltererStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IOperatorFilterRegistry} from \"./../interfaces/IOperatorFilterRegistry.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary OperatorFiltererStorage {\n    using OperatorFiltererStorage for OperatorFiltererStorage.Layout;\n\n    struct Layout {\n        IOperatorFilterRegistry registry;\n    }\n\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.token.royalty.OperatorFilterer.phase\")) - 1);\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.royalty.OperatorFilterer.storage\")) - 1);\n\n    error OperatorNotAllowed(address operator);\n\n    /// @notice Sets the address that the contract will make OperatorFilter checks against.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @param registry The operator filter registry address. When set to the zero address, checks will be bypassed.\n    function constructorInit(Layout storage s, IOperatorFilterRegistry registry) internal {\n        s.registry = registry;\n    }\n\n    /// @notice Sets the address that the contract will make OperatorFilter checks against.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @param registry The operator filter registry address. When set to the zero address, checks will be bypassed.\n    function proxyInit(Layout storage s, IOperatorFilterRegistry registry) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(registry);\n    }\n\n    /// @notice Updates the address that the contract will make OperatorFilter checks against.\n    /// @param registry The new operator filter registry address. When set to the zero address, checks will be bypassed.\n    function updateOperatorFilterRegistry(Layout storage s, IOperatorFilterRegistry registry) internal {\n        s.registry = registry;\n    }\n\n    /// @dev Reverts with OperatorNotAllowed if `sender` is not `from` and is not allowed by a valid operator registry.\n    function requireAllowedOperatorForTransfer(Layout storage s, address sender, address from) internal view {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred from an EOA.\n        if (sender != from) {\n            _checkFilterOperator(s, sender);\n        }\n    }\n\n    /// @dev Reverts with OperatorNotAllowed if `sender` is not allowed by a valid operator registry.\n    function requireAllowedOperatorForApproval(Layout storage s, address operator) internal view {\n        _checkFilterOperator(s, operator);\n    }\n\n    function operatorFilterRegistry(Layout storage s) internal view returns (IOperatorFilterRegistry) {\n        return s.registry;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    function _checkFilterOperator(Layout storage s, address operator) private view {\n        IOperatorFilterRegistry registry = s.registry;\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(registry) != address(0) && address(registry).code.length > 0) {\n            if (!registry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/libraries/Bytes32.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nlibrary Bytes32 {\n    /// @notice Converts bytes32 to base32 string.\n    /// @param value value to convert.\n    /// @return the converted base32 string.\n    function toBase32String(bytes32 value) internal pure returns (string memory) {\n        unchecked {\n            bytes32 base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\n            uint256 i = uint256(value);\n            uint256 k = 52;\n            bytes memory bstr = new bytes(k);\n            bstr[--k] = base32Alphabet[uint8((i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (i % (2**s)) << (5-s)\n            i /= 8;\n            while (k > 0) {\n                bstr[--k] = base32Alphabet[i % 32];\n                i /= 32;\n            }\n            return string(bstr);\n        }\n    }\n\n    /// @notice Converts a bytes32 value to an ASCII string, trimming the tailing zeros.\n    /// @param value value to convert.\n    /// @return the converted ASCII string.\n    function toASCIIString(bytes32 value) internal pure returns (string memory) {\n        unchecked {\n            if (value == 0x00) return \"\";\n            bytes memory bytesString = bytes(abi.encodePacked(value));\n            uint256 pos = 31;\n            while (true) {\n                if (bytesString[pos] != 0) break;\n                --pos;\n            }\n            bytes memory asciiString = new bytes(pos + 1);\n            for (uint256 i; i <= pos; ++i) {\n                asciiString[i] = bytesString[i];\n            }\n            return string(asciiString);\n        }\n    }\n}\n"
    },
    "contracts/utils/MultiStaticCall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title MultiStaticCall - Aggregate results from multiple static calls\n/// @dev Derived from https://github.com/makerdao/multicall (MIT licence)\ncontract MultiStaticCall {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates the results of multiple static calls.\n    /// @dev Reverts if `requireSuccess` is true and one of the static calls fails.\n    /// @param requireSuccess Whether a failed static call should trigger a revert.\n    /// @param calls The list of target contracts and encoded function calls for each static call.\n    /// @return returnData The list of success flags and raw return data for each static call.\n    function tryAggregate(bool requireSuccess, Call[] calldata calls) public view returns (Result[] memory returnData) {\n        uint256 length = calls.length;\n        returnData = new Result[](length);\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                (bool success, bytes memory ret) = calls[i].target.staticcall(calls[i].callData);\n\n                if (requireSuccess) {\n                    require(success, \"MultiStaticCall: call failed\");\n                }\n\n                returnData[i] = Result(success, ret);\n            }\n        }\n    }\n\n    /// @notice Aggregates the results of multiple static calls, together with the associated block number.\n    /// @dev Warning: Do not use this function as part of a transaction: `blockNumber` would not be meaningful due to transactions ordering.\n    /// @dev Reverts if `requireSuccess` is true and one of the static calls fails.\n    /// @param requireSuccess Whether a failed static call should trigger a revert.\n    /// @param calls The list of target contracts and encoded function calls for each static call.\n    /// @return blockNumber The latest mined block number indicating at which point the return data is valid.\n    /// @return returnData The list of success flags and raw return data for each static call.\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls) public view returns (uint256 blockNumber, Result[] memory returnData) {\n        blockNumber = block.number;\n        returnData = tryAggregate(requireSuccess, calls);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}