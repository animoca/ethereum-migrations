{
  "address": "0x498B7c704e1663113D3a90848A3f122476639583",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IForwarderRegistry",
          "name": "forwarderRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facet",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCutCommon.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCutCommon.FacetCut[]",
          "name": "cuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facet",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCutCommon.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCutCommon.FacetCut[]",
          "name": "cuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facet",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCutCommon.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCutCommon.FacetCut[]",
          "name": "cuts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDiamondCutCommon.Initialization[]",
          "name": "initializations",
          "type": "tuple[]"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initDiamondCutStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x604e73aaf8adb71b0280813348f04ce525e9fe9f9dcbe5faec9da2a80fbfa718",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xF7e30493A9018Bd8f364ba0E83E3BD4DD5d6bB2b",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "1549071",
    "logsBloom": "0x
    "blockHash": "0xaa7c6bde673de54418fc559feec03406d57c776fe44a640a8da530d98f8871ae",
    "transactionHash": "0x604e73aaf8adb71b0280813348f04ce525e9fe9f9dcbe5faec9da2a80fbfa718",
    "logs": [],
    "blockNumber": 28608462,
    "cumulativeGasUsed": "2372820",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3f547F87251710F70109Ae0409d461b270709693"
  ],
  "numDeployments": 1,
  "solcInputHash": "a6ab94751dde68b4d6125ac6f179d1ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCutCommon.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCutCommon.FacetCut[]\",\"name\":\"cuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCutCommon.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCutCommon.FacetCut[]\",\"name\":\"cuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCutCommon.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCutCommon.FacetCut[]\",\"name\":\"cuts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDiamondCutCommon.Initialization[]\",\"name\":\"initializations\",\"type\":\"tuple[]\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDiamondCutStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2535Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\",\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],(address,bytes)[])\":{\"details\":\"Reverts if the sender is not the proxy admin.\",\"params\":{\"cuts\":\"The list of facet addresses, actions and function selectors to apply to the diamond.\",\"initializations\":\"The list of addresses and encoded function calls to execute with delegatecall.\"}},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"details\":\"Reverts if the sender is not the proxy admin.\",\"params\":{\"cuts\":\"The list of facet addresses, actions and function selectors to apply to the diamond.\",\"data\":\"The encoded function call to execute on `target`.\",\"target\":\"The address of the contract to execute `data` on.\"}},\"initDiamondCutStorage()\":{\"details\":\"Reverts if the sender is not the proxy admin.\"}},\"title\":\"Diamond Cut (facet version).\",\"version\":1},\"userdoc\":{\"events\":{\"DiamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Emitted when at least a cut action is operated on the diamond.\"}},\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],(address,bytes)[])\":{\"notice\":\"Add/replace/remove facet functions and execute a batch of functions with delegatecall.\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove facet functions and optionally execute a function with delegatecall.\"},\"initDiamondCutStorage()\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: DiamondCut, DiamondCutBatchInit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamond/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\npragma experimental ABIEncoderV2;\\n\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IDiamondCut} from \\\"./../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondCutBatchInit} from \\\"./../interfaces/IDiamondCutBatchInit.sol\\\";\\nimport {DiamondStorage} from \\\"./../libraries/DiamondStorage.sol\\\";\\nimport {ProxyAdminStorage} from \\\"./../../proxy/libraries/ProxyAdminStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Diamond Cut (facet version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2535\\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\\ncontract DiamondCutFacet is IDiamondCut, IDiamondCutBatchInit, ForwarderRegistryContextBase {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n    using DiamondStorage for DiamondStorage.Layout;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: DiamondCut, DiamondCutBatchInit.\\n    /// @dev Reverts if the sender is not the proxy admin.\\n    function initDiamondCutStorage() external {\\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\\n        DiamondStorage.initDiamondCut();\\n    }\\n\\n    /// @inheritdoc IDiamondCut\\n    /// @dev Reverts if the sender is not the proxy admin.\\n    function diamondCut(FacetCut[] calldata cuts, address target, bytes calldata data) external override {\\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\\n        DiamondStorage.layout().diamondCut(cuts, target, data);\\n    }\\n\\n    /// @inheritdoc IDiamondCutBatchInit\\n    /// @dev Reverts if the sender is not the proxy admin.\\n    function diamondCut(FacetCut[] calldata cuts, Initialization[] calldata initializations) external override {\\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\\n        DiamondStorage.layout().diamondCut(cuts, initializations);\\n    }\\n}\\n\",\"keccak256\":\"0x451273068250b87e23011ec35177381dfa831bd9464d798b160e38fa5119922c\",\"license\":\"MIT\"},\"contracts/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\npragma experimental ABIEncoderV2;\\n\\nimport {IDiamondCutCommon} from \\\"./IDiamondCutCommon.sol\\\";\\n\\n/// @title ERC2535 Diamond Standard, Diamond Cut.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2535\\n/// @dev Note: the ERC-165 identifier for this interface is 0x1f931c1c\\ninterface IDiamondCut is IDiamondCutCommon {\\n    /// @notice Add/replace/remove facet functions and optionally execute a function with delegatecall.\\n    /// @dev Emits a {DiamondCut} event.\\n    /// @param cuts The list of facet addresses, actions and function selectors to apply to the diamond.\\n    /// @param target The address of the contract to execute `data` on.\\n    /// @param data The encoded function call to execute on `target`.\\n    function diamondCut(FacetCut[] calldata cuts, address target, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5c2b4fde495d2572c1c857513fbc47ebc246665718270b624b4f431122e19057\",\"license\":\"MIT\"},\"contracts/diamond/interfaces/IDiamondCutBatchInit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\npragma experimental ABIEncoderV2;\\n\\nimport {IDiamondCutCommon} from \\\"./IDiamondCutCommon.sol\\\";\\n\\n/// @title ERCXXX Diamond Standard, Diamond Cut Batch Init extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-XXXX\\n/// @dev Note: the ERC-165 identifier for this interface is 0xb2afc5b5\\ninterface IDiamondCutBatchInit is IDiamondCutCommon {\\n    /// @notice Add/replace/remove facet functions and execute a batch of functions with delegatecall.\\n    /// @dev Emits a {DiamondCut} event.\\n    /// @param cuts The list of facet addresses, actions and function selectors to apply to the diamond.\\n    /// @param initializations The list of addresses and encoded function calls to execute with delegatecall.\\n    function diamondCut(FacetCut[] calldata cuts, Initialization[] calldata initializations) external;\\n}\\n\",\"keccak256\":\"0x9ee36307c69cd5e4a178bff0f4f20103021463e3ad4a484dc59ae04a741ef00b\",\"license\":\"MIT\"},\"contracts/diamond/interfaces/IDiamondCutCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDiamondCutCommon {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facet;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n\\n    struct Initialization {\\n        address target;\\n        bytes data;\\n    }\\n\\n    /// @notice Emitted when at least a cut action is operated on the diamond.\\n    /// @param cuts The list of facet addresses, actions and function selectors applied to the diamond.\\n    /// @param target The address of the contract where `data` was executed.\\n    /// @param data The encoded function call executed on `target`.\\n    event DiamondCut(FacetCut[] cuts, address target, bytes data);\\n}\\n\",\"keccak256\":\"0x3efbb13f77b63b4b3dfb9260b28754256666ed0c3073db5e68b738ab9e9dd536\",\"license\":\"MIT\"},\"contracts/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\npragma experimental ABIEncoderV2;\\n\\n/// @title ERC2535 Diamond Standard, Diamond Loupe.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2535\\n/// @dev Note: the ERC-165 identifier for this interface is 0x48e2b093\\ninterface IDiamondLoupe {\\n    struct Facet {\\n        address facet;\\n        bytes4[] selectors;\\n    }\\n\\n    /// @notice Gets all the facet addresses used by the diamond and their function selectors.\\n    /// @return diamondFacets The facet addresses used by the diamond and their function selectors.\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /// @notice Gets all the function selectors supported by a facet.\\n    /// @param facetAddress The facet address.\\n    /// @return selectors The function selectors supported by `facet`.\\n    function facetFunctionSelectors(address facetAddress) external view returns (bytes4[] memory selectors);\\n\\n    /// @notice Get all the facet addresses used by the diamond.\\n    /// @return diamondFacetsAddresses The facet addresses used by the diamond.\\n    function facetAddresses() external view returns (address[] memory diamondFacetsAddresses);\\n\\n    /// @notice Gets the facet address that supports a given function selector.\\n    /// @param functionSelector The function selector.\\n    /// @return diamondFacetAddress The facet address that supports `functionSelector`, or the zero address if the facet is not found.\\n    function facetAddress(bytes4 functionSelector) external view returns (address diamondFacetAddress);\\n}\\n\",\"keccak256\":\"0x00e4622240e6e3f426e7ffb4aff789c96025b8a8214a6f6abe01e3a3f1de155f\",\"license\":\"MIT\"},\"contracts/diamond/libraries/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\npragma experimental ABIEncoderV2;\\n\\nimport {IDiamondCutCommon} from \\\"./../interfaces/IDiamondCutCommon.sol\\\";\\nimport {IDiamondCut} from \\\"./../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondCutBatchInit} from \\\"./../interfaces/IDiamondCutBatchInit.sol\\\";\\nimport {IDiamondLoupe} from \\\"./../interfaces/IDiamondLoupe.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @dev derived from https://github.com/mudgen/diamond-2 (MIT licence) and https://github.com/solidstate-network/solidstate-solidity (MIT licence)\\nlibrary DiamondStorage {\\n    using Address for address;\\n    using DiamondStorage for DiamondStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        // selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) diamondFacets;\\n        // number of selectors registered in selectorSlots\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.Diamond.storage\\\")) - 1);\\n\\n    bytes32 internal constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 internal constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    event DiamondCut(IDiamondCutCommon.FacetCut[] cuts, address target, bytes data);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: DiamondCut, DiamondCutBatchInit.\\n    function initDiamondCut() internal {\\n        InterfaceDetectionStorage.Layout storage interfaceDetectionLayout = InterfaceDetectionStorage.layout();\\n        interfaceDetectionLayout.setSupportedInterface(type(IDiamondCut).interfaceId, true);\\n        interfaceDetectionLayout.setSupportedInterface(type(IDiamondCutBatchInit).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: DiamondLoupe.\\n    function initDiamondLoupe() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IDiamondLoupe).interfaceId, true);\\n    }\\n\\n    function diamondCut(Layout storage s, IDiamondCutCommon.FacetCut[] memory cuts, address target, bytes memory data) internal {\\n        cutFacets(s, cuts);\\n        emit DiamondCut(cuts, target, data);\\n        initializationCall(target, data);\\n    }\\n\\n    function diamondCut(\\n        Layout storage s,\\n        IDiamondCutCommon.FacetCut[] memory cuts,\\n        IDiamondCutCommon.Initialization[] memory initializations\\n    ) internal {\\n        unchecked {\\n            s.cutFacets(cuts);\\n            emit DiamondCut(cuts, address(0), \\\"\\\");\\n            uint256 length = initializations.length;\\n            for (uint256 i; i != length; ++i) {\\n                initializationCall(initializations[i].target, initializations[i].data);\\n            }\\n        }\\n    }\\n\\n    function cutFacets(Layout storage s, IDiamondCutCommon.FacetCut[] memory facetCuts) internal {\\n        unchecked {\\n            uint256 originalSelectorCount = s.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = s.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            uint256 length = facetCuts.length;\\n            for (uint256 i; i != length; ++i) {\\n                IDiamondCutCommon.FacetCut memory facetCut = facetCuts[i];\\n                IDiamondCutCommon.FacetCutAction action = facetCut.action;\\n\\n                require(facetCut.selectors.length != 0, \\\"Diamond: no function selectors\\\");\\n\\n                if (action == IDiamondCutCommon.FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = s.addFacetSelectors(selectorCount, selectorSlot, facetCut);\\n                } else if (action == IDiamondCutCommon.FacetCutAction.REPLACE) {\\n                    s.replaceFacetSelectors(facetCut);\\n                } else {\\n                    (selectorCount, selectorSlot) = s.removeFacetSelectors(selectorCount, selectorSlot, facetCut);\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                s.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                s.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n        }\\n    }\\n\\n    function addFacetSelectors(\\n        Layout storage s,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCutCommon.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.facet != address(this)) {\\n                // allows immutable functions to be added from a constructor\\n                require(facetCut.facet.isContract(), \\\"Diamond: facet has no code\\\"); // reverts if executed from a constructor\\n            }\\n\\n            uint256 length = facetCut.selectors.length;\\n            for (uint256 i; i != length; ++i) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = s.diamondFacets[selector];\\n\\n                require(address(bytes20(oldFacet)) == address(0), \\\"Diamond: selector already added\\\");\\n\\n                // add facet for selector\\n                s.diamondFacets[selector] = bytes20(facetCut.facet) | bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot = (selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    s.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                ++selectorCount;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function removeFacetSelectors(\\n        Layout storage s,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        IDiamondCutCommon.FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            require(facetCut.facet == address(0), \\\"Diamond: non-zero address facet\\\");\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i != facetCut.selectors.length; ++i) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = s.diamondFacets[selector];\\n\\n                require(address(bytes20(oldFacet)) != address(0), \\\"Diamond: selector not found\\\");\\n                require(address(bytes20(oldFacet)) != address(this), \\\"Diamond: immutable function\\\");\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = s.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(selectorSlot << (selectorInSlotIndex << 5));\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        s.diamondFacets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(s.diamondFacets[lastSelector]);\\n                    }\\n\\n                    delete s.diamondFacets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = s.selectorSlots[oldSelectorsSlotCount];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    s.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete s.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function replaceFacetSelectors(Layout storage s, IDiamondCutCommon.FacetCut memory facetCut) internal {\\n        unchecked {\\n            require(facetCut.facet.isContract(), \\\"Diamond: facet has no code\\\");\\n\\n            uint256 length = facetCut.selectors.length;\\n            for (uint256 i; i != length; ++i) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = s.diamondFacets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                require(oldFacetAddress != address(0), \\\"Diamond: selector not found\\\");\\n                require(oldFacetAddress != address(this), \\\"Diamond: immutable function\\\");\\n                require(oldFacetAddress != facetCut.facet, \\\"Diamond: identical function\\\");\\n\\n                // replace old facet address\\n                s.diamondFacets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(facetCut.facet);\\n            }\\n        }\\n    }\\n\\n    function initializationCall(address target, bytes memory data) internal {\\n        if (target == address(0)) {\\n            require(data.length == 0, \\\"Diamond: data is not empty\\\");\\n        } else {\\n            require(data.length != 0, \\\"Diamond: data is empty\\\");\\n            if (target != address(this)) {\\n                require(target.isContract(), \\\"Diamond: target has no code\\\");\\n            }\\n\\n            (bool success, bytes memory returndata) = target.delegatecall(data);\\n            if (!success) {\\n                uint256 returndataLength = returndata.length;\\n                if (returndataLength != 0) {\\n                    assembly {\\n                        revert(add(32, returndata), returndataLength)\\n                    }\\n                } else {\\n                    revert(\\\"Diamond: init call reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function facets(Layout storage s) internal view returns (IDiamondLoupe.Facet[] memory diamondFacets) {\\n        unchecked {\\n            uint16 selectorCount = s.selectorCount;\\n            diamondFacets = new IDiamondLoupe.Facet[](selectorCount);\\n\\n            uint256[] memory numFacetSelectors = new uint256[](selectorCount);\\n            uint256 numFacets;\\n            uint256 selectorIndex;\\n\\n            // loop through function selectors\\n            for (uint256 slotIndex; selectorIndex < selectorCount; ++slotIndex) {\\n                bytes32 slot = s.selectorSlots[slotIndex];\\n\\n                for (uint256 selectorSlotIndex; selectorSlotIndex != 8; ++selectorSlotIndex) {\\n                    ++selectorIndex;\\n\\n                    if (selectorIndex > selectorCount) {\\n                        break;\\n                    }\\n\\n                    bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                    address facet = address(bytes20(s.diamondFacets[selector]));\\n\\n                    bool continueLoop;\\n\\n                    for (uint256 facetIndex; facetIndex != numFacets; ++facetIndex) {\\n                        if (diamondFacets[facetIndex].facet == facet) {\\n                            diamondFacets[facetIndex].selectors[numFacetSelectors[facetIndex]] = selector;\\n                            ++numFacetSelectors[facetIndex];\\n                            continueLoop = true;\\n                            break;\\n                        }\\n                    }\\n\\n                    if (continueLoop) {\\n                        continue;\\n                    }\\n\\n                    diamondFacets[numFacets].facet = facet;\\n                    diamondFacets[numFacets].selectors = new bytes4[](selectorCount);\\n                    diamondFacets[numFacets].selectors[0] = selector;\\n                    numFacetSelectors[numFacets] = 1;\\n                    ++numFacets;\\n                }\\n            }\\n\\n            for (uint256 facetIndex; facetIndex != numFacets; ++facetIndex) {\\n                uint256 numSelectors = numFacetSelectors[facetIndex];\\n                bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n                // setting the number of selectors\\n                assembly {\\n                    mstore(selectors, numSelectors)\\n                }\\n            }\\n\\n            // setting the number of facets\\n            assembly {\\n                mstore(diamondFacets, numFacets)\\n            }\\n        }\\n    }\\n\\n    function facetFunctionSelectors(Layout storage s, address facet) internal view returns (bytes4[] memory selectors) {\\n        unchecked {\\n            uint16 selectorCount = s.selectorCount;\\n            selectors = new bytes4[](selectorCount);\\n\\n            uint256 numSelectors;\\n            uint256 selectorIndex;\\n\\n            // loop through function selectors\\n            for (uint256 slotIndex; selectorIndex < selectorCount; ++slotIndex) {\\n                bytes32 slot = s.selectorSlots[slotIndex];\\n\\n                for (uint256 selectorSlotIndex; selectorSlotIndex != 8; ++selectorSlotIndex) {\\n                    ++selectorIndex;\\n\\n                    if (selectorIndex > selectorCount) {\\n                        break;\\n                    }\\n\\n                    bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                    if (facet == address(bytes20(s.diamondFacets[selector]))) {\\n                        selectors[numSelectors] = selector;\\n                        ++numSelectors;\\n                    }\\n                }\\n            }\\n\\n            // set the number of selectors in the array\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n    }\\n\\n    function facetAddresses(Layout storage s) internal view returns (address[] memory addresses) {\\n        unchecked {\\n            uint16 selectorCount = s.selectorCount;\\n            addresses = new address[](selectorCount);\\n            uint256 numFacets;\\n            uint256 selectorIndex;\\n\\n            for (uint256 slotIndex; selectorIndex < selectorCount; ++slotIndex) {\\n                bytes32 slot = s.selectorSlots[slotIndex];\\n\\n                for (uint256 selectorSlotIndex; selectorSlotIndex != 8; ++selectorSlotIndex) {\\n                    ++selectorIndex;\\n\\n                    if (selectorIndex > selectorCount) {\\n                        break;\\n                    }\\n\\n                    bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                    address facet = address(bytes20(s.diamondFacets[selector]));\\n\\n                    bool continueLoop;\\n\\n                    for (uint256 facetIndex; facetIndex != numFacets; ++facetIndex) {\\n                        if (facet == addresses[facetIndex]) {\\n                            continueLoop = true;\\n                            break;\\n                        }\\n                    }\\n\\n                    if (continueLoop) {\\n                        continue;\\n                    }\\n\\n                    addresses[numFacets] = facet;\\n                    ++numFacets;\\n                }\\n            }\\n\\n            // set the number of facet addresses in the array\\n            assembly {\\n                mstore(addresses, numFacets)\\n            }\\n        }\\n    }\\n\\n    function facetAddress(Layout storage s, bytes4 selector) internal view returns (address facet) {\\n        facet = address(bytes20(s.diamondFacets[selector]));\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfdbbf335939b8e24884d2b2c8358eb3c4029c4230848f99de24ad3127876a0d7\",\"license\":\"MIT\"},\"contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyAdminStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport {ProxyInitialization} from \\\"./ProxyInitialization.sol\\\";\\n\\nlibrary ProxyAdminStorage {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    struct Layout {\\n        address admin;\\n    }\\n\\n    // bytes32 public constant PROXYADMIN_STORAGE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin.phase\\\")) - 1);\\n\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /// @notice Initializes the storage with an initial admin (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function constructorInit(Layout storage s, address initialAdmin) internal {\\n        require(initialAdmin != address(0), \\\"ProxyAdmin: no initial admin\\\");\\n        s.admin = initialAdmin;\\n        emit AdminChanged(address(0), initialAdmin);\\n    }\\n\\n    /// @notice Initializes the storage with an initial admin (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function proxyInit(Layout storage s, address initialAdmin) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialAdmin);\\n    }\\n\\n    /// @notice Sets a new proxy admin.\\n    /// @dev Reverts if `sender` is not the proxy admin.\\n    /// @dev Emits an {AdminChanged} event if `newAdmin` is different from the current proxy admin.\\n    /// @param newAdmin The new proxy admin.\\n    function changeProxyAdmin(Layout storage s, address sender, address newAdmin) internal {\\n        address previousAdmin = s.admin;\\n        require(sender == previousAdmin, \\\"ProxyAdmin: not the admin\\\");\\n        if (previousAdmin != newAdmin) {\\n            s.admin = newAdmin;\\n            emit AdminChanged(previousAdmin, newAdmin);\\n        }\\n    }\\n\\n    /// @notice Gets the proxy admin.\\n    /// @return admin The proxy admin\\n    function proxyAdmin(Layout storage s) internal view returns (address admin) {\\n        return s.admin;\\n    }\\n\\n    /// @notice Ensures that an account is the proxy admin.\\n    /// @dev Reverts if `account` is not the proxy admin.\\n    /// @param account The account.\\n    function enforceIsProxyAdmin(Layout storage s, address account) internal view {\\n        require(account == s.admin, \\\"ProxyAdmin: not the admin\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2b916964151365f60494fa057f19318a4f917c99e044173ee674e4d3c183000\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611bcd380380611bcd83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611b3b6100926000396000818161017b01526102030152611b3b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631f931c1c1461004657806395bce6661461005b578063b2afc5b514610063575b600080fd5b61005961005436600461139d565b610076565b005b6100596100ec565b61005961007136600461144b565b610101565b61008f610081610138565b61008961027f565b906102b3565b6100e561009c85876115a5565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100dd925061033f915050565b92919061036d565b5050505050565b6100f7610081610138565b6100ff6103bc565b565b61010c610081610138565b61013261011984866115a5565b6101238385611701565b61012b61033f565b9190610423565b50505050565b6000333214806101485750601836105b1561015257503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061026e57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa15801561024a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026e919061182d565b1561027857919050565b3391505090565b6000806102ad60017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104611856565b92915050565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f50726f787941646d696e3a206e6f74207468652061646d696e0000000000000060448201526064015b60405180910390fd5b5050565b6000806102ad60017f65d27473a5b05206737961f69a3b7a55316862d7a6ef82b3f5455fe92fab43e3611856565b61037784846104bf565b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516103aa939291906119f2565b60405180910390a16101328282610667565b60006103c66108d4565b90506103f4817f1f931c1c000000000000000000000000000000000000000000000000000000006001610902565b610420817fb2afc5b5000000000000000000000000000000000000000000000000000000006001610902565b50565b61042d83836104bf565b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67382600060405161045f929190611a71565b60405180910390a1805160005b8181146100e5576104b783828151811061048857610488611aba565b6020026020010151600001518483815181106104a6576104a6611aba565b602002602001015160200151610667565b60010161046c565b600182015461ffff8116908190600090600716156104ef5750600381901c60009081526002850160205260409020545b835160005b81811461060457600086828151811061050f5761050f611aba565b60200260200101519050600081602001519050816040015151600003610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4469616d6f6e643a206e6f2066756e6374696f6e2073656c6563746f727300006044820152606401610332565b60008160028111156105a5576105a5611890565b036105c0576105b689878785610a0e565b90965094506105fa565b60018160028111156105d4576105d4611890565b036105e8576105e38983610c40565b6105fa565b6105f489878785610f26565b90965094505b50506001016104f4565b5083831461063d576001860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff85161790555b600783161561065f57600383901c600090815260028701602052604090208290555b505050505050565b73ffffffffffffffffffffffffffffffffffffffff82166106eb5780511561033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4469616d6f6e643a2064617461206973206e6f7420656d7074790000000000006044820152606401610332565b8051600003610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4469616d6f6e643a206461746120697320656d707479000000000000000000006044820152606401610332565b73ffffffffffffffffffffffffffffffffffffffff821630146107f15773ffffffffffffffffffffffffffffffffffffffff82163b6107f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a2074617267657420686173206e6f20636f646500000000006044820152606401610332565b6000808373ffffffffffffffffffffffffffffffffffffffff16836040516108199190611ae9565b600060405180830381855af49150503d8060008114610854576040519150601f19603f3d011682016040523d82523d6000602084013e610859565b606091505b5091509150816101325780518015610872578082602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a20696e69742063616c6c20726576657274656400000000006044820152606401610332565b6000806102ad60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611856565b7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016109aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c7565006044820152606401610332565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b8051600090819073ffffffffffffffffffffffffffffffffffffffff163014610ab057825173ffffffffffffffffffffffffffffffffffffffff163b610ab0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4469616d6f6e643a20666163657420686173206e6f20636f64650000000000006044820152606401610332565b60408301515160005b818114610c3257600085604001518281518110610ad857610ad8611aba565b6020908102919091018101517fffffffff0000000000000000000000000000000000000000000000000000000081166000908152918b9052604090912054909150606081901c15610b85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4469616d6f6e643a2073656c6563746f7220616c7265616479206164646564006044820152606401610332565b86517fffffffff00000000000000000000000000000000000000000000000000000000838116600081815260208e90526040902060609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168c1790925560058b901b60e090811692831c91831c199a909a161798819003610c1e5760038a901c600090815260028c0160205260408120999099555b896001019950505050806001019050610ab9565b509496939550929350505050565b805173ffffffffffffffffffffffffffffffffffffffff163b610cbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4469616d6f6e643a20666163657420686173206e6f20636f64650000000000006044820152606401610332565b60408101515160005b81811461013257600083604001518281518110610ce757610ce7611aba565b6020908102919091018101517fffffffff000000000000000000000000000000000000000000000000000000008116600090815291879052604090912054909150606081901c80610d94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a2073656c6563746f72206e6f7420666f756e6400000000006044820152606401610332565b3073ffffffffffffffffffffffffffffffffffffffff821603610e13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a20696d6d757461626c652066756e6374696f6e00000000006044820152606401610332565b856000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610eac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a206964656e746963616c2066756e6374696f6e00000000006044820152606401610332565b5084517fffffffff0000000000000000000000000000000000000000000000000000000092909216600090815260208790526040902060609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff91909116179055600101610cc8565b8051600090819073ffffffffffffffffffffffffffffffffffffffff1615610faa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4469616d6f6e643a206e6f6e2d7a65726f2061646472657373206661636574006044820152606401610332565b600385901c6007861660005b856040015151811461131457600086604001518281518110610fda57610fda611aba565b6020908102919091018101517fffffffff0000000000000000000000000000000000000000000000000000000081166000908152918c9052604090912054909150606081901c611086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a2073656c6563746f72206e6f7420666f756e6400000000006044820152606401610332565b30606082901c036110f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a20696d6d757461626c652066756e6374696f6e00000000006044820152606401610332565b600089900361113d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909401600081815260028c01602052604090205498509360079350611163565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909301925b600584901b89901b6000807fffffffff0000000000000000000000000000000000000000000000000000000080841690861614611202577fffffffff000000000000000000000000000000000000000000000000000000008316600090815260208f90526040902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff86161790555b50507fffffffff000000000000000000000000000000000000000000000000000000008316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821461129557600082815260028f016020526040902080547fffffffff0000000000000000000000000000000000000000000000000000000080841c19909116908516831c1790556112e6565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b8660000361130457600088815260028f01602052604081208190559b505b5050505050806001019050610fb6565b5060039190911b1796939550929350505050565b60008083601f84011261133a57600080fd5b50813567ffffffffffffffff81111561135257600080fd5b6020830191508360208260051b850101111561136d57600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461139857600080fd5b919050565b6000806000806000606086880312156113b557600080fd5b853567ffffffffffffffff808211156113cd57600080fd5b6113d989838a01611328565b90975095508591506113ed60208901611374565b9450604088013591508082111561140357600080fd5b818801915088601f83011261141757600080fd5b81358181111561142657600080fd5b89602082850101111561143857600080fd5b9699959850939650602001949392505050565b6000806000806040858703121561146157600080fd5b843567ffffffffffffffff8082111561147957600080fd5b61148588838901611328565b9096509450602087013591508082111561149e57600080fd5b506114ab87828801611328565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611509576115096114b7565b60405290565b6040805190810167ffffffffffffffff81118282101715611509576115096114b7565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611579576115796114b7565b604052919050565b600067ffffffffffffffff82111561159b5761159b6114b7565b5060051b60200190565b60006115b86115b384611581565b611532565b83815260208082019190600586811b8601368111156115d657600080fd5b865b818110156116f457803567ffffffffffffffff808211156115f95760008081fd5b818a0191506060823603121561160f5760008081fd5b6116176114e6565b61162083611374565b815286830135600381106116345760008081fd5b818801526040838101358381111561164c5760008081fd5b939093019236601f85011261166357600092508283fd5b833592506116736115b384611581565b83815292871b840188019288810190368511156116905760008081fd5b948901945b848610156116dd5785357fffffffff00000000000000000000000000000000000000000000000000000000811681146116ce5760008081fd5b82529489019490890190611695565b9183019190915250885250509483019483016115d8565b5092979650505050505050565b600061170f6115b384611581565b80848252602080830192508560051b85013681111561172d57600080fd5b855b8181101561182157803567ffffffffffffffff808211156117505760008081fd5b8189019150604082360312156117665760008081fd5b61176e61150f565b61177783611374565b8152858301358281111561178b5760008081fd5b9290920191601f36818501126117a15760008081fd5b8335838111156117b3576117b36114b7565b6117e2887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08484011601611532565b935080845236888287010111156117fb57600091508182fd5b80888601898601376000908401880152508086019190915286525093820193820161172f565b50919695505050505050565b60006020828403121561183f57600080fd5b8151801515811461184f57600080fd5b9392505050565b818103818111156102ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081518084526020808501808196508360051b8101915082860160005b858110156119c15782840389528151606080860173ffffffffffffffffffffffffffffffffffffffff83511687528783015160038110611946577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b87890152604092830151928701919091528151908190529086019060808601906000905b808210156119ac5783517fffffffff0000000000000000000000000000000000000000000000000000000016835292880192918801916001919091019061196a565b505099860199945050908401906001016118dd565b5091979650505050505050565b60005b838110156119e95781810151838201526020016119d1565b50506000910152565b606081526000611a0560608301866118bf565b73ffffffffffffffffffffffffffffffffffffffff8516602084015282810360408401528351808252611a3f8160208401602088016119ce565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160160200195945050505050565b606081526000611a8460608301856118bf565b73ffffffffffffffffffffffffffffffffffffffff84166020840152828103604084015260008152602081019150509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008251611afb8184602087016119ce565b919091019291505056fea2646970667358221220123979ef7608d3423ed6221da074ba08579616c71cb1e810cc9be9b6d77995d064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631f931c1c1461004657806395bce6661461005b578063b2afc5b514610063575b600080fd5b61005961005436600461139d565b610076565b005b6100596100ec565b61005961007136600461144b565b610101565b61008f610081610138565b61008961027f565b906102b3565b6100e561009c85876115a5565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506100dd925061033f915050565b92919061036d565b5050505050565b6100f7610081610138565b6100ff6103bc565b565b61010c610081610138565b61013261011984866115a5565b6101238385611701565b61012b61033f565b9190610423565b50505050565b6000333214806101485750601836105b1561015257503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061026e57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa15801561024a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026e919061182d565b1561027857919050565b3391505090565b6000806102ad60017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104611856565b92915050565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f50726f787941646d696e3a206e6f74207468652061646d696e0000000000000060448201526064015b60405180910390fd5b5050565b6000806102ad60017f65d27473a5b05206737961f69a3b7a55316862d7a6ef82b3f5455fe92fab43e3611856565b61037784846104bf565b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516103aa939291906119f2565b60405180910390a16101328282610667565b60006103c66108d4565b90506103f4817f1f931c1c000000000000000000000000000000000000000000000000000000006001610902565b610420817fb2afc5b5000000000000000000000000000000000000000000000000000000006001610902565b50565b61042d83836104bf565b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67382600060405161045f929190611a71565b60405180910390a1805160005b8181146100e5576104b783828151811061048857610488611aba565b6020026020010151600001518483815181106104a6576104a6611aba565b602002602001015160200151610667565b60010161046c565b600182015461ffff8116908190600090600716156104ef5750600381901c60009081526002850160205260409020545b835160005b81811461060457600086828151811061050f5761050f611aba565b60200260200101519050600081602001519050816040015151600003610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4469616d6f6e643a206e6f2066756e6374696f6e2073656c6563746f727300006044820152606401610332565b60008160028111156105a5576105a5611890565b036105c0576105b689878785610a0e565b90965094506105fa565b60018160028111156105d4576105d4611890565b036105e8576105e38983610c40565b6105fa565b6105f489878785610f26565b90965094505b50506001016104f4565b5083831461063d576001860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff85161790555b600783161561065f57600383901c600090815260028701602052604090208290555b505050505050565b73ffffffffffffffffffffffffffffffffffffffff82166106eb5780511561033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4469616d6f6e643a2064617461206973206e6f7420656d7074790000000000006044820152606401610332565b8051600003610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4469616d6f6e643a206461746120697320656d707479000000000000000000006044820152606401610332565b73ffffffffffffffffffffffffffffffffffffffff821630146107f15773ffffffffffffffffffffffffffffffffffffffff82163b6107f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a2074617267657420686173206e6f20636f646500000000006044820152606401610332565b6000808373ffffffffffffffffffffffffffffffffffffffff16836040516108199190611ae9565b600060405180830381855af49150503d8060008114610854576040519150601f19603f3d011682016040523d82523d6000602084013e610859565b606091505b5091509150816101325780518015610872578082602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a20696e69742063616c6c20726576657274656400000000006044820152606401610332565b6000806102ad60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611856565b7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016109aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c7565006044820152606401610332565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b8051600090819073ffffffffffffffffffffffffffffffffffffffff163014610ab057825173ffffffffffffffffffffffffffffffffffffffff163b610ab0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4469616d6f6e643a20666163657420686173206e6f20636f64650000000000006044820152606401610332565b60408301515160005b818114610c3257600085604001518281518110610ad857610ad8611aba565b6020908102919091018101517fffffffff0000000000000000000000000000000000000000000000000000000081166000908152918b9052604090912054909150606081901c15610b85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4469616d6f6e643a2073656c6563746f7220616c7265616479206164646564006044820152606401610332565b86517fffffffff00000000000000000000000000000000000000000000000000000000838116600081815260208e90526040902060609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168c1790925560058b901b60e090811692831c91831c199a909a161798819003610c1e5760038a901c600090815260028c0160205260408120999099555b896001019950505050806001019050610ab9565b509496939550929350505050565b805173ffffffffffffffffffffffffffffffffffffffff163b610cbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4469616d6f6e643a20666163657420686173206e6f20636f64650000000000006044820152606401610332565b60408101515160005b81811461013257600083604001518281518110610ce757610ce7611aba565b6020908102919091018101517fffffffff000000000000000000000000000000000000000000000000000000008116600090815291879052604090912054909150606081901c80610d94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a2073656c6563746f72206e6f7420666f756e6400000000006044820152606401610332565b3073ffffffffffffffffffffffffffffffffffffffff821603610e13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a20696d6d757461626c652066756e6374696f6e00000000006044820152606401610332565b856000015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610eac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a206964656e746963616c2066756e6374696f6e00000000006044820152606401610332565b5084517fffffffff0000000000000000000000000000000000000000000000000000000092909216600090815260208790526040902060609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff91909116179055600101610cc8565b8051600090819073ffffffffffffffffffffffffffffffffffffffff1615610faa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4469616d6f6e643a206e6f6e2d7a65726f2061646472657373206661636574006044820152606401610332565b600385901c6007861660005b856040015151811461131457600086604001518281518110610fda57610fda611aba565b6020908102919091018101517fffffffff0000000000000000000000000000000000000000000000000000000081166000908152918c9052604090912054909150606081901c611086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a2073656c6563746f72206e6f7420666f756e6400000000006044820152606401610332565b30606082901c036110f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4469616d6f6e643a20696d6d757461626c652066756e6374696f6e00000000006044820152606401610332565b600089900361113d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909401600081815260028c01602052604090205498509360079350611163565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909301925b600584901b89901b6000807fffffffff0000000000000000000000000000000000000000000000000000000080841690861614611202577fffffffff000000000000000000000000000000000000000000000000000000008316600090815260208f90526040902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff86161790555b50507fffffffff000000000000000000000000000000000000000000000000000000008316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821461129557600082815260028f016020526040902080547fffffffff0000000000000000000000000000000000000000000000000000000080841c19909116908516831c1790556112e6565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198d16179b505b8660000361130457600088815260028f01602052604081208190559b505b5050505050806001019050610fb6565b5060039190911b1796939550929350505050565b60008083601f84011261133a57600080fd5b50813567ffffffffffffffff81111561135257600080fd5b6020830191508360208260051b850101111561136d57600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461139857600080fd5b919050565b6000806000806000606086880312156113b557600080fd5b853567ffffffffffffffff808211156113cd57600080fd5b6113d989838a01611328565b90975095508591506113ed60208901611374565b9450604088013591508082111561140357600080fd5b818801915088601f83011261141757600080fd5b81358181111561142657600080fd5b89602082850101111561143857600080fd5b9699959850939650602001949392505050565b6000806000806040858703121561146157600080fd5b843567ffffffffffffffff8082111561147957600080fd5b61148588838901611328565b9096509450602087013591508082111561149e57600080fd5b506114ab87828801611328565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611509576115096114b7565b60405290565b6040805190810167ffffffffffffffff81118282101715611509576115096114b7565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611579576115796114b7565b604052919050565b600067ffffffffffffffff82111561159b5761159b6114b7565b5060051b60200190565b60006115b86115b384611581565b611532565b83815260208082019190600586811b8601368111156115d657600080fd5b865b818110156116f457803567ffffffffffffffff808211156115f95760008081fd5b818a0191506060823603121561160f5760008081fd5b6116176114e6565b61162083611374565b815286830135600381106116345760008081fd5b818801526040838101358381111561164c5760008081fd5b939093019236601f85011261166357600092508283fd5b833592506116736115b384611581565b83815292871b840188019288810190368511156116905760008081fd5b948901945b848610156116dd5785357fffffffff00000000000000000000000000000000000000000000000000000000811681146116ce5760008081fd5b82529489019490890190611695565b9183019190915250885250509483019483016115d8565b5092979650505050505050565b600061170f6115b384611581565b80848252602080830192508560051b85013681111561172d57600080fd5b855b8181101561182157803567ffffffffffffffff808211156117505760008081fd5b8189019150604082360312156117665760008081fd5b61176e61150f565b61177783611374565b8152858301358281111561178b5760008081fd5b9290920191601f36818501126117a15760008081fd5b8335838111156117b3576117b36114b7565b6117e2887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08484011601611532565b935080845236888287010111156117fb57600091508182fd5b80888601898601376000908401880152508086019190915286525093820193820161172f565b50919695505050505050565b60006020828403121561183f57600080fd5b8151801515811461184f57600080fd5b9392505050565b818103818111156102ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081518084526020808501808196508360051b8101915082860160005b858110156119c15782840389528151606080860173ffffffffffffffffffffffffffffffffffffffff83511687528783015160038110611946577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b87890152604092830151928701919091528151908190529086019060808601906000905b808210156119ac5783517fffffffff0000000000000000000000000000000000000000000000000000000016835292880192918801916001919091019061196a565b505099860199945050908401906001016118dd565b5091979650505050505050565b60005b838110156119e95781810151838201526020016119d1565b50506000910152565b606081526000611a0560608301866118bf565b73ffffffffffffffffffffffffffffffffffffffff8516602084015282810360408401528351808252611a3f8160208401602088016119ce565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160160200195945050505050565b606081526000611a8460608301856118bf565b73ffffffffffffffffffffffffffffffffffffffff84166020840152828103604084015260008152602081019150509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008251611afb8184602087016119ce565b919091019291505056fea2646970667358221220123979ef7608d3423ed6221da074ba08579616c71cb1e810cc9be9b6d77995d064736f6c63430008110033",
  "devdoc": {
    "details": "See https://eips.ethereum.org/EIPS/eip-2535Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.",
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],(address,bytes)[])": {
        "details": "Reverts if the sender is not the proxy admin.",
        "params": {
          "cuts": "The list of facet addresses, actions and function selectors to apply to the diamond.",
          "initializations": "The list of addresses and encoded function calls to execute with delegatecall."
        }
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "details": "Reverts if the sender is not the proxy admin.",
        "params": {
          "cuts": "The list of facet addresses, actions and function selectors to apply to the diamond.",
          "data": "The encoded function call to execute on `target`.",
          "target": "The address of the contract to execute `data` on."
        }
      },
      "initDiamondCutStorage()": {
        "details": "Reverts if the sender is not the proxy admin."
      }
    },
    "title": "Diamond Cut (facet version).",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DiamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Emitted when at least a cut action is operated on the diamond."
      }
    },
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],(address,bytes)[])": {
        "notice": "Add/replace/remove facet functions and execute a batch of functions with delegatecall."
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove facet functions and optionally execute a function with delegatecall."
      },
      "initDiamondCutStorage()": {
        "notice": "Marks the following ERC165 interface(s) as supported: DiamondCut, DiamondCutBatchInit."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}