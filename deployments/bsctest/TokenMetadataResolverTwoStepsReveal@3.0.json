{
  "address": "0xE9B5a855c448893eB424175B6B4834c7b31C980e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "BaseMetadataURIsAlreadySet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "BaseMetadataURIsNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "preRevealBaseMetadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "postRevealBaseMetadataURI",
          "type": "string"
        }
      ],
      "name": "EmptyBaseMetadataURIs",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotTargetContractOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "TokensAlreadyRevealed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "preRevealBaseMetadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "postRevealBaseMetadataURI",
          "type": "string"
        }
      ],
      "name": "BaseMetadataURIsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "TokensRevealed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTokenRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "postRevealBaseMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "preRevealBaseMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "revealTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "preRevealBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "postRevealBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseMetadataURIs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x813ceb291c28d3ec7da608c13c6616ec4ba7eb2dcf2d14bc3f05bc1086e1c272",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB553C4B21966123d7f8c02Ca6909c110260052E8",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "805643",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa4cbeb8735cfcecbca0a6b4205cf43fc3d71f95bee977f3a662fca52a2f2704f",
    "transactionHash": "0x813ceb291c28d3ec7da608c13c6616ec4ba7eb2dcf2d14bc3f05bc1086e1c272",
    "logs": [],
    "blockNumber": 33090427,
    "cumulativeGasUsed": "1490275",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f30d10569f14710618ffc171888939bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"BaseMetadataURIsAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"BaseMetadataURIsNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"preRevealBaseMetadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postRevealBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"EmptyBaseMetadataURIs\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotTargetContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"TokensAlreadyRevealed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"preRevealBaseMetadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"postRevealBaseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURIsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"TokensRevealed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"postRevealBaseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preRevealBaseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"revealTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"preRevealBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postRevealBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"BaseMetadataURIsAlreadySet(address)\":[{\"params\":{\"tokenContract\":\"The token contract on which the base metadata URIs are already set.\"}}],\"BaseMetadataURIsNotSet(address)\":[{\"params\":{\"tokenContract\":\"The token contract on which the base metadata URIs are not set.\"}}],\"EmptyBaseMetadataURIs(address,string,string)\":[{\"params\":{\"postRevealBaseMetadataURI\":\"The post-reveal base metadata URI.\",\"preRevealBaseMetadataURI\":\"The pre-reveal base metadata URI.\",\"tokenContract\":\"The token contract on which the base metadata URIs are set.\"}}],\"NotTargetContractOwner(address,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"targetContract\":\"The contract that was checked.\"}}],\"TokensAlreadyRevealed(address)\":[{\"params\":{\"tokenContract\":\"The token contract which is already revealed.\"}}]},\"events\":{\"BaseMetadataURIsSet(address,string,string)\":{\"params\":{\"postRevealBaseMetadataURI\":\"The post-reveal base metadata URI.\",\"preRevealBaseMetadataURI\":\"The pre-reveal base metadata URI.\",\"tokenContract\":\"The token contract on which the base metadata URI was set.\"}},\"TokensRevealed(address)\":{\"params\":{\"tokenContract\":\"The token contract on which the tokens are revealed.\"}}},\"kind\":\"dev\",\"methods\":{\"revealTokens(address)\":{\"details\":\"Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.Reverts with {BaseMetadataURIsNotSet} if the URIs have not been set yet.Reverts with {TokensAlreadyRevealed} if this function has already been called before.\",\"params\":{\"tokenContract\":\"The token contract on which to set the base metadata URI.\"}},\"setBaseMetadataURIs(address,string,string)\":{\"details\":\"Note: This function shouldReverts with {EmptyBaseMetadataURIs} if one of the URIs is empty.Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.Reverts with {BaseMetadataURIsAlreadySet} if the URIs have been previously set.Emits a {BaseMetadataURIsSet} event.\",\"params\":{\"postRevealBaseURI\":\"The post-reveal base metadata URI.\",\"preRevealBaseURI\":\"The pre-reveal base metadata URI.\",\"tokenContract\":\"The token contract on which to set the base metadata URI.\"}},\"tokenMetadataURI(address,uint256)\":{\"params\":{\"tokenContract\":\"The token contract for which to retrieve the token URI.\",\"tokenId\":\"The token identifier.\"},\"returns\":{\"tokenURI\":\"The token metadata URI as the concatenation of the base metadata URI and the token identifier.\"}}},\"title\":\"TokenMetadataResolverTwoStepsReveal.\",\"version\":1},\"userdoc\":{\"errors\":{\"BaseMetadataURIsAlreadySet(address)\":[{\"notice\":\"Thrown when trying to set the base metadata URIs but they are already set.\"}],\"BaseMetadataURIsNotSet(address)\":[{\"notice\":\"Thrown when trying to reveal tokens but the base metadata URIs are not set.\"}],\"EmptyBaseMetadataURIs(address,string,string)\":[{\"notice\":\"Thrown when trying to set the base metadata URIs but one of them is empty.\"}],\"NotTargetContractOwner(address,address)\":[{\"notice\":\"Thrown when an account is not the target contract owner but is required to.\"}],\"TokensAlreadyRevealed(address)\":[{\"notice\":\"Emitted when trying to reveal a token which is already revealed.\"}]},\"events\":{\"BaseMetadataURIsSet(address,string,string)\":{\"notice\":\"Emitted when the base metadata URI is set.\"},\"TokensRevealed(address)\":{\"notice\":\"Emitted when the tokens are revealed.\"}},\"kind\":\"user\",\"methods\":{\"revealTokens(address)\":{\"notice\":\"Switches the base metadata URI to the post-reveal URI.\"},\"setBaseMetadataURIs(address,string,string)\":{\"notice\":\"Sets the base metadata URIs for both pre-reveal and post-reveal.\"},\"tokenMetadataURI(address,uint256)\":{\"notice\":\"Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identifier.\"}},\"notice\":\"Token Metadata Resolver which uses two base metadata URIs, one for pre-reveal and one for post-reveal.At reveal phase, the base metadat URI will be switched from pre-reveal to post-reveal.Only the owner of the target token contract can set the base metadata URI for this target contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/metadata/TokenMetadataResolverTwoStepsReveal.sol\":\"TokenMetadataResolverTwoStepsReveal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"contracts/token/metadata/TokenMetadataResolverTwoStepsReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {ITokenMetadataResolver} from \\\"./interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title TokenMetadataResolverTwoStepsReveal.\\n/// @notice Token Metadata Resolver which uses two base metadata URIs, one for pre-reveal and one for post-reveal.\\n/// @notice At reveal phase, the base metadat URI will be switched from pre-reveal to post-reveal.\\n/// @notice Only the owner of the target token contract can set the base metadata URI for this target contract.\\ncontract TokenMetadataResolverTwoStepsReveal is ITokenMetadataResolver {\\n    using ContractOwnershipStorage for address;\\n    using Strings for uint256;\\n\\n    mapping(address => bool) public isTokenRevealed;\\n    mapping(address => string) public preRevealBaseMetadataURI;\\n    mapping(address => string) public postRevealBaseMetadataURI;\\n\\n    /// @notice Emitted when the base metadata URI is set.\\n    /// @param tokenContract The token contract on which the base metadata URI was set.\\n    /// @param preRevealBaseMetadataURI The pre-reveal base metadata URI.\\n    /// @param postRevealBaseMetadataURI The post-reveal base metadata URI.\\n    event BaseMetadataURIsSet(address tokenContract, string preRevealBaseMetadataURI, string postRevealBaseMetadataURI);\\n\\n    /// @notice Emitted when the tokens are revealed.\\n    /// @param tokenContract The token contract on which the tokens are revealed.\\n    event TokensRevealed(address tokenContract);\\n\\n    /// @notice Thrown when trying to set the base metadata URIs but one of them is empty.\\n    /// @param tokenContract The token contract on which the base metadata URIs are set.\\n    /// @param preRevealBaseMetadataURI The pre-reveal base metadata URI.\\n    /// @param postRevealBaseMetadataURI The post-reveal base metadata URI.\\n    error EmptyBaseMetadataURIs(address tokenContract, string preRevealBaseMetadataURI, string postRevealBaseMetadataURI);\\n\\n    /// @notice Thrown when trying to set the base metadata URIs but they are already set.\\n    /// @param tokenContract The token contract on which the base metadata URIs are already set.\\n    error BaseMetadataURIsAlreadySet(address tokenContract);\\n\\n    /// @notice Thrown when trying to reveal tokens but the base metadata URIs are not set.\\n    /// @param tokenContract The token contract on which the base metadata URIs are not set.\\n    error BaseMetadataURIsNotSet(address tokenContract);\\n\\n    /// @notice Emitted when trying to reveal a token which is already revealed.\\n    /// @param tokenContract The token contract which is already revealed.\\n    error TokensAlreadyRevealed(address tokenContract);\\n\\n    /// @notice Sets the base metadata URIs for both pre-reveal and post-reveal.\\n    /// @dev Note: This function should\\n    /// @dev Reverts with {EmptyBaseMetadataURIs} if one of the URIs is empty.\\n    /// @dev Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.\\n    /// @dev Reverts with {BaseMetadataURIsAlreadySet} if the URIs have been previously set.\\n    /// @dev Emits a {BaseMetadataURIsSet} event.\\n    /// @param tokenContract The token contract on which to set the base metadata URI.\\n    /// @param preRevealBaseURI The pre-reveal base metadata URI.\\n    /// @param postRevealBaseURI The post-reveal base metadata URI.\\n    function setBaseMetadataURIs(address tokenContract, string calldata preRevealBaseURI, string calldata postRevealBaseURI) external {\\n        if (bytes(preRevealBaseURI).length == 0 || bytes(postRevealBaseURI).length == 0)\\n            revert EmptyBaseMetadataURIs(tokenContract, preRevealBaseURI, postRevealBaseURI);\\n        tokenContract.enforceIsTargetContractOwner(msg.sender);\\n        if (bytes(preRevealBaseMetadataURI[tokenContract]).length != 0) revert BaseMetadataURIsAlreadySet(tokenContract);\\n        preRevealBaseMetadataURI[tokenContract] = preRevealBaseURI;\\n        postRevealBaseMetadataURI[tokenContract] = postRevealBaseURI;\\n        emit BaseMetadataURIsSet(tokenContract, preRevealBaseURI, postRevealBaseURI);\\n    }\\n\\n    /// @notice Switches the base metadata URI to the post-reveal URI.\\n    /// @dev Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.\\n    /// @dev Reverts with {BaseMetadataURIsNotSet} if the URIs have not been set yet.\\n    /// @dev Reverts with {TokensAlreadyRevealed} if this function has already been called before.\\n    /// @param tokenContract The token contract on which to set the base metadata URI.\\n    function revealTokens(address tokenContract) external {\\n        tokenContract.enforceIsTargetContractOwner(msg.sender);\\n        if (bytes(preRevealBaseMetadataURI[tokenContract]).length == 0) revert BaseMetadataURIsNotSet(tokenContract);\\n        if (isTokenRevealed[tokenContract]) revert TokensAlreadyRevealed(tokenContract);\\n        isTokenRevealed[tokenContract] = true;\\n        emit TokensRevealed(tokenContract);\\n    }\\n\\n    /// @notice Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identifier.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI as the concatenation of the base metadata URI and the token identifier.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI) {\\n        if (isTokenRevealed[tokenContract]) {\\n            return string(abi.encodePacked(postRevealBaseMetadataURI[tokenContract], tokenId.toString()));\\n        } else {\\n            return string(abi.encodePacked(preRevealBaseMetadataURI[tokenContract], tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3bfe27d1ea5d99241ed8a2b2a655252b4874cea554c0725f7be68900e6c4fff8\",\"license\":\"MIT\"},\"contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x4f099041c13749a385a989d3c0228166c3d062f1effe9e6d4faf0395aefb2520\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610da2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063ebb4462211610050578063ebb44622146100c8578063f4f0ec48146100fb578063f724dad71461010e57600080fd5b80636b0fce131461007757806378fa47e1146100a0578063da0455dd146100b3575b600080fd5b61008a610085366004610895565b610121565b60405161009791906108dd565b60405180910390f35b61008a6100ae366004610895565b6101bb565b6100c66100c1366004610895565b6101d4565b005b6100eb6100d6366004610895565b60006020819052908152604090205460ff1681565b6040519015158152602001610097565b6100c6610109366004610977565b610377565b61008a61011c3660046109fa565b61050c565b6002602052600090815260409020805461013a90610a26565b80601f016020809104026020016040519081016040528092919081815260200182805461016690610a26565b80156101b35780601f10610188576101008083540402835291602001916101b3565b820191906000526020600020905b81548152906001019060200180831161019657829003601f168201915b505050505081565b6001602052600090815260409020805461013a90610a26565b6101f473ffffffffffffffffffffffffffffffffffffffff8216336105c6565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260409020805461022490610a26565b905060000361027c576040517f5351876700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604090205460ff16156102f4576040517fd2a6a91e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610273565b73ffffffffffffffffffffffffffffffffffffffff81166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fdc874c2d91eb868001590817e44167423d07b9ec4c38e67abdffd82668436275910160405180910390a150565b821580610382575080155b156103c35784848484846040517fdcacb1ae000000000000000000000000000000000000000000000000000000008152600401610273959493929190610ac2565b6103e373ffffffffffffffffffffffffffffffffffffffff8616336105c6565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160205260409020805461041390610a26565b159050610464576040517f4def256f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152602401610273565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160205260409020610494848683610b8f565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604090206104c5828483610b8f565b507f489321785c6059b2a055d3a95981b8a5167c0e01c1a19ad023e0178f0e18000485858585856040516104fd959493929190610ac2565b60405180910390a15050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205460609060ff16156105925773ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902061056b8361062a565b60405160200161057c929190610caa565b60405160208183030381529060405290506105c0565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902061056b8361062a565b92915050565b6105d082826106e8565b610626576040517f29b9b08b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015282166024820152604401610273565b5050565b606060006106378361078e565b600101905060008167ffffffffffffffff81111561065757610657610b11565b6040519080825280601f01601f191660200182016040528015610681576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461068b57509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190610d4f565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106107d7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610803576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061082157662386f26fc10000830492506010015b6305f5e1008310610839576305f5e100830492506008015b612710831061084d57612710830492506004015b6064831061085f576064830492506002015b600a83106105c05760010192915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461089257600080fd5b50565b6000602082840312156108a757600080fd5b81356108b281610870565b9392505050565b60005b838110156108d45781810151838201526020016108bc565b50506000910152565b60208152600082518060208401526108fc8160408501602087016108b9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261094057600080fd5b50813567ffffffffffffffff81111561095857600080fd5b60208301915083602082850101111561097057600080fd5b9250929050565b60008060008060006060868803121561098f57600080fd5b853561099a81610870565b9450602086013567ffffffffffffffff808211156109b757600080fd5b6109c389838a0161092e565b909650945060408801359150808211156109dc57600080fd5b506109e98882890161092e565b969995985093965092949392505050565b60008060408385031215610a0d57600080fd5b8235610a1881610870565b946020939093013593505050565b600181811c90821680610a3a57607f821691505b602082108103610a73577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff86168152606060208201526000610af2606083018688610a79565b8281036040840152610b05818587610a79565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610b8a57600081815260208120601f850160051c81016020861015610b675750805b601f850160051c820191505b81811015610b8657828155600101610b73565b5050505b505050565b67ffffffffffffffff831115610ba757610ba7610b11565b610bbb83610bb58354610a26565b83610b40565b6000601f841160018114610c0d5760008515610bd75750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610ca3565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015610c5c5786850135825560209485019460019092019101610c3c565b5086821015610c97577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000808454610cb881610a26565b60018281168015610cd05760018114610d0357610d32565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450610d32565b8860005260208060002060005b85811015610d295781548a820152908401908201610d10565b50505082870194505b505050508351610d468183602088016108b9565b01949350505050565b600060208284031215610d6157600080fd5b81516108b28161087056fea2646970667358221220ca849510aff2f1778f646a7828fc2817a20937409ddc2b4c9edc7a73c0d1d92d64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063ebb4462211610050578063ebb44622146100c8578063f4f0ec48146100fb578063f724dad71461010e57600080fd5b80636b0fce131461007757806378fa47e1146100a0578063da0455dd146100b3575b600080fd5b61008a610085366004610895565b610121565b60405161009791906108dd565b60405180910390f35b61008a6100ae366004610895565b6101bb565b6100c66100c1366004610895565b6101d4565b005b6100eb6100d6366004610895565b60006020819052908152604090205460ff1681565b6040519015158152602001610097565b6100c6610109366004610977565b610377565b61008a61011c3660046109fa565b61050c565b6002602052600090815260409020805461013a90610a26565b80601f016020809104026020016040519081016040528092919081815260200182805461016690610a26565b80156101b35780601f10610188576101008083540402835291602001916101b3565b820191906000526020600020905b81548152906001019060200180831161019657829003601f168201915b505050505081565b6001602052600090815260409020805461013a90610a26565b6101f473ffffffffffffffffffffffffffffffffffffffff8216336105c6565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260409020805461022490610a26565b905060000361027c576040517f5351876700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604090205460ff16156102f4576040517fd2a6a91e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610273565b73ffffffffffffffffffffffffffffffffffffffff81166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fdc874c2d91eb868001590817e44167423d07b9ec4c38e67abdffd82668436275910160405180910390a150565b821580610382575080155b156103c35784848484846040517fdcacb1ae000000000000000000000000000000000000000000000000000000008152600401610273959493929190610ac2565b6103e373ffffffffffffffffffffffffffffffffffffffff8616336105c6565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160205260409020805461041390610a26565b159050610464576040517f4def256f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152602401610273565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160205260409020610494848683610b8f565b5073ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604090206104c5828483610b8f565b507f489321785c6059b2a055d3a95981b8a5167c0e01c1a19ad023e0178f0e18000485858585856040516104fd959493929190610ac2565b60405180910390a15050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205460609060ff16156105925773ffffffffffffffffffffffffffffffffffffffff8316600090815260026020526040902061056b8361062a565b60405160200161057c929190610caa565b60405160208183030381529060405290506105c0565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902061056b8361062a565b92915050565b6105d082826106e8565b610626576040517f29b9b08b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015282166024820152604401610273565b5050565b606060006106378361078e565b600101905060008167ffffffffffffffff81111561065757610657610b11565b6040519080825280601f01601f191660200182016040528015610681576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461068b57509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190610d4f565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106107d7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610803576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061082157662386f26fc10000830492506010015b6305f5e1008310610839576305f5e100830492506008015b612710831061084d57612710830492506004015b6064831061085f576064830492506002015b600a83106105c05760010192915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461089257600080fd5b50565b6000602082840312156108a757600080fd5b81356108b281610870565b9392505050565b60005b838110156108d45781810151838201526020016108bc565b50506000910152565b60208152600082518060208401526108fc8160408501602087016108b9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261094057600080fd5b50813567ffffffffffffffff81111561095857600080fd5b60208301915083602082850101111561097057600080fd5b9250929050565b60008060008060006060868803121561098f57600080fd5b853561099a81610870565b9450602086013567ffffffffffffffff808211156109b757600080fd5b6109c389838a0161092e565b909650945060408801359150808211156109dc57600080fd5b506109e98882890161092e565b969995985093965092949392505050565b60008060408385031215610a0d57600080fd5b8235610a1881610870565b946020939093013593505050565b600181811c90821680610a3a57607f821691505b602082108103610a73577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff86168152606060208201526000610af2606083018688610a79565b8281036040840152610b05818587610a79565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610b8a57600081815260208120601f850160051c81016020861015610b675750805b601f850160051c820191505b81811015610b8657828155600101610b73565b5050505b505050565b67ffffffffffffffff831115610ba757610ba7610b11565b610bbb83610bb58354610a26565b83610b40565b6000601f841160018114610c0d5760008515610bd75750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610ca3565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015610c5c5786850135825560209485019460019092019101610c3c565b5086821015610c97577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000808454610cb881610a26565b60018281168015610cd05760018114610d0357610d32565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450610d32565b8860005260208060002060005b85811015610d295781548a820152908401908201610d10565b50505082870194505b505050508351610d468183602088016108b9565b01949350505050565b600060208284031215610d6157600080fd5b81516108b28161087056fea2646970667358221220ca849510aff2f1778f646a7828fc2817a20937409ddc2b4c9edc7a73c0d1d92d64736f6c63430008150033",
  "devdoc": {
    "errors": {
      "BaseMetadataURIsAlreadySet(address)": [
        {
          "params": {
            "tokenContract": "The token contract on which the base metadata URIs are already set."
          }
        }
      ],
      "BaseMetadataURIsNotSet(address)": [
        {
          "params": {
            "tokenContract": "The token contract on which the base metadata URIs are not set."
          }
        }
      ],
      "EmptyBaseMetadataURIs(address,string,string)": [
        {
          "params": {
            "postRevealBaseMetadataURI": "The post-reveal base metadata URI.",
            "preRevealBaseMetadataURI": "The pre-reveal base metadata URI.",
            "tokenContract": "The token contract on which the base metadata URIs are set."
          }
        }
      ],
      "NotTargetContractOwner(address,address)": [
        {
          "params": {
            "account": "The account that was checked.",
            "targetContract": "The contract that was checked."
          }
        }
      ],
      "TokensAlreadyRevealed(address)": [
        {
          "params": {
            "tokenContract": "The token contract which is already revealed."
          }
        }
      ]
    },
    "events": {
      "BaseMetadataURIsSet(address,string,string)": {
        "params": {
          "postRevealBaseMetadataURI": "The post-reveal base metadata URI.",
          "preRevealBaseMetadataURI": "The pre-reveal base metadata URI.",
          "tokenContract": "The token contract on which the base metadata URI was set."
        }
      },
      "TokensRevealed(address)": {
        "params": {
          "tokenContract": "The token contract on which the tokens are revealed."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "revealTokens(address)": {
        "details": "Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.Reverts with {BaseMetadataURIsNotSet} if the URIs have not been set yet.Reverts with {TokensAlreadyRevealed} if this function has already been called before.",
        "params": {
          "tokenContract": "The token contract on which to set the base metadata URI."
        }
      },
      "setBaseMetadataURIs(address,string,string)": {
        "details": "Note: This function shouldReverts with {EmptyBaseMetadataURIs} if one of the URIs is empty.Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.Reverts with {BaseMetadataURIsAlreadySet} if the URIs have been previously set.Emits a {BaseMetadataURIsSet} event.",
        "params": {
          "postRevealBaseURI": "The post-reveal base metadata URI.",
          "preRevealBaseURI": "The pre-reveal base metadata URI.",
          "tokenContract": "The token contract on which to set the base metadata URI."
        }
      },
      "tokenMetadataURI(address,uint256)": {
        "params": {
          "tokenContract": "The token contract for which to retrieve the token URI.",
          "tokenId": "The token identifier."
        },
        "returns": {
          "tokenURI": "The token metadata URI as the concatenation of the base metadata URI and the token identifier."
        }
      }
    },
    "title": "TokenMetadataResolverTwoStepsReveal.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "BaseMetadataURIsAlreadySet(address)": [
        {
          "notice": "Thrown when trying to set the base metadata URIs but they are already set."
        }
      ],
      "BaseMetadataURIsNotSet(address)": [
        {
          "notice": "Thrown when trying to reveal tokens but the base metadata URIs are not set."
        }
      ],
      "EmptyBaseMetadataURIs(address,string,string)": [
        {
          "notice": "Thrown when trying to set the base metadata URIs but one of them is empty."
        }
      ],
      "NotTargetContractOwner(address,address)": [
        {
          "notice": "Thrown when an account is not the target contract owner but is required to."
        }
      ],
      "TokensAlreadyRevealed(address)": [
        {
          "notice": "Emitted when trying to reveal a token which is already revealed."
        }
      ]
    },
    "events": {
      "BaseMetadataURIsSet(address,string,string)": {
        "notice": "Emitted when the base metadata URI is set."
      },
      "TokensRevealed(address)": {
        "notice": "Emitted when the tokens are revealed."
      }
    },
    "kind": "user",
    "methods": {
      "revealTokens(address)": {
        "notice": "Switches the base metadata URI to the post-reveal URI."
      },
      "setBaseMetadataURIs(address,string,string)": {
        "notice": "Sets the base metadata URIs for both pre-reveal and post-reveal."
      },
      "tokenMetadataURI(address,uint256)": {
        "notice": "Gets the token metadata URI for a token as the concatenation of the base metadata URI and the token identifier."
      }
    },
    "notice": "Token Metadata Resolver which uses two base metadata URIs, one for pre-reveal and one for post-reveal.At reveal phase, the base metadat URI will be switched from pre-reveal to post-reveal.Only the owner of the target token contract can set the base metadata URI for this target contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26740,
        "contract": "contracts/token/metadata/TokenMetadataResolverTwoStepsReveal.sol:TokenMetadataResolverTwoStepsReveal",
        "label": "isTokenRevealed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 26744,
        "contract": "contracts/token/metadata/TokenMetadataResolverTwoStepsReveal.sol:TokenMetadataResolverTwoStepsReveal",
        "label": "preRevealBaseMetadataURI",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 26748,
        "contract": "contracts/token/metadata/TokenMetadataResolverTwoStepsReveal.sol:TokenMetadataResolverTwoStepsReveal",
        "label": "postRevealBaseMetadataURI",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}