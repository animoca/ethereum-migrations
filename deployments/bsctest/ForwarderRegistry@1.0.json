{
  "address": "0x3f547F87251710F70109Ae0409d461b270709693",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "ForwarderNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEIP1271Signature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongSigner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "ForwarderApproval",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "isEIP1271Signature",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveAndForward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isApprovedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "removeForwarderApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "isEIP1271Signature",
          "type": "bool"
        }
      ],
      "name": "setForwarderApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd67cb7f7a3feb0c64680fff613e44202fa7793bf577630512dc2e3028f0c71fb",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xF7e30493A9018Bd8f364ba0E83E3BD4DD5d6bB2b",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1045992",
    "logsBloom": "0x
    "blockHash": "0x83b2a45ef79f6c3584d741cbcfc31e242515a1cea9e37057ebc300a63835db03",
    "transactionHash": "0xd67cb7f7a3feb0c64680fff613e44202fa7793bf577630512dc2e3028f0c71fb",
    "logs": [],
    "blockNumber": 28608453,
    "cumulativeGasUsed": "1066992",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a6ab94751dde68b4d6125ac6f179d1ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"ForwarderNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEIP1271Signature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSigner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ForwarderApproval\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isEIP1271Signature\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndForward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"removeForwarderApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isEIP1271Signature\",\"type\":\"bool\"}],\"name\":\"setForwarderApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract should be deployed uniquely per network, in a non-upgradeable way.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"events\":{\"ForwarderApproval(address,address,bool,uint256)\":{\"params\":{\"approved\":\"True for an approval, false for a disapproval.\",\"forwarder\":\"The account approved or disapproved as forwarder.\",\"nonce\":\"The `sender`'s account nonce before the approval change.\",\"sender\":\"The account for which `forwarder` is approved or disapproved.\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"domainSeparator\":\"The EIP-712 domain separator.\"}},\"approveAndForward(bytes,bool,address,bytes)\":{\"details\":\"Reverts with {InvalidEIP1271Signature} if `isEIP1271Signature` is true and the signature is reported invalid by the `sender` contract.Reverts with {WrongSigner} if `isEIP1271Signature` is false and `sender` is not the actual signer.Emits a {ForwarderApproval} event.\",\"params\":{\"data\":\"The content of the call (the `sender` address will be appended to it according to EIP-2771).\",\"isEIP1271Signature\":\"True if `sender` is a contract that provides authorization via EIP-1271.\",\"signature\":\"Signature by `sender` for approving the forwarder.\",\"target\":\"The destination of the call (that will receive the meta-transaction).\"}},\"forward(address,bytes)\":{\"details\":\"Reverts with {ForwarderNotApproved} if the caller has not been previously approved as a forwarder by the sender.\",\"params\":{\"data\":\"The content of the call (the `sender` address will be appended to it according to EIP-2771).\",\"target\":\"The destination of the call (that will receive the meta-transaction).\"}},\"getNonce(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"nonce\":\"The current nonce for the `sender`/`forwarder` pair.\"}},\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"_0\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"removeForwarderApproval(address)\":{\"details\":\"Emits a {ForwarderApproval} event.\",\"params\":{\"forwarder\":\"The address of the forwarder to disapprove.\"}},\"setForwarderApproval(address,address,bool,bytes,bool)\":{\"details\":\"Reverts with {InvalidEIP1271Signature} if `isEIP1271Signature` is true and the signature is reported invalid by the `sender` contract.Reverts with {WrongSigner} if `isEIP1271Signature` is false and `sender` is not the actual signer.Emits a {ForwarderApproval} event.\",\"params\":{\"approved\":\"Whether to approve or disapprove the forwarder.\",\"forwarder\":\"The address of the forwarder to change the approval of.\",\"isEIP1271Signature\":\"True if `sender` is a contract that provides authorization via EIP-1271.\",\"sender\":\"The address which signed the approval of the approval.\",\"signature\":\"Signature by `sender` for approving forwarder.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"events\":{\"ForwarderApproval(address,address,bool,uint256)\":{\"notice\":\"Emitted when a forwarder is approved or disapproved.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the EIP-712 DOMAIN_SEPARATOR.\"},\"approveAndForward(bytes,bool,address,bytes)\":{\"notice\":\"Approves the forwarder and forwards the meta-transaction using EIP-2771.\"},\"forward(address,bytes)\":{\"notice\":\"Forwards the meta-transaction using EIP-2771.\"},\"getNonce(address,address)\":{\"notice\":\"Gets the current nonce for the sender/forwarder pair.\"},\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"removeForwarderApproval(address)\":{\"notice\":\"Disapproves a forwarder for the sender.\"},\"setForwarderApproval(address,address,bool,bytes,bool)\":{\"notice\":\"Approves or disapproves a forwarder using a signature.\"}},\"notice\":\"Users can allow specific EIP-2771 forwarders to forward meta-transactions on their behalf.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metatx/ForwarderRegistry.sol\":\"ForwarderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/cryptography/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Standard Signature Validation Method for Contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1271\\ninterface IERC1271 {\\n    /// @notice Returns whether the signature is valid for the data hash.\\n    /// @param hash The hash of the signed data.\\n    /// @param signature The signature for `hash`.\\n    /// @return magicValue `0x1626ba7e` (`bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")`) if the signature is valid, else any other value.\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x698bb759aa5d0c01bccc3970cf12ebd15a91ec43abb2b12fe6b7e177e636b18e\",\"license\":\"MIT\"},\"contracts/metatx/ForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC1271} from \\\"./../cryptography/interfaces/IERC1271.sol\\\";\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ERC2771Calldata} from \\\"./libraries/ERC2771Calldata.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @notice Users can allow specific EIP-2771 forwarders to forward meta-transactions on their behalf.\\n/// @dev This contract should be deployed uniquely per network, in a non-upgradeable way.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ncontract ForwarderRegistry is IForwarderRegistry, IERC2771 {\\n    using Address for address;\\n    using ECDSA for bytes32;\\n\\n    struct Forwarder {\\n        uint248 nonce;\\n        bool approved;\\n    }\\n\\n    error ForwarderNotApproved(address sender, address forwarder);\\n    error InvalidEIP1271Signature();\\n    error WrongSigner();\\n\\n    bytes4 private constant EIP1271_MAGICVALUE = 0x1626ba7e;\\n    bytes32 private constant EIP712_DOMAIN_NAME = keccak256(\\\"ForwarderRegistry\\\");\\n    bytes32 private constant APPROVAL_TYPEHASH = keccak256(\\\"ForwarderApproval(address sender,address forwarder,bool approved,uint256 nonce)\\\");\\n\\n    mapping(address => mapping(address => Forwarder)) private _forwarders;\\n\\n    uint256 private immutable _deploymentChainId;\\n    bytes32 private immutable _deploymentDomainSeparator;\\n\\n    /// @notice Emitted when a forwarder is approved or disapproved.\\n    /// @param sender The account for which `forwarder` is approved or disapproved.\\n    /// @param forwarder The account approved or disapproved as forwarder.\\n    /// @param approved True for an approval, false for a disapproval.\\n    /// @param nonce The `sender`'s account nonce before the approval change.\\n    event ForwarderApproval(address indexed sender, address indexed forwarder, bool approved, uint256 nonce);\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _deploymentChainId = chainId;\\n        _deploymentDomainSeparator = _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Disapproves a forwarder for the sender.\\n    /// @dev Emits a {ForwarderApproval} event.\\n    /// @param forwarder The address of the forwarder to disapprove.\\n    function removeForwarderApproval(address forwarder) external {\\n        Forwarder storage forwarderData = _forwarders[msg.sender][forwarder];\\n        _setForwarderApproval(forwarderData, msg.sender, forwarder, false, forwarderData.nonce);\\n    }\\n\\n    /// @notice Approves or disapproves a forwarder using a signature.\\n    /// @dev Reverts with {InvalidEIP1271Signature} if `isEIP1271Signature` is true and the signature is reported invalid by the `sender` contract.\\n    /// @dev Reverts with {WrongSigner} if `isEIP1271Signature` is false and `sender` is not the actual signer.\\n    /// @dev Emits a {ForwarderApproval} event.\\n    /// @param sender The address which signed the approval of the approval.\\n    /// @param forwarder The address of the forwarder to change the approval of.\\n    /// @param approved Whether to approve or disapprove the forwarder.\\n    /// @param signature Signature by `sender` for approving forwarder.\\n    /// @param isEIP1271Signature True if `sender` is a contract that provides authorization via EIP-1271.\\n    function setForwarderApproval(address sender, address forwarder, bool approved, bytes calldata signature, bool isEIP1271Signature) public {\\n        Forwarder storage forwarderData = _forwarders[sender][forwarder];\\n        uint256 nonce = forwarderData.nonce;\\n\\n        _requireValidSignature(sender, forwarder, approved, nonce, signature, isEIP1271Signature);\\n        _setForwarderApproval(forwarderData, sender, forwarder, approved, nonce);\\n    }\\n\\n    /// @notice Forwards the meta-transaction using EIP-2771.\\n    /// @dev Reverts with {ForwarderNotApproved} if the caller has not been previously approved as a forwarder by the sender.\\n    /// @param target The destination of the call (that will receive the meta-transaction).\\n    /// @param data The content of the call (the `sender` address will be appended to it according to EIP-2771).\\n    function forward(address target, bytes calldata data) external payable {\\n        address sender = ERC2771Calldata.msgSender();\\n        if (!_forwarders[sender][msg.sender].approved) revert ForwarderNotApproved(sender, msg.sender);\\n        target.functionCallWithValue(abi.encodePacked(data, sender), msg.value);\\n    }\\n\\n    /// @notice Approves the forwarder and forwards the meta-transaction using EIP-2771.\\n    /// @dev Reverts with {InvalidEIP1271Signature} if `isEIP1271Signature` is true and the signature is reported invalid by the `sender` contract.\\n    /// @dev Reverts with {WrongSigner} if `isEIP1271Signature` is false and `sender` is not the actual signer.\\n    /// @dev Emits a {ForwarderApproval} event.\\n    /// @param signature Signature by `sender` for approving the forwarder.\\n    /// @param isEIP1271Signature True if `sender` is a contract that provides authorization via EIP-1271.\\n    /// @param target The destination of the call (that will receive the meta-transaction).\\n    /// @param data The content of the call (the `sender` address will be appended to it according to EIP-2771).\\n    function approveAndForward(bytes calldata signature, bool isEIP1271Signature, address target, bytes calldata data) external payable {\\n        address sender = ERC2771Calldata.msgSender();\\n        setForwarderApproval(sender, msg.sender, true, signature, isEIP1271Signature);\\n        target.functionCallWithValue(abi.encodePacked(data, sender), msg.value);\\n    }\\n\\n    /// @notice Returns the EIP-712 DOMAIN_SEPARATOR.\\n    /// @return domainSeparator The EIP-712 domain separator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32 domainSeparator) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        // in case a fork happens, to support the chain that had to change its chainId, we compute the domain operator\\n        return chainId == _deploymentChainId ? _deploymentDomainSeparator : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Gets the current nonce for the sender/forwarder pair.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return nonce The current nonce for the `sender`/`forwarder` pair.\\n    function getNonce(address sender, address forwarder) external view returns (uint256 nonce) {\\n        return _forwarders[sender][forwarder].nonce;\\n    }\\n\\n    /// @inheritdoc IForwarderRegistry\\n    function isApprovedForwarder(address sender, address forwarder) external view override returns (bool) {\\n        return _forwarders[sender][forwarder].approved;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function _requireValidSignature(\\n        address sender,\\n        address forwarder,\\n        bool approved,\\n        uint256 nonce,\\n        bytes calldata signature,\\n        bool isEIP1271Signature\\n    ) private view {\\n        bytes memory data = abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            DOMAIN_SEPARATOR(),\\n            keccak256(abi.encode(APPROVAL_TYPEHASH, sender, forwarder, approved, nonce))\\n        );\\n        if (isEIP1271Signature) {\\n            if (IERC1271(sender).isValidSignature(keccak256(data), signature) != EIP1271_MAGICVALUE) revert InvalidEIP1271Signature();\\n        } else {\\n            if (keccak256(data).recover(signature) != sender) revert WrongSigner();\\n        }\\n    }\\n\\n    function _setForwarderApproval(Forwarder storage forwarderData, address sender, address forwarder, bool approved, uint256 nonce) private {\\n        forwarderData.approved = approved;\\n        unchecked {\\n            forwarderData.nonce = uint248(nonce + 1);\\n        }\\n        emit ForwarderApproval(sender, forwarder, approved, nonce);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"),\\n                    EIP712_DOMAIN_NAME,\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe3be501f7b345766ed58a6cce409426e3423bade1d91a55fcc9e776254a74ee9\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50466080818152604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f06a520fda4ca688235391b02e357c6a65eb2a3bb40a69c0199f3f7f9cccee041828401526060820185905230828501528251808303909401845260a0909101909152815191012060a0525060805160a0516112036100b660003960006102d60152600061022f01526112036000f3fe60806040526004361061007b5760003560e01c80638929a8ca1161004e5780638929a8ca1461010e5780639438f7f3146101855780639c6a442414610198578063d828435d146101b857600080fd5b80633644e51514610080578063572b6c05146100a85780636ed0f382146100d95780636fadcf72146100fb575b600080fd5b34801561008c57600080fd5b5061009561022a565b6040519081526020015b60405180910390f35b3480156100b457600080fd5b506100c96100c3366004610e02565b50600190565b604051901515815260200161009f565b3480156100e557600080fd5b506100f96100f4366004610e02565b6102fc565b005b6100f9610109366004610e66565b610361565b34801561011a57600080fd5b506100c9610129366004610eb9565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152602081815260408083209390941682529190915220547f0100000000000000000000000000000000000000000000000000000000000000900460ff1690565b6100f9610193366004610efc565b61048a565b3480156101a457600080fd5b506100f96101b3366004610f90565b6104e2565b3480156101c457600080fd5b506100956101d3366004610eb9565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152602081815260408083209390941682529190915220547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b6000467f000000000000000000000000000000000000000000000000000000000000000081146102d457604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f06a520fda4ca688235391b02e357c6a65eb2a3bb40a69c0199f3f7f9cccee0418284015260608201849052306080808401919091528351808403909101815260a090920190925280519101206102f6565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b3360008181526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281208054909261035d9284928691907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661054d565b5050565b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6000818152602081815260408083203384529091529020547f0100000000000000000000000000000000000000000000000000000000000000900460ff1661041f576040517f3e29ee2e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201523360248201526044015b60405180910390fd5b61048383838360405160200161043793929190611015565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff8616903461061d565b5050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6104c0813360018a8a8a6104e2565b6104d883838360405160200161043793929190611015565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff80871660009081526020818152604080832093891683529290522080547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff166105448888888489898961064b565b6104d882898989855b600181017effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168215157f010000000000000000000000000000000000000000000000000000000000000081027fff0000000000000000000000000000000000000000000000000000000000000016919091178655604080519182526020820183905273ffffffffffffffffffffffffffffffffffffffff85811692908716917f1e416512661bbe7bb72d89bfee596249d7767c125e8c56cf7cf82ee698b63a6a910160405180910390a35050505050565b60606106438484846040518060600160405280602981526020016111a5602991396108ce565b949350505050565b600061065561022a565b604080517f510634d3c850f3aab02dc8ab54bbb9b76a576f7e4edd8462a252673876bec9e5602082015273ffffffffffffffffffffffffffffffffffffffff808c16928201929092529089166060820152871515608082015260a0810187905260c001604051602081830303815290604052805190602001206040516020016107109291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040529050811561082357805160208201206040517f1626ba7e000000000000000000000000000000000000000000000000000000008082529173ffffffffffffffffffffffffffffffffffffffff8b1691631626ba7e91610784918990899060040161104e565b602060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c591906110a2565b7fffffffff00000000000000000000000000000000000000000000000000000000161461081e576040517f5d52cbe300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104d8565b8773ffffffffffffffffffffffffffffffffffffffff1661088185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505085516020870120929150506109e7565b73ffffffffffffffffffffffffffffffffffffffff16146104d8576040517fa7932e6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082471015610960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610416565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109899190611108565b60006040518083038185875af1925050503d80600081146109c6576040519150601f19603f3d011682016040523d82523d6000602084013e6109cb565b606091505b50915091506109dc87838387610a0b565b979650505050505050565b60008060006109f68585610aab565b91509150610a0381610af0565b509392505050565b60608315610aa1578251600003610a9a5773ffffffffffffffffffffffffffffffffffffffff85163b610a9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610416565b5081610643565b6106438383610ca6565b6000808251604103610ae15760208301516040840151606085015160001a610ad587828585610cea565b94509450505050610ae9565b506000905060025b9250929050565b6000816004811115610b0457610b04611124565b03610b0c5750565b6001816004811115610b2057610b20611124565b03610b87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610416565b6002816004811115610b9b57610b9b611124565b03610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610416565b6003816004811115610c1657610c16611124565b03610ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610416565b50565b815115610cb65781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104169190611153565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610d215750600090506003610dd0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610d75573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610dc957600060019250925050610dd0565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610dfd57600080fd5b919050565b600060208284031215610e1457600080fd5b610e1d82610dd9565b9392505050565b60008083601f840112610e3657600080fd5b50813567ffffffffffffffff811115610e4e57600080fd5b602083019150836020828501011115610ae957600080fd5b600080600060408486031215610e7b57600080fd5b610e8484610dd9565b9250602084013567ffffffffffffffff811115610ea057600080fd5b610eac86828701610e24565b9497909650939450505050565b60008060408385031215610ecc57600080fd5b610ed583610dd9565b9150610ee360208401610dd9565b90509250929050565b80358015158114610dfd57600080fd5b60008060008060008060808789031215610f1557600080fd5b863567ffffffffffffffff80821115610f2d57600080fd5b610f398a838b01610e24565b9098509650869150610f4d60208a01610eec565b9550610f5b60408a01610dd9565b94506060890135915080821115610f7157600080fd5b50610f7e89828a01610e24565b979a9699509497509295939492505050565b60008060008060008060a08789031215610fa957600080fd5b610fb287610dd9565b9550610fc060208801610dd9565b9450610fce60408801610eec565b9350606087013567ffffffffffffffff811115610fea57600080fd5b610ff689828a01610e24565b9094509250611009905060808801610eec565b90509295509295509295565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b6000602082840312156110b457600080fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610e1d57600080fd5b60005b838110156110ff5781810151838201526020016110e7565b50506000910152565b6000825161111a8184602087016110e4565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208152600082518060208401526111728160408501602087016110e4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122014638630f4786a3d8517e68dcd12f5d54a303dbaab0ad85750359be4653ce04664736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80638929a8ca1161004e5780638929a8ca1461010e5780639438f7f3146101855780639c6a442414610198578063d828435d146101b857600080fd5b80633644e51514610080578063572b6c05146100a85780636ed0f382146100d95780636fadcf72146100fb575b600080fd5b34801561008c57600080fd5b5061009561022a565b6040519081526020015b60405180910390f35b3480156100b457600080fd5b506100c96100c3366004610e02565b50600190565b604051901515815260200161009f565b3480156100e557600080fd5b506100f96100f4366004610e02565b6102fc565b005b6100f9610109366004610e66565b610361565b34801561011a57600080fd5b506100c9610129366004610eb9565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152602081815260408083209390941682529190915220547f0100000000000000000000000000000000000000000000000000000000000000900460ff1690565b6100f9610193366004610efc565b61048a565b3480156101a457600080fd5b506100f96101b3366004610f90565b6104e2565b3480156101c457600080fd5b506100956101d3366004610eb9565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152602081815260408083209390941682529190915220547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b6000467f000000000000000000000000000000000000000000000000000000000000000081146102d457604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f06a520fda4ca688235391b02e357c6a65eb2a3bb40a69c0199f3f7f9cccee0418284015260608201849052306080808401919091528351808403909101815260a090920190925280519101206102f6565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b3360008181526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281208054909261035d9284928691907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661054d565b5050565b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6000818152602081815260408083203384529091529020547f0100000000000000000000000000000000000000000000000000000000000000900460ff1661041f576040517f3e29ee2e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201523360248201526044015b60405180910390fd5b61048383838360405160200161043793929190611015565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff8616903461061d565b5050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6104c0813360018a8a8a6104e2565b6104d883838360405160200161043793929190611015565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff80871660009081526020818152604080832093891683529290522080547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff166105448888888489898961064b565b6104d882898989855b600181017effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168215157f010000000000000000000000000000000000000000000000000000000000000081027fff0000000000000000000000000000000000000000000000000000000000000016919091178655604080519182526020820183905273ffffffffffffffffffffffffffffffffffffffff85811692908716917f1e416512661bbe7bb72d89bfee596249d7767c125e8c56cf7cf82ee698b63a6a910160405180910390a35050505050565b60606106438484846040518060600160405280602981526020016111a5602991396108ce565b949350505050565b600061065561022a565b604080517f510634d3c850f3aab02dc8ab54bbb9b76a576f7e4edd8462a252673876bec9e5602082015273ffffffffffffffffffffffffffffffffffffffff808c16928201929092529089166060820152871515608082015260a0810187905260c001604051602081830303815290604052805190602001206040516020016107109291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040529050811561082357805160208201206040517f1626ba7e000000000000000000000000000000000000000000000000000000008082529173ffffffffffffffffffffffffffffffffffffffff8b1691631626ba7e91610784918990899060040161104e565b602060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c591906110a2565b7fffffffff00000000000000000000000000000000000000000000000000000000161461081e576040517f5d52cbe300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104d8565b8773ffffffffffffffffffffffffffffffffffffffff1661088185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505085516020870120929150506109e7565b73ffffffffffffffffffffffffffffffffffffffff16146104d8576040517fa7932e6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082471015610960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610416565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109899190611108565b60006040518083038185875af1925050503d80600081146109c6576040519150601f19603f3d011682016040523d82523d6000602084013e6109cb565b606091505b50915091506109dc87838387610a0b565b979650505050505050565b60008060006109f68585610aab565b91509150610a0381610af0565b509392505050565b60608315610aa1578251600003610a9a5773ffffffffffffffffffffffffffffffffffffffff85163b610a9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610416565b5081610643565b6106438383610ca6565b6000808251604103610ae15760208301516040840151606085015160001a610ad587828585610cea565b94509450505050610ae9565b506000905060025b9250929050565b6000816004811115610b0457610b04611124565b03610b0c5750565b6001816004811115610b2057610b20611124565b03610b87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610416565b6002816004811115610b9b57610b9b611124565b03610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610416565b6003816004811115610c1657610c16611124565b03610ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610416565b50565b815115610cb65781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104169190611153565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610d215750600090506003610dd0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610d75573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610dc957600060019250925050610dd0565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610dfd57600080fd5b919050565b600060208284031215610e1457600080fd5b610e1d82610dd9565b9392505050565b60008083601f840112610e3657600080fd5b50813567ffffffffffffffff811115610e4e57600080fd5b602083019150836020828501011115610ae957600080fd5b600080600060408486031215610e7b57600080fd5b610e8484610dd9565b9250602084013567ffffffffffffffff811115610ea057600080fd5b610eac86828701610e24565b9497909650939450505050565b60008060408385031215610ecc57600080fd5b610ed583610dd9565b9150610ee360208401610dd9565b90509250929050565b80358015158114610dfd57600080fd5b60008060008060008060808789031215610f1557600080fd5b863567ffffffffffffffff80821115610f2d57600080fd5b610f398a838b01610e24565b9098509650869150610f4d60208a01610eec565b9550610f5b60408a01610dd9565b94506060890135915080821115610f7157600080fd5b50610f7e89828a01610e24565b979a9699509497509295939492505050565b60008060008060008060a08789031215610fa957600080fd5b610fb287610dd9565b9550610fc060208801610dd9565b9450610fce60408801610eec565b9350606087013567ffffffffffffffff811115610fea57600080fd5b610ff689828a01610e24565b9094509250611009905060808801610eec565b90509295509295509295565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b6000602082840312156110b457600080fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610e1d57600080fd5b60005b838110156110ff5781810151838201526020016110e7565b50506000910152565b6000825161111a8184602087016110e4565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208152600082518060208401526111728160408501602087016110e4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122014638630f4786a3d8517e68dcd12f5d54a303dbaab0ad85750359be4653ce04664736f6c63430008110033",
  "devdoc": {
    "details": "This contract should be deployed uniquely per network, in a non-upgradeable way.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)",
    "events": {
      "ForwarderApproval(address,address,bool,uint256)": {
        "params": {
          "approved": "True for an approval, false for a disapproval.",
          "forwarder": "The account approved or disapproved as forwarder.",
          "nonce": "The `sender`'s account nonce before the approval change.",
          "sender": "The account for which `forwarder` is approved or disapproved."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "returns": {
          "domainSeparator": "The EIP-712 domain separator."
        }
      },
      "approveAndForward(bytes,bool,address,bytes)": {
        "details": "Reverts with {InvalidEIP1271Signature} if `isEIP1271Signature` is true and the signature is reported invalid by the `sender` contract.Reverts with {WrongSigner} if `isEIP1271Signature` is false and `sender` is not the actual signer.Emits a {ForwarderApproval} event.",
        "params": {
          "data": "The content of the call (the `sender` address will be appended to it according to EIP-2771).",
          "isEIP1271Signature": "True if `sender` is a contract that provides authorization via EIP-1271.",
          "signature": "Signature by `sender` for approving the forwarder.",
          "target": "The destination of the call (that will receive the meta-transaction)."
        }
      },
      "forward(address,bytes)": {
        "details": "Reverts with {ForwarderNotApproved} if the caller has not been previously approved as a forwarder by the sender.",
        "params": {
          "data": "The content of the call (the `sender` address will be appended to it according to EIP-2771).",
          "target": "The destination of the call (that will receive the meta-transaction)."
        }
      },
      "getNonce(address,address)": {
        "params": {
          "forwarder": "The forwarder account.",
          "sender": "The sender account."
        },
        "returns": {
          "nonce": "The current nonce for the `sender`/`forwarder` pair."
        }
      },
      "isApprovedForwarder(address,address)": {
        "params": {
          "forwarder": "The forwarder account.",
          "sender": "The sender account."
        },
        "returns": {
          "_0": "True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The forwarder to check."
        },
        "returns": {
          "_0": "True if `forwarder` is trusted, false if not."
        }
      },
      "removeForwarderApproval(address)": {
        "details": "Emits a {ForwarderApproval} event.",
        "params": {
          "forwarder": "The address of the forwarder to disapprove."
        }
      },
      "setForwarderApproval(address,address,bool,bytes,bool)": {
        "details": "Reverts with {InvalidEIP1271Signature} if `isEIP1271Signature` is true and the signature is reported invalid by the `sender` contract.Reverts with {WrongSigner} if `isEIP1271Signature` is false and `sender` is not the actual signer.Emits a {ForwarderApproval} event.",
        "params": {
          "approved": "Whether to approve or disapprove the forwarder.",
          "forwarder": "The address of the forwarder to change the approval of.",
          "isEIP1271Signature": "True if `sender` is a contract that provides authorization via EIP-1271.",
          "sender": "The address which signed the approval of the approval.",
          "signature": "Signature by `sender` for approving forwarder."
        }
      }
    },
    "title": "Universal Meta-Transactions Forwarder Registry.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ForwarderApproval(address,address,bool,uint256)": {
        "notice": "Emitted when a forwarder is approved or disapproved."
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Returns the EIP-712 DOMAIN_SEPARATOR."
      },
      "approveAndForward(bytes,bool,address,bytes)": {
        "notice": "Approves the forwarder and forwards the meta-transaction using EIP-2771."
      },
      "forward(address,bytes)": {
        "notice": "Forwards the meta-transaction using EIP-2771."
      },
      "getNonce(address,address)": {
        "notice": "Gets the current nonce for the sender/forwarder pair."
      },
      "isApprovedForwarder(address,address)": {
        "notice": "Checks whether an account is as an approved meta-transaction forwarder for a sender account."
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks whether a forwarder is trusted."
      },
      "removeForwarderApproval(address)": {
        "notice": "Disapproves a forwarder for the sender."
      },
      "setForwarderApproval(address,address,bool,bytes,bool)": {
        "notice": "Approves or disapproves a forwarder using a signature."
      }
    },
    "notice": "Users can allow specific EIP-2771 forwarders to forward meta-transactions on their behalf.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6084,
        "contract": "contracts/metatx/ForwarderRegistry.sol:ForwarderRegistry",
        "label": "_forwarders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Forwarder)6054_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Forwarder)6054_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ForwarderRegistry.Forwarder))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Forwarder)6054_storage)"
      },
      "t_mapping(t_address,t_struct(Forwarder)6054_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ForwarderRegistry.Forwarder)",
        "numberOfBytes": "32",
        "value": "t_struct(Forwarder)6054_storage"
      },
      "t_struct(Forwarder)6054_storage": {
        "encoding": "inplace",
        "label": "struct ForwarderRegistry.Forwarder",
        "members": [
          {
            "astId": 6051,
            "contract": "contracts/metatx/ForwarderRegistry.sol:ForwarderRegistry",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint248"
          },
          {
            "astId": 6053,
            "contract": "contracts/metatx/ForwarderRegistry.sol:ForwarderRegistry",
            "label": "approved",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      }
    }
  }
}