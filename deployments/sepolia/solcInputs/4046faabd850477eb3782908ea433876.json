{
  "language": "Solidity",
  "sources": {
    "@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IAccessControl} from \"./../../access/interfaces/IAccessControl.sol\";\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is IAccessControl, Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @inheritdoc IAccessControl\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @inheritdoc IAccessControl\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when an account does not have the required role.\n/// @param role The role the caller is missing.\n/// @param account The account that was checked.\nerror NotRoleHolder(bytes32 role, address account);\n\n/// @notice Thrown when an account does not have the required role on a target contract.\n/// @param targetContract The contract that was checked.\n/// @param role The role that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\n"
    },
    "@animoca/ethereum-contracts/contracts/access/errors/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"
    },
    "@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the pending contract owner but is required to.\n/// @param account The account that was checked.\nerror NotPendingContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"
    },
    "@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when `role` is granted to `account`.\n/// @param role The role that has been granted.\n/// @param account The account that has been granted the role.\n/// @param operator The account that granted the role.\nevent RoleGranted(bytes32 role, address account, address operator);\n\n/// @notice Emitted when `role` is revoked from `account`.\n/// @param role The role that has been revoked.\n/// @param account The account that has been revoked the role.\n/// @param operator The account that revoked the role.\nevent RoleRevoked(bytes32 role, address account, address operator);\n"
    },
    "@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n/// @notice Emitted when a new contract owner is pending.\n/// @param pendingOwner the address of the new contract owner.\nevent OwnershipTransferPending(address indexed pendingOwner);\n"
    },
    "@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Access control via roles management (functions)\ninterface IAccessControl {\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external;\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \"./../errors/AccessControlErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {RoleGranted, RoleRevoked} from \"./../events/AccessControlEvents.sol\";\nimport {IAccessControl} from \"./../interfaces/IAccessControl.sol\";\nimport {Address} from \"./../../utils/libraries/Address.sol\";\n\nlibrary AccessControlStorage {\n    using Address for address;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Checks whether an account has a role in a target contract.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\n        return IAccessControl(targetContract).hasRole(role, account);\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\n    }\n\n    /// @notice Enforces that an account has a role in a target contract.\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"./../../utils/libraries/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/CommonErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n\n/// @notice Thrown when an ETH transfer has failed.\nerror TransferFailed();\n"
    },
    "@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"
    },
    "@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (\n            msg.sender == address(_FORWARDER_REGISTRY) ||\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\n        ) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Meta-Transactions Forwarder Registry.\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @param target The target contract.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"
    },
    "@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ITokenRecovery} from \"./../interfaces/ITokenRecovery.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {TokenRecoveryLibrary} from \"./../libraries/TokenRecoveryLibrary.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\n    }\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\n    }\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\n\n/// @title Uniquely identified seals management.\ninterface ITokenRecovery {\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {InconsistentArrayLengths} from \"./../../CommonErrors.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {IERC165} from \"./../../introspection/interfaces/IERC165.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary TokenRecoveryLibrary {\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\n    /// @param tokenContract The token contract being recovered.\n    error IncorrectTokenContractType(address tokenContract);\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\n        uint256 length = accounts.length;\n        if (length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            accounts[i].sendValue(amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\n        uint256 length = accounts.length;\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\n        uint256 length = accounts.length;\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            IERC721 tokenContract = contracts[i];\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\n                revert IncorrectTokenContractType(address(tokenContract));\n            }\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"./../interfaces/IERC20.sol\";\nimport {IERC20Allowance} from \"./../interfaces/IERC20Allowance.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ERC20Base is IERC20, IERC20Allowance, Context {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20\n    function approve(address spender, uint256 value) external virtual returns (bool result) {\n        ERC20Storage.layout().approve(_msgSender(), spender, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transfer(address to, uint256 value) external virtual returns (bool result) {\n        ERC20Storage.layout().transfer(_msgSender(), to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transferFrom(address from, address to, uint256 value) external virtual returns (bool result) {\n        ERC20Storage.layout().transferFrom(_msgSender(), from, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Allowance\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool result) {\n        ERC20Storage.layout().increaseAllowance(_msgSender(), spender, addedValue);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Allowance\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool result) {\n        ERC20Storage.layout().decreaseAllowance(_msgSender(), spender, subtractedValue);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() external view returns (uint256 supply) {\n        return ERC20Storage.layout().totalSupply();\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address owner) external view returns (uint256 balance) {\n        return ERC20Storage.layout().balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256 value) {\n        return ERC20Storage.layout().allowance(owner, spender);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20BatchTransfers} from \"./../interfaces/IERC20BatchTransfers.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20BatchTransfersBase is IERC20BatchTransfers, Context {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20BatchTransfers\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external virtual returns (bool) {\n        ERC20Storage.layout().batchTransfer(_msgSender(), recipients, values);\n        return true;\n    }\n\n    /// @inheritdoc IERC20BatchTransfers\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external virtual returns (bool) {\n        ERC20Storage.layout().batchTransferFrom(_msgSender(), from, recipients, values);\n        return true;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Burnable} from \"./../interfaces/IERC20Burnable.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20BurnableBase is IERC20Burnable, Context {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20Burnable\n    function burn(uint256 value) external virtual returns (bool) {\n        ERC20Storage.layout().burn(_msgSender(), value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Burnable\n    function burnFrom(address from, uint256 value) external virtual returns (bool) {\n        ERC20Storage.layout().burnFrom(_msgSender(), from, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20Burnable\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external virtual returns (bool) {\n        ERC20Storage.layout().batchBurnFrom(_msgSender(), owners, values);\n        return true;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Detailed} from \"./../interfaces/IERC20Detailed.sol\";\nimport {ERC20DetailedStorage} from \"./../libraries/ERC20DetailedStorage.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20DetailedBase is IERC20Detailed {\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n\n    /// @inheritdoc IERC20Detailed\n    function name() external view returns (string memory) {\n        return ERC20DetailedStorage.layout().name();\n    }\n\n    /// @inheritdoc IERC20Detailed\n    function symbol() external view returns (string memory) {\n        return ERC20DetailedStorage.layout().symbol();\n    }\n\n    /// @inheritdoc IERC20Detailed\n    function decimals() external view returns (uint8) {\n        return ERC20DetailedStorage.layout().decimals();\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Metadata} from \"./../interfaces/IERC20Metadata.sol\";\nimport {ERC20MetadataStorage} from \"./../libraries/ERC20MetadataStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../../../access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract ERC20MetadataBase is IERC20Metadata, Context {\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Sets the token URI.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @param uri The token URI.\n    function setTokenURI(string calldata uri) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        ERC20MetadataStorage.layout().setTokenURI(uri);\n    }\n\n    /// @inheritdoc IERC20Metadata\n    function tokenURI() external view returns (string memory) {\n        return ERC20MetadataStorage.layout().tokenURI();\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Mintable} from \"./../interfaces/IERC20Mintable.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {AccessControlStorage} from \"./../../../access/libraries/AccessControlStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Mintable (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires AccessControl.\nabstract contract ERC20MintableBase is IERC20Mintable, Context {\n    using ERC20Storage for ERC20Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = \"minter\";\n\n    /// @inheritdoc IERC20Mintable\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\n    function mint(address to, uint256 value) external virtual {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC20Storage.layout().mint(to, value);\n    }\n\n    /// @inheritdoc IERC20Mintable\n    /// @dev Reverts with {NotRoleHolder} if the sender does not have the 'minter' role.\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external virtual {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, _msgSender());\n        ERC20Storage.layout().batchMint(recipients, values);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Permit} from \"./../interfaces/IERC20Permit.sol\";\nimport {ERC20PermitStorage} from \"./../libraries/ERC20PermitStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\n/// @dev Note: This contract requires ERC20Detailed.\nabstract contract ERC20PermitBase is IERC20Permit, Context {\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\n\n    /// @inheritdoc IERC20Permit\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\n        ERC20PermitStorage.layout().permit(owner, spender, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc IERC20Permit\n    function nonces(address owner) external view returns (uint256) {\n        return ERC20PermitStorage.layout().nonces(owner);\n    }\n\n    /// @inheritdoc IERC20Permit\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return ERC20PermitStorage.DOMAIN_SEPARATOR();\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20SafeTransfers} from \"./../interfaces/IERC20SafeTransfers.sol\";\nimport {ERC20Storage} from \"./../libraries/ERC20Storage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\nabstract contract ERC20SafeTransfersBase is IERC20SafeTransfers, Context {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    /// @inheritdoc IERC20SafeTransfers\n    function safeTransfer(address to, uint256 value, bytes calldata data) external virtual returns (bool) {\n        ERC20Storage.layout().safeTransfer(_msgSender(), to, value, data);\n        return true;\n    }\n\n    /// @inheritdoc IERC20SafeTransfers\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external virtual returns (bool) {\n        ERC20Storage.layout().safeTransferFrom(_msgSender(), from, to, value, data);\n        return true;\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Receiver} from \"./interfaces/IERC20Receiver.sol\";\nimport {InterfaceDetectionStorage} from \"../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the allowance increase creates an overflow.\n/// @param owner The owner of the tokens.\n/// @param spender The spender of the tokens.\n/// @param allowance The current allowance.\n/// @param increment The allowance increase.\nerror ERC20AllowanceOverflow(address owner, address spender, uint256 allowance, uint256 increment);\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the `values` array sum overflows on a batch transfer operation.\nerror ERC20BatchTransferValuesOverflow();\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when setting an allowance to the the zero address.\n/// @param owner The owner of the tokens.\nerror ERC20ApprovalToAddressZero(address owner);\n\n/// @notice Thrown when the allowance decreases below the current alowance set.\n/// @param owner The owner of the tokens.\n/// @param spender The spender of the tokens.\n/// @param allowance The current allowance.\n/// @param decrement The allowance decrease.\nerror ERC20InsufficientAllowance(address owner, address spender, uint256 allowance, uint256 decrement);\n\n/// @notice Thrown when transferring tokens to the zero address.\n/// @param owner The account from which the tokens are transferred.\nerror ERC20TransferToAddressZero(address owner);\n\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\n/// @param owner The owner of the tokens.\n/// @param balance The current balance.\n/// @param value The amount of tokens being transferred.\nerror ERC20InsufficientBalance(address owner, uint256 balance, uint256 value);\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the minting tokens to the zero address.\nerror ERC20MintToAddressZero();\n\n/// @notice Thrown when the `values` array sum overflows on a batch mint operation.\nerror ERC20BatchMintValuesOverflow();\n\n/// @notice Thrown when the minting tokens overflows the supply.\n/// @param supply The current supply.\n/// @param value The amount of tokens being minted.\nerror ERC20TotalSupplyOverflow(uint256 supply, uint256 value);\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20PermitErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the permit is from the zero address.\nerror ERC20PermitFromAddressZero();\n\n/// @notice Thrown when the permit is expired.\n/// @param deadline The permit deadline.\nerror ERC20PermitExpired(uint256 deadline);\n\n/// @notice Thrown when the permit signature cannot be verified.\nerror ERC20PermitInvalidSignature();\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\n/// @param recipient The recipient contract.\nerror ERC20SafeTransferRejected(address recipient);\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/events/ERC20Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when tokens are transferred, including zero value transfers.\n/// @param from The account where the transferred tokens are withdrawn from.\n/// @param to The account where the transferred tokens are deposited to.\n/// @param value The amount of tokens being transferred.\nevent Transfer(address indexed from, address indexed to, uint256 value);\n\n/// @notice Emitted when an approval is set.\n/// @param owner The account granting an allowance to `spender`.\n/// @param spender The account being granted an allowance from `owner`.\n/// @param value The allowance amount being granted.\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\ninterface IERC20 {\n    /// @notice Sets the allowance to an account from the sender.\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param spender The account being granted the allowance by the message caller.\n    /// @param value The allowance amount to grant.\n    /// @return result Whether the operation succeeded.\n    function approve(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transfer(address to, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\n\n    /// @notice Gets the total token supply.\n    /// @return supply The total token supply.\n    function totalSupply() external view returns (uint256 supply);\n\n    /// @notice Gets an account balance.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(address owner, address spender) external view returns (uint256 value);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, optional extension: Allowance.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\ninterface IERC20Allowance {\n    /// @notice Increases the allowance granted to an account by the sender.\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n    /// @param spender The account whose allowance is being increased.\n    /// @param value The allowance amount increase.\n    /// @return result Whether the operation succeeded.\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Decreases the allowance granted to an account by the sender.\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n    /// @param spender The account whose allowance is being decreased.\n    /// @param value The allowance amount decrease.\n    /// @return result Whether the operation succeeded.\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\ninterface IERC20BatchTransfers {\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    /// @return result Whether the operation succeeded.\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\n\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to be transferred.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    /// @return result Whether the operation succeeded.\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\ninterface IERC20Burnable {\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n    /// @param value The amount of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function burn(uint256 value) external returns (bool result);\n\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account to burn the tokens from.\n    /// @param value The amount of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function burnFrom(address from, uint256 value) external returns (bool result);\n\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n    /// @dev Reverts if `owners` and `values` have different lengths.\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\n    /// @param owners The list of accounts to burn the tokens from.\n    /// @param values The list of amounts of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, optional extension: Detailed.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\ninterface IERC20Detailed {\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name() external view returns (string memory tokenName);\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol() external view returns (string memory tokenSymbol);\n\n    /// @notice Gets the number of decimals used to display the balances.\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\n    /// @return nbDecimals The number of decimals used to display the balances.\n    function decimals() external view returns (uint8 nbDecimals);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\ninterface IERC20Metadata {\n    /// @notice Gets the token metadata URI.\n    /// @return uri The token metadata URI.\n    function tokenURI() external view returns (string memory uri);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\ninterface IERC20Mintable {\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(address to, uint256 value) external;\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit – 712-signed approvals\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\ninterface IERC20Permit {\n    /// @notice Sets the allowance to an account from another account using a signed permit.\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\n    /// @dev Reverts if `owner` is the zero address.\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\n    /// @dev Emits an {IERC20-Approval} event.\n    /// @param owner The token owner granting the allowance to `spender`.\n    /// @param spender The token spender being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    /// @param deadline The deadline from which the permit signature is no longer valid.\n    /// @param v Permit signature v parameter\n    /// @param r Permit signature r parameter.\n    /// @param s Permit signature s parameter.\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /// @notice Gets the current permit nonce of an account.\n    /// @param owner The account to check the nonce of.\n    /// @return nonce The current permit nonce of `owner`.\n    function nonces(address owner) external view returns (uint256 nonce);\n\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n    ///  keccak256(\n    ///      abi.encode(\n    ///          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n    ///          keccak256(bytes(name)),\n    ///          keccak256(bytes(version)),\n    ///          chainId,\n    ///          address(this)))\n    ///\n    ///  where\n    ///   - `name` (string) is the ERC-20 token name.\n    ///   - `version` (string) refers to the ERC-20 token contract version.\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\n    ///\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\ninterface IERC20Receiver {\n    /// @notice Handles the receipt of ERC20 tokens.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\ninterface IERC20SafeTransfers {\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Detailed} from \"./../interfaces/IERC20Detailed.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20DetailedStorage {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n\n    struct Layout {\n        string tokenName;\n        string tokenSymbol;\n        uint8 tokenDecimals;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Detailed.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Detailed.phase\")) - 1);\n\n    /// @notice Initializes the storage with the token details (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    function constructorInit(Layout storage s, string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) internal {\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenDecimals = tokenDecimals;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with the token details (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenDecimals The token decimals.\n    function proxyInit(Layout storage s, string calldata tokenName, string calldata tokenSymbol, uint8 tokenDecimals) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenDecimals = tokenDecimals;\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\n    }\n\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name(Layout storage s) internal view returns (string memory tokenName) {\n        return s.tokenName;\n    }\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\n        return s.tokenSymbol;\n    }\n\n    /// @notice Gets the number of decimals used to display the balances.\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\n    /// @return nbDecimals The number of decimals used to display the balances.\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\n        return s.tokenDecimals;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Metadata} from \"./../interfaces/IERC20Metadata.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20MetadataStorage {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n\n    struct Layout {\n        string uri;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Metadata.storage\")) - 1);\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Metadata).interfaceId, true);\n    }\n\n    /// @notice Sets the token URI.\n    /// @param uri The token URI.\n    function setTokenURI(Layout storage s, string calldata uri) internal {\n        s.uri = uri;\n    }\n\n    /// @notice Gets the token metadata URI.\n    /// @return uri The token metadata URI.\n    function tokenURI(Layout storage s) internal view returns (string memory uri) {\n        return s.uri;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ERC20PermitFromAddressZero, ERC20PermitExpired, ERC20PermitInvalidSignature} from \"./../errors/ERC20PermitErrors.sol\";\nimport {IERC20Permit} from \"./../interfaces/IERC20Permit.sol\";\nimport {ERC20Storage} from \"./ERC20Storage.sol\";\nimport {ERC20DetailedStorage} from \"./ERC20DetailedStorage.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20PermitStorage {\n    using ERC20Storage for ERC20Storage.Layout;\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(address => uint256) accountNonces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20Permit.storage\")) - 1);\n\n    // 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Permit).interfaceId, true);\n    }\n\n    /// @notice Sets the allowance to an account from another account using a signed permit.\n    /// @dev Reverts with {ERC20PermitFromZeroAddress} if `owner` is the zero address.\n    /// @dev Reverts with {ERC20PermitExpired} if the current blocktime is greather than `deadline`.\n    /// @dev Reverts with {ERC20PermitInvalidSignature} if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\n    /// @dev Emits an {IERC20-Approval} event.\n    /// @param owner The token owner granting the allowance to `spender`.\n    /// @param spender The token spender being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    /// @param deadline The deadline from which the permit signature is no longer valid.\n    /// @param v Permit signature v parameter\n    /// @param r Permit signature r parameter.\n    /// @param s Permit signature s parameter.\n    function permit(Layout storage st, address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal {\n        if (owner == address(0)) revert ERC20PermitFromAddressZero();\n        if (block.timestamp > deadline) revert ERC20PermitExpired(deadline);\n        unchecked {\n            bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, st.accountNonces[owner]++, deadline));\n            bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR(), hashStruct));\n            address signer = ecrecover(hash, v, r, s);\n            if (signer != owner) revert ERC20PermitInvalidSignature();\n        }\n        ERC20Storage.layout().approve(owner, spender, value);\n    }\n\n    /// @notice Gets the current permit nonce of an account.\n    /// @param owner The account to check the nonce of.\n    /// @return nonce The current permit nonce of `owner`.\n    function nonces(Layout storage s, address owner) internal view returns (uint256 nonce) {\n        return s.accountNonces[owner];\n    }\n\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n    ///  keccak256(\n    ///      abi.encode(\n    ///          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n    ///          keccak256(bytes(name)),\n    ///          keccak256(bytes(version)),\n    ///          chainId,\n    ///          address(this)))\n    ///\n    ///  where\n    ///   - `name` (string) is the ERC-20 token name.\n    ///   - `version` (string) refers to the ERC-20 token contract version.\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\n    ///\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() internal view returns (bytes32) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(ERC20DetailedStorage.layout().name())),\n                    keccak256(\"1\"),\n                    chainId,\n                    address(this)\n                )\n            );\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n// solhint-disable-next-line max-line-length\nimport {ERC20ApprovalToAddressZero, ERC20InsufficientAllowance, ERC20TransferToAddressZero, ERC20InsufficientBalance} from \"./../errors/ERC20Errors.sol\";\nimport {ERC20AllowanceOverflow} from \"./../errors/ERC20AllowanceErrors.sol\";\nimport {ERC20BatchTransferValuesOverflow} from \"./../errors/ERC20BatchTransfersErrors.sol\";\nimport {ERC20SafeTransferRejected} from \"./../errors/ERC20SafeTransfersErrors.sol\";\nimport {ERC20MintToAddressZero, ERC20BatchMintValuesOverflow, ERC20TotalSupplyOverflow} from \"./../errors/ERC20MintableErrors.sol\";\nimport {InconsistentArrayLengths} from \"./../../../CommonErrors.sol\";\nimport {Transfer, Approval} from \"./../events/ERC20Events.sol\";\nimport {IERC20} from \"./../interfaces/IERC20.sol\";\nimport {IERC20Allowance} from \"./../interfaces/IERC20Allowance.sol\";\nimport {IERC20BatchTransfers} from \"./../interfaces/IERC20BatchTransfers.sol\";\nimport {IERC20SafeTransfers} from \"./../interfaces/IERC20SafeTransfers.sol\";\nimport {IERC20Mintable} from \"./../interfaces/IERC20Mintable.sol\";\nimport {IERC20Burnable} from \"./../interfaces/IERC20Burnable.sol\";\nimport {IERC20Receiver} from \"./../interfaces/IERC20Receiver.sol\";\nimport {Address} from \"./../../../utils/libraries/Address.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20Storage {\n    using Address for address;\n    using ERC20Storage for ERC20Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowances;\n        uint256 supply;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20.phase\")) - 1);\n\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    function init() internal {\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    function initWithAllocations(address[] memory initialHolders, uint256[] memory initialAllocations) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        init();\n        layout().batchMint(initialHolders, initialAllocations);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\n    function initERC20BatchTransfers() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\n    function initERC20SafeTransfers() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\n    function initERC20Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\n    function initERC20Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\n    }\n\n    /// @notice Sets the allowance to an account by an owner.\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param owner The account to set the allowance from.\n    /// @param spender The account being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\n        s.allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /// @notice Increases the allowance granted to an account by an owner.\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n    /// @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n    /// @param owner The account increasing the allowance.\n    /// @param spender The account whose allowance is being increased.\n    /// @param value The allowance amount increase.\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\n        uint256 currentAllowance = s.allowances[owner][spender];\n        if (value != 0) {\n            unchecked {\n                uint256 newAllowance = currentAllowance + value;\n                if (newAllowance <= currentAllowance) revert ERC20AllowanceOverflow(owner, spender, currentAllowance, value);\n                s.allowances[owner][spender] = newAllowance;\n                currentAllowance = newAllowance;\n            }\n        }\n        emit Approval(owner, spender, currentAllowance);\n    }\n\n    /// @notice Decreases the allowance granted to an account by an owner.\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n    /// @param owner The account decreasing the allowance.\n    /// @param spender The account whose allowance is being decreased.\n    /// @param value The allowance amount decrease.\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\n        uint256 currentAllowance = s.allowances[owner][spender];\n\n        if (currentAllowance != type(uint256).max && value != 0) {\n            unchecked {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                uint256 newAllowance = currentAllowance - value;\n                if (newAllowance >= currentAllowance) revert ERC20InsufficientAllowance(owner, spender, currentAllowance, value);\n                s.allowances[owner][spender] = newAllowance;\n                currentAllowance = newAllowance;\n            }\n        }\n        emit Approval(owner, spender, currentAllowance);\n    }\n\n    /// @notice Transfers an amount of tokens from an account to a recipient.\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\n        if (to == address(0)) revert ERC20TransferToAddressZero(from);\n\n        if (value != 0) {\n            uint256 balance = s.balances[from];\n            unchecked {\n                uint256 newBalance = balance - value;\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\n                if (from != to) {\n                    s.balances[from] = newBalance;\n                    s.balances[to] += value;\n                }\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\n    /// @param sender The message sender.\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, value);\n        }\n        s.transfer(from, to, value);\n    }\n\n    //================================================= Batch Transfers ==================================================//\n\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\n    /// @dev Emits a {Transfer} event for each transfer.\n    /// @param from The account transferring the tokens.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\n        uint256 length = recipients.length;\n        if (length != values.length) revert InconsistentArrayLengths();\n\n        if (length == 0) return;\n\n        uint256 balance = s.balances[from];\n\n        uint256 totalValue;\n        uint256 selfTransferTotalValue;\n        for (uint256 i; i < length; ++i) {\n            address to = recipients[i];\n            if (to == address(0)) revert ERC20TransferToAddressZero(from);\n\n            uint256 value = values[i];\n            if (value != 0) {\n                unchecked {\n                    uint256 newTotalValue = totalValue + value;\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\n                    totalValue = newTotalValue;\n                    if (from != to) {\n                        s.balances[to] += value;\n                    } else {\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\n                    }\n                }\n            }\n            emit Transfer(from, to, value);\n        }\n\n        if (totalValue != 0 && totalValue != selfTransferTotalValue) {\n            unchecked {\n                uint256 newBalance = balance - totalValue;\n                // balance must be sufficient, including self-transfers\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\n            }\n        }\n    }\n\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\n    /// @dev Emits a {Transfer} event for each transfer.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account transferring the tokens.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\n        uint256 length = recipients.length;\n        if (length != values.length) revert InconsistentArrayLengths();\n\n        if (length == 0) return;\n\n        uint256 balance = s.balances[from];\n\n        uint256 totalValue;\n        uint256 selfTransferTotalValue;\n        for (uint256 i; i < length; ++i) {\n            address to = recipients[i];\n            if (to == address(0)) revert ERC20TransferToAddressZero(from);\n\n            uint256 value = values[i];\n\n            if (value != 0) {\n                unchecked {\n                    uint256 newTotalValue = totalValue + value;\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\n                    totalValue = newTotalValue;\n                    if (from != to) {\n                        s.balances[to] += value;\n                    } else {\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\n                    }\n                }\n            }\n\n            emit Transfer(from, to, value);\n\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\n                unchecked {\n                    uint256 newBalance = balance - totalValue;\n                    // balance must be sufficient, including self-transfers\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\n                    s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\n                }\n            }\n        }\n\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, totalValue);\n        }\n    }\n\n    //================================================= Safe Transfers ==================================================//\n\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\n        s.transfer(from, to, value);\n        if (to.hasBytecode()) {\n            _callOnERC20Received(from, from, to, value, data);\n        }\n    }\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\n        s.transferFrom(sender, from, to, value);\n        if (to.hasBytecode()) {\n            _callOnERC20Received(sender, from, to, value, data);\n        }\n    }\n\n    //================================================= Minting ==================================================//\n\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\n    /// @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(Layout storage s, address to, uint256 value) internal {\n        if (to == address(0)) revert ERC20MintToAddressZero();\n        if (value != 0) {\n            uint256 supply = s.supply;\n            unchecked {\n                uint256 newSupply = supply + value;\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, value);\n                s.supply = newSupply;\n                s.balances[to] += value; // balance cannot overflow if supply does not\n            }\n        }\n        emit Transfer(address(0), to, value);\n    }\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n    /// @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\n        uint256 length = recipients.length;\n        if (length != values.length) revert InconsistentArrayLengths();\n\n        if (length == 0) return;\n\n        uint256 totalValue;\n        for (uint256 i; i < length; ++i) {\n            address to = recipients[i];\n            if (to == address(0)) revert ERC20MintToAddressZero();\n\n            uint256 value = values[i];\n            if (value != 0) {\n                unchecked {\n                    uint256 newTotalValue = totalValue + value;\n                    if (newTotalValue <= totalValue) revert ERC20BatchMintValuesOverflow();\n                    totalValue = newTotalValue;\n                    s.balances[to] += value; // balance cannot overflow if supply does not\n                }\n            }\n            emit Transfer(address(0), to, value);\n        }\n\n        if (totalValue != 0) {\n            unchecked {\n                uint256 supply = s.supply;\n                uint256 newSupply = supply + totalValue;\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, totalValue);\n                s.supply = newSupply;\n            }\n        }\n    }\n\n    //================================================= Burning ==================================================//\n\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @param from The account burning the tokens.\n    /// @param value The amount of tokens to burn.\n    function burn(Layout storage s, address from, uint256 value) internal {\n        if (value != 0) {\n            uint256 balance = s.balances[from];\n            unchecked {\n                uint256 newBalance = balance - value;\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\n                s.balances[from] = newBalance;\n                s.supply -= value; // will not underflow if balance does not\n            }\n        }\n\n        emit Transfer(from, address(0), value);\n    }\n\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account to burn the tokens from.\n    /// @param value The amount of tokens to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, value);\n        }\n        s.burn(from, value);\n    }\n\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\n    /// @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\n    ///  at least the corresponding `value` of allowance by this `owner`.\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\n    /// @param sender The message sender.\n    /// @param owners The list of accounts to burn the tokens from.\n    /// @param values The list of amounts of tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\n        uint256 length = owners.length;\n        if (length != values.length) revert InconsistentArrayLengths();\n\n        if (length == 0) return;\n\n        uint256 totalValue;\n        for (uint256 i; i < length; ++i) {\n            address from = owners[i];\n            uint256 value = values[i];\n\n            if (from != sender) {\n                s.decreaseAllowance(from, sender, value);\n            }\n\n            if (value != 0) {\n                uint256 balance = s.balances[from];\n                unchecked {\n                    uint256 newBalance = balance - value;\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\n                    s.balances[from] = newBalance;\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\n                }\n            }\n\n            emit Transfer(from, address(0), value);\n        }\n\n        if (totalValue != 0) {\n            unchecked {\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\n            }\n        }\n    }\n\n    /// @notice Gets the total token supply.\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\n    /// @return supply The total token supply.\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\n        return s.supply;\n    }\n\n    /// @notice Gets an account balance.\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\n        return s.balances[owner];\n    }\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\n        return s.allowances[owner][spender];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\n    /// @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param value The value transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\n        if (IERC20Receiver(to).onERC20Received(sender, from, value, data) != ERC20_RECEIVED) revert ERC20SafeTransferRejected(to);\n    }\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"
    },
    "@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary Address {\n    /// @notice Checks if the address is a deployed smart contract.\n    /// @param addr The address to check.\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\n    function hasBytecode(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size != 0;\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IMessageLibManager } from \"./IMessageLibManager.sol\";\nimport { IMessagingComposer } from \"./IMessagingComposer.sol\";\nimport { IMessagingChannel } from \"./IMessagingChannel.sol\";\nimport { IMessagingContext } from \"./IMessagingContext.sol\";\n\nstruct MessagingParams {\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes message;\n    bytes options;\n    bool payInLzToken;\n}\n\nstruct MessagingReceipt {\n    bytes32 guid;\n    uint64 nonce;\n    MessagingFee fee;\n}\n\nstruct MessagingFee {\n    uint256 nativeFee;\n    uint256 lzTokenFee;\n}\n\nstruct Origin {\n    uint32 srcEid;\n    bytes32 sender;\n    uint64 nonce;\n}\n\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\n\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\n\n    event PacketDelivered(Origin origin, address receiver);\n\n    event LzReceiveAlert(\n        address indexed receiver,\n        address indexed executor,\n        Origin origin,\n        bytes32 guid,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    event LzTokenSet(address token);\n\n    event DelegateSet(address sender, address delegate);\n\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\n\n    function send(\n        MessagingParams calldata _params,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory);\n\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\n\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function lzReceive(\n        Origin calldata _origin,\n        address _receiver,\n        bytes32 _guid,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\n\n    function setLzToken(address _lzToken) external;\n\n    function lzToken() external view returns (address);\n\n    function nativeToken() external view returns (address);\n\n    function setDelegate(address _delegate) external;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { Origin } from \"./ILayerZeroEndpointV2.sol\";\n\ninterface ILayerZeroReceiver {\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\n\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\n\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport { SetConfigParam } from \"./IMessageLibManager.sol\";\n\nenum MessageLibType {\n    Send,\n    Receive,\n    SendAndReceive\n}\n\ninterface IMessageLib is IERC165 {\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\n\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    // message libs of same major version are compatible\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\n\n    function messageLibType() external view returns (MessageLibType);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nstruct SetConfigParam {\n    uint32 eid;\n    uint32 configType;\n    bytes config;\n}\n\ninterface IMessageLibManager {\n    struct Timeout {\n        address lib;\n        uint256 expiry;\n    }\n\n    event LibraryRegistered(address newLib);\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\n\n    function registerLibrary(address _lib) external;\n\n    function isRegisteredLibrary(address _lib) external view returns (bool);\n\n    function getRegisteredLibraries() external view returns (address[] memory);\n\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\n\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\n\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\n\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\n\n    /// ------------------- OApp interfaces -------------------\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\n\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\n\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\n\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\n\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\n\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\n\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\n\n    function getConfig(\n        address _oapp,\n        address _lib,\n        uint32 _eid,\n        uint32 _configType\n    ) external view returns (bytes memory config);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingChannel {\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n\n    function eid() external view returns (uint32);\n\n    // this is an emergency function if a message cannot be verified for some reasons\n    // required to provide _nextNonce to avoid race condition\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\n\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\n\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\n\n    function inboundPayloadHash(\n        address _receiver,\n        uint32 _srcEid,\n        bytes32 _sender,\n        uint64 _nonce\n    ) external view returns (bytes32);\n\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingComposer {\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\n    event LzComposeAlert(\n        address indexed from,\n        address indexed to,\n        address indexed executor,\n        bytes32 guid,\n        uint16 index,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    function composeQueue(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index\n    ) external view returns (bytes32 messageHash);\n\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\n\n    function lzCompose(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingContext {\n    function isSendingMessage() external view returns (bool);\n\n    function getSendContext() external view returns (uint32 dstEid, address sender);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { MessagingFee } from \"./ILayerZeroEndpointV2.sol\";\nimport { IMessageLib } from \"./IMessageLib.sol\";\n\nstruct Packet {\n    uint64 nonce;\n    uint32 srcEid;\n    address sender;\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes32 guid;\n    bytes message;\n}\n\ninterface ISendLib is IMessageLib {\n    function send(\n        Packet calldata _packet,\n        bytes calldata _options,\n        bool _payInLzToken\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\n\n    function quote(\n        Packet calldata _packet,\n        bytes calldata _options,\n        bool _payInLzToken\n    ) external view returns (MessagingFee memory);\n\n    function setTreasury(address _treasury) external;\n\n    function withdrawFee(address _to, uint256 _amount) external;\n\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary AddressCast {\n    error AddressCast_InvalidSizeForAddress();\n    error AddressCast_InvalidAddress();\n\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\n        result = bytes32(_addressBytes);\n        unchecked {\n            uint256 offset = 32 - _addressBytes.length;\n            result = result >> (offset * 8);\n        }\n    }\n\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\n        result = bytes32(uint256(uint160(_address)));\n    }\n\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\n        result = new bytes(_size);\n        unchecked {\n            uint256 offset = 256 - _size * 8;\n            assembly {\n                mstore(add(result, 32), shl(offset, _addressBytes32))\n            }\n        }\n    }\n\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\n        result = address(uint160(uint256(_addressBytes32)));\n    }\n\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\n        result = address(bytes20(_addressBytes));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { Packet } from \"../../interfaces/ISendLib.sol\";\nimport { AddressCast } from \"../../libs/AddressCast.sol\";\n\nlibrary PacketV1Codec {\n    using AddressCast for address;\n    using AddressCast for bytes32;\n\n    uint8 internal constant PACKET_VERSION = 1;\n\n    // header (version + nonce + path)\n    // version\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\n    //    nonce\n    uint256 private constant NONCE_OFFSET = 1;\n    //    path\n    uint256 private constant SRC_EID_OFFSET = 9;\n    uint256 private constant SENDER_OFFSET = 13;\n    uint256 private constant DST_EID_OFFSET = 45;\n    uint256 private constant RECEIVER_OFFSET = 49;\n    // payload (guid + message)\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\n    uint256 private constant MESSAGE_OFFSET = 113;\n\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\n        encodedPacket = abi.encodePacked(\n            PACKET_VERSION,\n            _packet.nonce,\n            _packet.srcEid,\n            _packet.sender.toBytes32(),\n            _packet.dstEid,\n            _packet.receiver,\n            _packet.guid,\n            _packet.message\n        );\n    }\n\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                PACKET_VERSION,\n                _packet.nonce,\n                _packet.srcEid,\n                _packet.sender.toBytes32(),\n                _packet.dstEid,\n                _packet.receiver\n            );\n    }\n\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\n        return abi.encodePacked(_packet.guid, _packet.message);\n    }\n\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return _packet[0:GUID_OFFSET];\n    }\n\n    function version(bytes calldata _packet) internal pure returns (uint8) {\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\n    }\n\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\n    }\n\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\n    }\n\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\n    }\n\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\n        return sender(_packet).toAddress();\n    }\n\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\n    }\n\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\n    }\n\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\n        return receiver(_packet).toAddress();\n    }\n\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\n    }\n\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return bytes(_packet[MESSAGE_OFFSET:]);\n    }\n\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return bytes(_packet[GUID_OFFSET:]);\n    }\n\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\n        return keccak256(payload(_packet));\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ILayerZeroEndpointV2 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\n\n/**\n * @title IOAppCore\n */\ninterface IOAppCore {\n    // Custom error messages\n    error OnlyPeer(uint32 eid, bytes32 sender);\n    error NoPeer(uint32 eid);\n    error InvalidEndpointCall();\n    error InvalidDelegate();\n\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\n    event PeerSet(uint32 eid, bytes32 peer);\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     */\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\n\n    /**\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\n     * @return iEndpoint The LayerZero endpoint as an interface.\n     */\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\n\n    /**\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\n     */\n    function peers(uint32 _eid) external view returns (bytes32 peer);\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) external;\n\n    /**\n     * @notice Sets the delegate address for the OApp Core.\n     * @param _delegate The address of the delegate to be set.\n     */\n    function setDelegate(address _delegate) external;\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @title IOAppMsgInspector\n * @dev Interface for the OApp Message Inspector, allowing examination of message and options contents.\n */\ninterface IOAppMsgInspector {\n    // Custom error message for inspection failure\n    error InspectionFailed(bytes message, bytes options);\n\n    /**\n     * @notice Allows the inspector to examine LayerZero message contents and optionally throw a revert if invalid.\n     * @param _message The message payload to be inspected.\n     * @param _options Additional options or parameters for inspection.\n     * @return valid A boolean indicating whether the inspection passed (true) or failed (false).\n     *\n     * @dev Optionally done as a revert, OR use the boolean provided to handle the failure.\n     */\n    function inspect(bytes calldata _message, bytes calldata _options) external view returns (bool valid);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Struct representing enforced option parameters.\n */\nstruct EnforcedOptionParam {\n    uint32 eid; // Endpoint ID\n    uint16 msgType; // Message Type\n    bytes options; // Additional options\n}\n\n/**\n * @title IOAppOptionsType3\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\n */\ninterface IOAppOptionsType3 {\n    // Custom error message for invalid options\n    error InvalidOptions(bytes options);\n\n    // Event emitted when enforced options are set\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\n\n    /**\n     * @notice Sets enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     */\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\n\n    /**\n     * @notice Combines options for a given endpoint and message type.\n     * @param _eid The endpoint ID.\n     * @param _msgType The OApp message type.\n     * @param _extraOptions Additional options passed by the caller.\n     * @return options The combination of caller specified options AND enforced options.\n     */\n    function combineOptions(\n        uint32 _eid,\n        uint16 _msgType,\n        bytes calldata _extraOptions\n    ) external view returns (bytes memory options);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ILayerZeroReceiver, Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\";\n\ninterface IOAppReceiver is ILayerZeroReceiver {\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata _origin,\n        bytes calldata _message,\n        address _sender\n    ) external view returns (bool isSender);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppOptionsType3, EnforcedOptionParam } from \"../interfaces/IOAppOptionsType3.sol\";\n\n/**\n * @title OAppOptionsType3\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\n */\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\n    uint16 internal constant OPTION_TYPE_3 = 3;\n\n    // @dev The \"msgType\" should be defined in the child contract.\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\n\n    /**\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\n     */\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\n        _setEnforcedOptions(_enforcedOptions);\n    }\n\n    /**\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     *\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\n     */\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\n            _assertOptionsType3(_enforcedOptions[i].options);\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\n        }\n\n        emit EnforcedOptionSet(_enforcedOptions);\n    }\n\n    /**\n     * @notice Combines options for a given endpoint and message type.\n     * @param _eid The endpoint ID.\n     * @param _msgType The OAPP message type.\n     * @param _extraOptions Additional options passed by the caller.\n     * @return options The combination of caller specified options AND enforced options.\n     *\n     * @dev If there is an enforced lzReceive option:\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\n     */\n    function combineOptions(\n        uint32 _eid,\n        uint16 _msgType,\n        bytes calldata _extraOptions\n    ) public view virtual returns (bytes memory) {\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\n\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\n        if (enforced.length == 0) return _extraOptions;\n\n        // No caller options, return enforced\n        if (_extraOptions.length == 0) return enforced;\n\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\n        if (_extraOptions.length >= 2) {\n            _assertOptionsType3(_extraOptions);\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\n            return bytes.concat(enforced, _extraOptions[2:]);\n        }\n\n        // No valid set of options was found.\n        revert InvalidOptions(_extraOptions);\n    }\n\n    /**\n     * @dev Internal function to assert that options are of type 3.\n     * @param _options The options to be checked.\n     */\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\n        uint16 optionsType;\n        assembly {\n            optionsType := mload(add(_options, 2))\n        }\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppSender, MessagingFee, MessagingReceipt } from \"./OAppSender.sol\";\n// @dev Import the 'Origin' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppReceiver, Origin } from \"./OAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OApp\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\n */\nabstract contract OApp is OAppSender, OAppReceiver {\n    /**\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol implementation.\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\n     */\n    function oAppVersion()\n        public\n        pure\n        virtual\n        override(OAppSender, OAppReceiver)\n        returns (uint64 senderVersion, uint64 receiverVersion)\n    {\n        return (SENDER_VERSION, RECEIVER_VERSION);\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppCore, ILayerZeroEndpointV2 } from \"./interfaces/IOAppCore.sol\";\n\n/**\n * @title OAppCore\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\n */\nabstract contract OAppCore is IOAppCore, Ownable {\n    // The LayerZero endpoint associated with the given OApp\n    ILayerZeroEndpointV2 public immutable endpoint;\n\n    // Mapping to store peers associated with corresponding endpoints\n    mapping(uint32 eid => bytes32 peer) public peers;\n\n    /**\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     *\n     * @dev The delegate typically should be set as the owner of the contract.\n     */\n    constructor(address _endpoint, address _delegate) {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n\n        if (_delegate == address(0)) revert InvalidDelegate();\n        endpoint.setDelegate(_delegate);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\n        _setPeer(_eid, _peer);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\n        peers[_eid] = _peer;\n        emit PeerSet(_eid, _peer);\n    }\n\n    /**\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\n     * ie. the peer is set to bytes32(0).\n     * @param _eid The endpoint ID.\n     * @return peer The address of the peer associated with the specified endpoint.\n     */\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\n        bytes32 peer = peers[_eid];\n        if (peer == bytes32(0)) revert NoPeer(_eid);\n        return peer;\n    }\n\n    /**\n     * @notice Sets the delegate address for the OApp.\n     * @param _delegate The address of the delegate to be set.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\n     */\n    function setDelegate(address _delegate) public onlyOwner {\n        endpoint.setDelegate(_delegate);\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { IOAppReceiver, Origin } from \"./interfaces/IOAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppReceiver\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\n */\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\n    // Custom error message for when the caller is not the registered endpoint/\n    error OnlyEndpoint(address addr);\n\n    // @dev The version of the OAppReceiver implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant RECEIVER_VERSION = 2;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\n     * ie. this is a RECEIVE only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (0, RECEIVER_VERSION);\n    }\n\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @dev _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @dev _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata /*_origin*/,\n        bytes calldata /*_message*/,\n        address _sender\n    ) public view virtual returns (bool) {\n        return _sender == address(this);\n    }\n\n    /**\n     * @notice Checks if the path initialization is allowed based on the provided origin.\n     * @param origin The origin information containing the source endpoint and sender address.\n     * @return Whether the path has been initialized.\n     *\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\n     * @dev This defaults to assuming if a peer has been set, its initialized.\n     * Can be overridden by the OApp if there is other logic to determine this.\n     */\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\n        return peers[origin.srcEid] == origin.sender;\n    }\n\n    /**\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\n     * @dev _srcEid The source endpoint ID.\n     * @dev _sender The sender address.\n     * @return nonce The next nonce.\n     *\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\n     * @dev This is also enforced by the OApp.\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\n     */\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\n        return 0;\n    }\n\n    /**\n     * @dev Entry point for receiving messages or packets from the endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The payload of the received message.\n     * @param _executor The address of the executor for the received message.\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\n     *\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\n     */\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) public payable virtual {\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\n\n        // Ensure that the sender matches the expected peer for the source endpoint.\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\n\n        // Call the internal OApp implementation of lzReceive.\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppSender\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\n */\nabstract contract OAppSender is OAppCore {\n    using SafeERC20 for IERC20;\n\n    // Custom error messages\n    error NotEnoughNative(uint256 msgValue);\n    error LzTokenUnavailable();\n\n    // @dev The version of the OAppSender implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant SENDER_VERSION = 1;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\n     * ie. this is a SEND only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (SENDER_VERSION, 0);\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\n     * @return fee The calculated MessagingFee for the message.\n     *      - nativeFee: The native fee for the message.\n     *      - lzTokenFee: The LZ token fee for the message.\n     */\n    function _quote(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        bool _payInLzToken\n    ) internal view virtual returns (MessagingFee memory fee) {\n        return\n            endpoint.quote(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\n                address(this)\n            );\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _fee The calculated LayerZero fee for the message.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\n     * @return receipt The receipt for the sent message.\n     *      - guid: The unique identifier for the sent message.\n     *      - nonce: The nonce of the sent message.\n     *      - fee: The LayerZero fee incurred for the message.\n     */\n    function _lzSend(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        MessagingFee memory _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory receipt) {\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\n        uint256 messageValue = _payNative(_fee.nativeFee);\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\n\n        return\n            // solhint-disable-next-line check-send-result\n            endpoint.send{ value: messageValue }(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\n                _refundAddress\n            );\n    }\n\n    /**\n     * @dev Internal function to pay the native fee associated with the message.\n     * @param _nativeFee The native fee to be paid.\n     * @return nativeFee The amount of native currency paid.\n     *\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\n     * this will need to be overridden because msg.value would contain multiple lzFees.\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\n     */\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\n        return _nativeFee;\n    }\n\n    /**\n     * @dev Internal function to pay the LZ token fee associated with the message.\n     * @param _lzTokenFee The LZ token fee to be paid.\n     *\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\n     */\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\n        address lzToken = endpoint.lzToken();\n        if (lzToken == address(0)) revert LzTokenUnavailable();\n\n        // Pay LZ token fee by sending tokens to the endpoint.\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the Origin so it's exposed to OAppPreCrimeSimulator implementers.\n// solhint-disable-next-line no-unused-import\nimport { InboundPacket, Origin } from \"../libs/Packet.sol\";\n\n/**\n * @title IOAppPreCrimeSimulator Interface\n * @dev Interface for the preCrime simulation functionality in an OApp.\n */\ninterface IOAppPreCrimeSimulator {\n    // @dev simulation result used in PreCrime implementation\n    error SimulationResult(bytes result);\n    error OnlySelf();\n\n    /**\n     * @dev Emitted when the preCrime contract address is set.\n     * @param preCrimeAddress The address of the preCrime contract.\n     */\n    event PreCrimeSet(address preCrimeAddress);\n\n    /**\n     * @dev Retrieves the address of the preCrime contract implementation.\n     * @return The address of the preCrime contract.\n     */\n    function preCrime() external view returns (address);\n\n    /**\n     * @dev Retrieves the address of the OApp contract.\n     * @return The address of the OApp contract.\n     */\n    function oApp() external view returns (address);\n\n    /**\n     * @dev Sets the preCrime contract address.\n     * @param _preCrime The address of the preCrime contract.\n     */\n    function setPreCrime(address _preCrime) external;\n\n    /**\n     * @dev Mocks receiving a packet, then reverts with a series of data to infer the state/result.\n     * @param _packets An array of LayerZero InboundPacket objects representing received packets.\n     */\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) external payable;\n\n    /**\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint Id to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) external view returns (bool);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/precrime/interfaces/IPreCrime.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\nstruct PreCrimePeer {\n    uint32 eid;\n    bytes32 preCrime;\n    bytes32 oApp;\n}\n\n// TODO not done yet\ninterface IPreCrime {\n    error OnlyOffChain();\n\n    // for simulate()\n    error PacketOversize(uint256 max, uint256 actual);\n    error PacketUnsorted();\n    error SimulationFailed(bytes reason);\n\n    // for preCrime()\n    error SimulationResultNotFound(uint32 eid);\n    error InvalidSimulationResult(uint32 eid, bytes reason);\n    error CrimeFound(bytes crime);\n\n    function getConfig(bytes[] calldata _packets, uint256[] calldata _packetMsgValues) external returns (bytes memory);\n\n    function simulate(\n        bytes[] calldata _packets,\n        uint256[] calldata _packetMsgValues\n    ) external payable returns (bytes memory);\n\n    function buildSimulationResult() external view returns (bytes memory);\n\n    function preCrime(\n        bytes[] calldata _packets,\n        uint256[] calldata _packetMsgValues,\n        bytes[] calldata _simulations\n    ) external;\n\n    function version() external view returns (uint64 major, uint8 minor);\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/precrime/libs/Packet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { PacketV1Codec } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\";\n\n/**\n * @title InboundPacket\n * @dev Structure representing an inbound packet received by the contract.\n */\nstruct InboundPacket {\n    Origin origin; // Origin information of the packet.\n    uint32 dstEid; // Destination endpointId of the packet.\n    address receiver; // Receiver address for the packet.\n    bytes32 guid; // Unique identifier of the packet.\n    uint256 value; // msg.value of the packet.\n    address executor; // Executor address for the packet.\n    bytes message; // Message payload of the packet.\n    bytes extraData; // Additional arbitrary data for the packet.\n}\n\n/**\n * @title PacketDecoder\n * @dev Library for decoding LayerZero packets.\n */\nlibrary PacketDecoder {\n    using PacketV1Codec for bytes;\n\n    /**\n     * @dev Decode an inbound packet from the given packet data.\n     * @param _packet The packet data to decode.\n     * @return packet An InboundPacket struct representing the decoded packet.\n     */\n    function decode(bytes calldata _packet) internal pure returns (InboundPacket memory packet) {\n        packet.origin = Origin(_packet.srcEid(), _packet.sender(), _packet.nonce());\n        packet.dstEid = _packet.dstEid();\n        packet.receiver = _packet.receiverB20();\n        packet.guid = _packet.guid();\n        packet.message = _packet.message();\n    }\n\n    /**\n     * @dev Decode multiple inbound packets from the given packet data and associated message values.\n     * @param _packets An array of packet data to decode.\n     * @param _packetMsgValues An array of associated message values for each packet.\n     * @return packets An array of InboundPacket structs representing the decoded packets.\n     */\n    function decode(\n        bytes[] calldata _packets,\n        uint256[] memory _packetMsgValues\n    ) internal pure returns (InboundPacket[] memory packets) {\n        packets = new InboundPacket[](_packets.length);\n        for (uint256 i = 0; i < _packets.length; i++) {\n            bytes calldata packet = _packets[i];\n            packets[i] = PacketDecoder.decode(packet);\n            // @dev Allows the verifier to specify the msg.value that gets passed in lzReceive.\n            packets[i].value = _packetMsgValues[i];\n        }\n    }\n}\n"
    },
    "@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IPreCrime } from \"./interfaces/IPreCrime.sol\";\nimport { IOAppPreCrimeSimulator, InboundPacket, Origin } from \"./interfaces/IOAppPreCrimeSimulator.sol\";\n\n/**\n * @title OAppPreCrimeSimulator\n * @dev Abstract contract serving as the base for preCrime simulation functionality in an OApp.\n */\nabstract contract OAppPreCrimeSimulator is IOAppPreCrimeSimulator, Ownable {\n    // The address of the preCrime implementation.\n    address public preCrime;\n\n    /**\n     * @dev Retrieves the address of the OApp contract.\n     * @return The address of the OApp contract.\n     *\n     * @dev The simulator contract is the base contract for the OApp by default.\n     * @dev If the simulator is a separate contract, override this function.\n     */\n    function oApp() external view virtual returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @dev Sets the preCrime contract address.\n     * @param _preCrime The address of the preCrime contract.\n     */\n    function setPreCrime(address _preCrime) public virtual onlyOwner {\n        preCrime = _preCrime;\n        emit PreCrimeSet(_preCrime);\n    }\n\n    /**\n     * @dev Interface for pre-crime simulations. Always reverts at the end with the simulation results.\n     * @param _packets An array of InboundPacket objects representing received packets to be delivered.\n     *\n     * @dev WARNING: MUST revert at the end with the simulation results.\n     * @dev Gives the preCrime implementation the ability to mock sending packets to the lzReceive function,\n     * WITHOUT actually executing them.\n     */\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) public payable virtual {\n        for (uint256 i = 0; i < _packets.length; i++) {\n            InboundPacket calldata packet = _packets[i];\n\n            // Ignore packets that are not from trusted peers.\n            if (!isPeer(packet.origin.srcEid, packet.origin.sender)) continue;\n\n            // @dev Because a verifier is calling this function, it doesnt have access to executor params:\n            //  - address _executor\n            //  - bytes calldata _extraData\n            // preCrime will NOT work for OApps that rely on these two parameters inside of their _lzReceive().\n            // They are instead stubbed to default values, address(0) and bytes(\"\")\n            // @dev Calling this.lzReceiveSimulate removes ability for assembly return 0 callstack exit,\n            // which would cause the revert to be ignored.\n            this.lzReceiveSimulate{ value: packet.value }(\n                packet.origin,\n                packet.guid,\n                packet.message,\n                packet.executor,\n                packet.extraData\n            );\n        }\n\n        // @dev Revert with the simulation results. msg.sender must implement IPreCrime.buildSimulationResult().\n        revert SimulationResult(IPreCrime(msg.sender).buildSimulationResult());\n    }\n\n    /**\n     * @dev Is effectively an internal function because msg.sender must be address(this).\n     * Allows resetting the call stack for 'internal' calls.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier of the packet.\n     * @param _message The message payload of the packet.\n     * @param _executor The executor address for the packet.\n     * @param _extraData Additional data for the packet.\n     */\n    function lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable virtual {\n        // @dev Ensure ONLY can be called 'internally'.\n        if (msg.sender != address(this)) revert OnlySelf();\n        _lzReceiveSimulate(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The GUID of the LayerZero message.\n     * @param _message The LayerZero message.\n     * @param _executor The address of the off-chain executor.\n     * @param _extraData Arbitrary data passed by the msg executor.\n     *\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\n     */\n    function _lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n\n    /**\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint Id to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual returns (bool);\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { MessagingReceipt, MessagingFee } from \"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\";\n\n/**\n * @dev Struct representing token parameters for the OFT send() operation.\n */\nstruct SendParam {\n    uint32 dstEid; // Destination endpoint ID.\n    bytes32 to; // Recipient address.\n    uint256 amountLD; // Amount to send in local decimals.\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\n    bytes composeMsg; // The composed message for the send() operation.\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\n}\n\n/**\n * @dev Struct representing OFT limit information.\n * @dev These amounts can change dynamically and are up the specific oft implementation.\n */\nstruct OFTLimit {\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\n}\n\n/**\n * @dev Struct representing OFT receipt information.\n */\nstruct OFTReceipt {\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\n}\n\n/**\n * @dev Struct representing OFT fee details.\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\n */\nstruct OFTFeeDetail {\n    int256 feeAmountLD; // Amount of the fee in local decimals.\n    string description; // Description of the fee.\n}\n\n/**\n * @title IOFT\n * @dev Interface for the OftChain (OFT) token.\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\n * @dev This specific interface ID is '0x02e49c2c'.\n */\ninterface IOFT {\n    // Custom error messages\n    error InvalidLocalDecimals();\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\n\n    // Events\n    event OFTSent(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 dstEid, // Destination Endpoint ID.\n        address indexed fromAddress, // Address of the sender on the src chain.\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n    event OFTReceived(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 srcEid, // Source Endpoint ID.\n        address indexed toAddress, // Address of the recipient on the dst chain.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\n\n    /**\n     * @notice Retrieves the address of the token associated with the OFT.\n     * @return token The address of the ERC20 token implementation.\n     */\n    function token() external view returns (address);\n\n    /**\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\n     * @return requiresApproval Needs approval of the underlying token implementation.\n     *\n     * @dev Allows things like wallet implementers to determine integration requirements,\n     * without understanding the underlying token implementation.\n     */\n    function approvalRequired() external view returns (bool);\n\n    /**\n     * @notice Retrieves the shared decimals of the OFT.\n     * @return sharedDecimals The shared decimals of the OFT.\n     */\n    function sharedDecimals() external view returns (uint8);\n\n    /**\n     * @notice Provides the fee breakdown and settings data for an OFT. Unused in the default implementation.\n     * @param _sendParam The parameters for the send operation.\n     * @return limit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return receipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\n\n    /**\n     * @notice Executes the send() operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The fee information supplied by the caller.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\n     * @return receipt The LayerZero messaging receipt from the send() operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/libs/OFTComposeMsgCodec.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nlibrary OFTComposeMsgCodec {\n    // Offset constants for decoding composed messages\n    uint8 private constant NONCE_OFFSET = 8;\n    uint8 private constant SRC_EID_OFFSET = 12;\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\n\n    /**\n     * @dev Encodes a OFT composed message.\n     * @param _nonce The nonce value.\n     * @param _srcEid The source endpoint ID.\n     * @param _amountLD The amount in local decimals.\n     * @param _composeMsg The composed message.\n     * @return _msg The encoded Composed message.\n     */\n    function encode(\n        uint64 _nonce,\n        uint32 _srcEid,\n        uint256 _amountLD,\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\n    ) internal pure returns (bytes memory _msg) {\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\n    }\n\n    /**\n     * @dev Retrieves the nonce for the composed message.\n     * @param _msg The message.\n     * @return The nonce value.\n     */\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the source endpoint ID for the composed message.\n     * @param _msg The message.\n     * @return The source endpoint ID.\n     */\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the amount in local decimals from the composed message.\n     * @param _msg The message.\n     * @return The amount in local decimals.\n     */\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the composeFrom value from the composed message.\n     * @param _msg The message.\n     * @return The composeFrom value.\n     */\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\n    }\n\n    /**\n     * @dev Retrieves the composed message.\n     * @param _msg The message.\n     * @return The composed message.\n     */\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\n        return _msg[COMPOSE_FROM_OFFSET:];\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    /**\n     * @dev Converts bytes32 to an address.\n     * @param _b The bytes32 value to convert.\n     * @return The address representation of bytes32.\n     */\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\n        return address(uint160(uint256(_b)));\n    }\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/libs/OFTMsgCodec.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nlibrary OFTMsgCodec {\n    // Offset constants for encoding and decoding OFT messages\n    uint8 private constant SEND_TO_OFFSET = 32;\n    uint8 private constant SEND_AMOUNT_SD_OFFSET = 40;\n\n    /**\n     * @dev Encodes an OFT LayerZero message.\n     * @param _sendTo The recipient address.\n     * @param _amountShared The amount in shared decimals.\n     * @param _composeMsg The composed message.\n     * @return _msg The encoded message.\n     * @return hasCompose A boolean indicating whether the message has a composed payload.\n     */\n    function encode(\n        bytes32 _sendTo,\n        uint64 _amountShared,\n        bytes memory _composeMsg\n    ) internal view returns (bytes memory _msg, bool hasCompose) {\n        hasCompose = _composeMsg.length > 0;\n        // @dev Remote chains will want to know the composed function caller ie. msg.sender on the src.\n        _msg = hasCompose\n            ? abi.encodePacked(_sendTo, _amountShared, addressToBytes32(msg.sender), _composeMsg)\n            : abi.encodePacked(_sendTo, _amountShared);\n    }\n\n    /**\n     * @dev Checks if the OFT message is composed.\n     * @param _msg The OFT message.\n     * @return A boolean indicating whether the message is composed.\n     */\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\n        return _msg.length > SEND_AMOUNT_SD_OFFSET;\n    }\n\n    /**\n     * @dev Retrieves the recipient address from the OFT message.\n     * @param _msg The OFT message.\n     * @return The recipient address.\n     */\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\n        return bytes32(_msg[:SEND_TO_OFFSET]);\n    }\n\n    /**\n     * @dev Retrieves the amount in shared decimals from the OFT message.\n     * @param _msg The OFT message.\n     * @return The amount in shared decimals.\n     */\n    function amountSD(bytes calldata _msg) internal pure returns (uint64) {\n        return uint64(bytes8(_msg[SEND_TO_OFFSET:SEND_AMOUNT_SD_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the composed message from the OFT message.\n     * @param _msg The OFT message.\n     * @return The composed message.\n     */\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\n        return _msg[SEND_AMOUNT_SD_OFFSET:];\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    /**\n     * @dev Converts bytes32 to an address.\n     * @param _b The bytes32 value to convert.\n     * @return The address representation of bytes32.\n     */\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\n        return address(uint160(uint256(_b)));\n    }\n}\n"
    },
    "@layerzerolabs/oft-evm/contracts/OFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { OApp, Origin } from \"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\";\nimport { OAppOptionsType3 } from \"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\";\nimport { IOAppMsgInspector } from \"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppMsgInspector.sol\";\n\nimport { OAppPreCrimeSimulator } from \"@layerzerolabs/oapp-evm/contracts/precrime/OAppPreCrimeSimulator.sol\";\n\nimport { IOFT, SendParam, OFTLimit, OFTReceipt, OFTFeeDetail, MessagingReceipt, MessagingFee } from \"./interfaces/IOFT.sol\";\nimport { OFTMsgCodec } from \"./libs/OFTMsgCodec.sol\";\nimport { OFTComposeMsgCodec } from \"./libs/OFTComposeMsgCodec.sol\";\n\n/**\n * @title OFTCore\n * @dev Abstract contract for the OftChain (OFT) token.\n */\nabstract contract OFTCore is IOFT, OApp, OAppPreCrimeSimulator, OAppOptionsType3 {\n    using OFTMsgCodec for bytes;\n    using OFTMsgCodec for bytes32;\n\n    // @notice Provides a conversion rate when swapping between denominations of SD and LD\n    //      - shareDecimals == SD == shared Decimals\n    //      - localDecimals == LD == local decimals\n    // @dev Considers that tokens have different decimal amounts on various chains.\n    // @dev eg.\n    //  For a token\n    //      - locally with 4 decimals --> 1.2345 => uint(12345)\n    //      - remotely with 2 decimals --> 1.23 => uint(123)\n    //      - The conversion rate would be 10 ** (4 - 2) = 100\n    //  @dev If you want to send 1.2345 -> (uint 12345), you CANNOT represent that value on the remote,\n    //  you can only display 1.23 -> uint(123).\n    //  @dev To preserve the dust that would otherwise be lost on that conversion,\n    //  we need to unify a denomination that can be represented on ALL chains inside of the OFT mesh\n    uint256 public immutable decimalConversionRate;\n\n    // @notice Msg types that are used to identify the various OFT operations.\n    // @dev This can be extended in child contracts for non-default oft operations\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\n    uint16 public constant SEND = 1;\n    uint16 public constant SEND_AND_CALL = 2;\n\n    // Address of an optional contract to inspect both 'message' and 'options'\n    address public msgInspector;\n    event MsgInspectorSet(address inspector);\n\n    /**\n     * @dev Constructor.\n     * @param _localDecimals The decimals of the token on the local chain (this chain).\n     * @param _endpoint The address of the LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(uint8 _localDecimals, address _endpoint, address _delegate) OApp(_endpoint, _delegate) {\n        if (_localDecimals < sharedDecimals()) revert InvalidLocalDecimals();\n        decimalConversionRate = 10 ** (_localDecimals - sharedDecimals());\n    }\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external pure virtual returns (bytes4 interfaceId, uint64 version) {\n        return (type(IOFT).interfaceId, 1);\n    }\n\n    /**\n     * @dev Retrieves the shared decimals of the OFT.\n     * @return The shared decimals of the OFT.\n     *\n     * @dev Sets an implicit cap on the amount of tokens, over uint64.max() will need some sort of outbound cap / totalSupply cap\n     * Lowest common decimal denominator between chains.\n     * Defaults to 6 decimal places to provide up to 18,446,744,073,709.551615 units (max uint64).\n     * For tokens exceeding this totalSupply(), they will need to override the sharedDecimals function with something smaller.\n     * ie. 4 sharedDecimals would be 1,844,674,407,370,955.1615\n     */\n    function sharedDecimals() public view virtual returns (uint8) {\n        return 6;\n    }\n\n    /**\n     * @dev Sets the message inspector address for the OFT.\n     * @param _msgInspector The address of the message inspector.\n     *\n     * @dev This is an optional contract that can be used to inspect both 'message' and 'options'.\n     * @dev Set it to address(0) to disable it, or set it to a contract address to enable it.\n     */\n    function setMsgInspector(address _msgInspector) public virtual onlyOwner {\n        msgInspector = _msgInspector;\n        emit MsgInspectorSet(_msgInspector);\n    }\n\n    /**\n     * @notice Provides the fee breakdown and settings data for an OFT. Unused in the default implementation.\n     * @param _sendParam The parameters for the send operation.\n     * @return oftLimit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return oftReceipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    )\n        external\n        view\n        virtual\n        returns (OFTLimit memory oftLimit, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory oftReceipt)\n    {\n        uint256 minAmountLD = 0; // Unused in the default implementation.\n        uint256 maxAmountLD = IERC20(this.token()).totalSupply(); // Unused in the default implementation.\n        oftLimit = OFTLimit(minAmountLD, maxAmountLD);\n\n        // Unused in the default implementation; reserved for future complex fee details.\n        oftFeeDetails = new OFTFeeDetail[](0);\n\n        // @dev This is the same as the send() operation, but without the actual send.\n        // - amountSentLD is the amount in local decimals that would be sent from the sender.\n        // - amountReceivedLD is the amount in local decimals that will be credited to the recipient on the remote OFT instance.\n        // @dev The amountSentLD MIGHT not equal the amount the user actually receives. HOWEVER, the default does.\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debitView(\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\n    }\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return msgFee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(\n        SendParam calldata _sendParam,\n        bool _payInLzToken\n    ) external view virtual returns (MessagingFee memory msgFee) {\n        // @dev mock the amount to receive, this is the same operation used in the send().\n        // The quote is as similar as possible to the actual send() operation.\n        (, uint256 amountReceivedLD) = _debitView(_sendParam.amountLD, _sendParam.minAmountLD, _sendParam.dstEid);\n\n        // @dev Builds the options and OFT message to quote in the endpoint.\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\n\n        // @dev Calculates the LayerZero fee for the send() operation.\n        return _quote(_sendParam.dstEid, message, options, _payInLzToken);\n    }\n\n    /**\n     * @dev Executes the send operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The calculated fee for the send() operation.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds.\n     * @return msgReceipt The receipt for the send operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\n        return _send(_sendParam, _fee, _refundAddress);\n    }\n\n    /**\n     * @dev Internal function to execute the send operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The calculated fee for the send() operation.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds.\n     * @return msgReceipt The receipt for the send operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function _send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\n        // @dev Applies the token transfers regarding this send() operation.\n        // - amountSentLD is the amount in local decimals that was ACTUALLY sent/debited from the sender.\n        // - amountReceivedLD is the amount in local decimals that will be received/credited to the recipient on the remote OFT instance.\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\n            msg.sender,\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n\n        // @dev Builds the options and OFT message to quote in the endpoint.\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\n\n        // @dev Sends the message to the LayerZero endpoint and returns the LayerZero msg receipt.\n        msgReceipt = _lzSend(_sendParam.dstEid, message, options, _fee, _refundAddress);\n        // @dev Formulate the OFT receipt.\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\n\n        emit OFTSent(msgReceipt.guid, _sendParam.dstEid, msg.sender, amountSentLD, amountReceivedLD);\n    }\n\n    /**\n     * @dev Internal function to build the message and options.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _amountLD The amount in local decimals.\n     * @return message The encoded message.\n     * @return options The encoded options.\n     */\n    function _buildMsgAndOptions(\n        SendParam calldata _sendParam,\n        uint256 _amountLD\n    ) internal view virtual returns (bytes memory message, bytes memory options) {\n        bool hasCompose;\n        // @dev This generated message has the msg.sender encoded into the payload so the remote knows who the caller is.\n        (message, hasCompose) = OFTMsgCodec.encode(\n            _sendParam.to,\n            _toSD(_amountLD),\n            // @dev Must be include a non empty bytes if you want to compose, EVEN if you dont need it on the remote.\n            // EVEN if you dont require an arbitrary payload to be sent... eg. '0x01'\n            _sendParam.composeMsg\n        );\n        // @dev Change the msg type depending if its composed or not.\n        uint16 msgType = hasCompose ? SEND_AND_CALL : SEND;\n        // @dev Combine the callers _extraOptions with the enforced options via the OAppOptionsType3.\n        options = combineOptions(_sendParam.dstEid, msgType, _sendParam.extraOptions);\n\n        // @dev Optionally inspect the message and options depending if the OApp owner has set a msg inspector.\n        // @dev If it fails inspection, needs to revert in the implementation. ie. does not rely on return boolean\n        address inspector = msgInspector; // caches the msgInspector to avoid potential double storage read\n        if (inspector != address(0)) IOAppMsgInspector(inspector).inspect(message, options);\n    }\n\n    /**\n     * @dev Internal function to handle the receive on the LayerZero endpoint.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The encoded message.\n     * @dev _executor The address of the executor.\n     * @dev _extraData Additional data.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address /*_executor*/, // @dev unused in the default implementation.\n        bytes calldata /*_extraData*/ // @dev unused in the default implementation.\n    ) internal virtual override {\n        // @dev The src sending chain doesnt know the address length on this chain (potentially non-evm)\n        // Thus everything is bytes32() encoded in flight.\n        address toAddress = _message.sendTo().bytes32ToAddress();\n        // @dev Credit the amountLD to the recipient and return the ACTUAL amount the recipient received in local decimals\n        uint256 amountReceivedLD = _credit(toAddress, _toLD(_message.amountSD()), _origin.srcEid);\n\n        if (_message.isComposed()) {\n            // @dev Proprietary composeMsg format for the OFT.\n            bytes memory composeMsg = OFTComposeMsgCodec.encode(\n                _origin.nonce,\n                _origin.srcEid,\n                amountReceivedLD,\n                _message.composeMsg()\n            );\n\n            // @dev Stores the lzCompose payload that will be executed in a separate tx.\n            // Standardizes functionality for executing arbitrary contract invocation on some non-evm chains.\n            // @dev The off-chain executor will listen and process the msg based on the src-chain-callers compose options passed.\n            // @dev The index is used when a OApp needs to compose multiple msgs on lzReceive.\n            // For default OFT implementation there is only 1 compose msg per lzReceive, thus its always 0.\n            endpoint.sendCompose(toAddress, _guid, 0 /* the index of the composed message*/, composeMsg);\n        }\n\n        emit OFTReceived(_guid, _origin.srcEid, toAddress, amountReceivedLD);\n    }\n\n    /**\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The LayerZero message.\n     * @param _executor The address of the off-chain executor.\n     * @param _extraData Arbitrary data passed by the msg executor.\n     *\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\n     */\n    function _lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual override {\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Check if the peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint ID to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     *\n     * @dev Enables OAppPreCrimeSimulator to check whether a potential Inbound Packet is from a trusted source.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual override returns (bool) {\n        return peers[_eid] == _peer;\n    }\n\n    /**\n     * @dev Internal function to remove dust from the given local decimal amount.\n     * @param _amountLD The amount in local decimals.\n     * @return amountLD The amount after removing dust.\n     *\n     * @dev Prevents the loss of dust when moving amounts between chains with different decimals.\n     * @dev eg. uint(123) with a conversion rate of 100 becomes uint(100).\n     */\n    function _removeDust(uint256 _amountLD) internal view virtual returns (uint256 amountLD) {\n        return (_amountLD / decimalConversionRate) * decimalConversionRate;\n    }\n\n    /**\n     * @dev Internal function to convert an amount from shared decimals into local decimals.\n     * @param _amountSD The amount in shared decimals.\n     * @return amountLD The amount in local decimals.\n     */\n    function _toLD(uint64 _amountSD) internal view virtual returns (uint256 amountLD) {\n        return _amountSD * decimalConversionRate;\n    }\n\n    /**\n     * @dev Internal function to convert an amount from local decimals into shared decimals.\n     * @param _amountLD The amount in local decimals.\n     * @return amountSD The amount in shared decimals.\n     */\n    function _toSD(uint256 _amountLD) internal view virtual returns (uint64 amountSD) {\n        return uint64(_amountLD / decimalConversionRate);\n    }\n\n    /**\n     * @dev Internal function to mock the amount mutation from a OFT debit() operation.\n     * @param _amountLD The amount to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @dev _dstEid The destination endpoint ID.\n     * @return amountSentLD The amount sent, in local decimals.\n     * @return amountReceivedLD The amount to be received on the remote chain, in local decimals.\n     *\n     * @dev This is where things like fees would be calculated and deducted from the amount to be received on the remote.\n     */\n    function _debitView(\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 /*_dstEid*/\n    ) internal view virtual returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        // @dev Remove the dust so nothing is lost on the conversion between chains with different decimals for the token.\n        amountSentLD = _removeDust(_amountLD);\n        // @dev The amount to send is the same as amount received in the default implementation.\n        amountReceivedLD = amountSentLD;\n\n        // @dev Check for slippage.\n        if (amountReceivedLD < _minAmountLD) {\n            revert SlippageExceeded(amountReceivedLD, _minAmountLD);\n        }\n    }\n\n    /**\n     * @dev Internal function to perform a debit operation.\n     * @param _from The address to debit.\n     * @param _amountLD The amount to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @param _dstEid The destination endpoint ID.\n     * @return amountSentLD The amount sent in local decimals.\n     * @return amountReceivedLD The amount received in local decimals on the remote.\n     *\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\n     */\n    function _debit(\n        address _from,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\n\n    /**\n     * @dev Internal function to perform a credit operation.\n     * @param _to The address to credit.\n     * @param _amountLD The amount to credit in local decimals.\n     * @param _srcEid The source endpoint ID.\n     * @return amountReceivedLD The amount ACTUALLY received in local decimals.\n     *\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\n     */\n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 _srcEid\n    ) internal virtual returns (uint256 amountReceivedLD);\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/FxRoot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStateSender {\n    function syncState(address receiver, bytes calldata data) external;\n}\n\ninterface IFxStateSender {\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\n}\n\n/**\n * @title FxRoot root contract for fx-portal\n */\ncontract FxRoot is IFxStateSender {\n    IStateSender public stateSender;\n    address public fxChild;\n\n    constructor(address _stateSender) {\n        stateSender = IStateSender(_stateSender);\n    }\n\n    function setFxChild(address _fxChild) public {\n        require(fxChild == address(0x0));\n        fxChild = _fxChild;\n    }\n\n    function sendMessageToChild(address _receiver, bytes calldata _data) public override {\n        bytes memory data = abi.encode(msg.sender, _receiver, _data);\n        stateSender.syncState(fxChild, data);\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/lib/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Create2 adds common methods for minimal proxy with create2\nabstract contract Create2 {\n    // creates clone using minimal proxy\n    function createClone(bytes32 _salt, address _target) internal returns (address _result) {\n        bytes20 _targetBytes = bytes20(_target);\n\n        assembly {\n            let clone := mload(0x40)\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(clone, 0x14), _targetBytes)\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            _result := create2(0, clone, 0x37, _salt)\n        }\n\n        require(_result != address(0), \"Create2: Failed on minimal deploy\");\n    }\n\n    // get minimal proxy creation code\n    function minimalProxyCreationCode(address logic) internal pure returns (bytes memory) {\n        bytes10 creation = 0x3d602d80600a3d3981f3;\n        bytes10 prefix = 0x363d3d373d3d3d363d73;\n        bytes20 targetBytes = bytes20(logic);\n        bytes15 suffix = 0x5af43d82803e903d91602b57fd5bf3;\n        return abi.encodePacked(creation, prefix, targetBytes, suffix);\n    }\n\n    // get computed create2 address\n    function computedCreate2Address(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) public pure returns (address) {\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport {RLPReader} from \"./RLPReader.sol\";\n\nlibrary ExitPayloadReader {\n    using RLPReader for bytes;\n    using RLPReader for RLPReader.RLPItem;\n\n    uint8 constant WORD_SIZE = 32;\n\n    struct ExitPayload {\n        RLPReader.RLPItem[] data;\n    }\n\n    struct Receipt {\n        RLPReader.RLPItem[] data;\n        bytes raw;\n        uint256 logIndex;\n    }\n\n    struct Log {\n        RLPReader.RLPItem data;\n        RLPReader.RLPItem[] list;\n    }\n\n    struct LogTopics {\n        RLPReader.RLPItem[] data;\n    }\n\n    // copy paste of private copy() from RLPReader to avoid changing of existing contracts\n    function copy(\n        uint256 src,\n        uint256 dest,\n        uint256 len\n    ) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n        \n        if (len == 0) return;\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask)) // zero out src\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\n        RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\n\n        return ExitPayload(payloadData);\n    }\n\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[0].toUint();\n    }\n\n    function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\n        return payload.data[1].toBytes();\n    }\n\n    function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[2].toUint();\n    }\n\n    function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[3].toUint();\n    }\n\n    function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\n        return bytes32(payload.data[4].toUint());\n    }\n\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\n        return bytes32(payload.data[5].toUint());\n    }\n\n    function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\n        receipt.raw = payload.data[6].toBytes();\n        RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\n\n        if (receiptItem.isList()) {\n            // legacy tx\n            receipt.data = receiptItem.toList();\n        } else {\n            // pop first byte before parsting receipt\n            bytes memory typedBytes = receipt.raw;\n            bytes memory result = new bytes(typedBytes.length - 1);\n            uint256 srcPtr;\n            uint256 destPtr;\n            assembly {\n                srcPtr := add(33, typedBytes)\n                destPtr := add(0x20, result)\n            }\n\n            copy(srcPtr, destPtr, result.length);\n            receipt.data = result.toRlpItem().toList();\n        }\n\n        receipt.logIndex = getReceiptLogIndex(payload);\n        return receipt;\n    }\n\n    function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\n        return payload.data[7].toBytes();\n    }\n\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\n        return payload.data[8].toBytes();\n    }\n\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[8].toUint();\n    }\n\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\n        return payload.data[9].toUint();\n    }\n\n    // Receipt methods\n    function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\n        return receipt.raw;\n    }\n\n    function getLog(Receipt memory receipt) internal pure returns (Log memory) {\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\n        return Log(logData, logData.toList());\n    }\n\n    // Log methods\n    function getEmitter(Log memory log) internal pure returns (address) {\n        return RLPReader.toAddress(log.list[0]);\n    }\n\n    function getTopics(Log memory log) internal pure returns (LogTopics memory) {\n        return LogTopics(log.list[1].toList());\n    }\n\n    function getData(Log memory log) internal pure returns (bytes memory) {\n        return log.list[2].toBytes();\n    }\n\n    function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\n        return log.data.toRlpBytes();\n    }\n\n    // LogTopics methods\n    function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\n        return topics.data[index];\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/lib/Merkle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Merkle {\n    function checkMembership(\n        bytes32 leaf,\n        uint256 index,\n        bytes32 rootHash,\n        bytes memory proof\n    ) internal pure returns (bool) {\n        require(proof.length % 32 == 0, \"Invalid proof length\");\n        uint256 proofHeight = proof.length / 32;\n        // Proof of size n means, height of the tree is n+1.\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\n        require(index < 2**proofHeight, \"Leaf index is too big\");\n\n        bytes32 proofElement;\n        bytes32 computedHash = leaf;\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            assembly {\n                proofElement := mload(add(proof, i))\n            }\n\n            if (index % 2 == 0) {\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n\n            index = index / 2;\n        }\n        return computedHash == rootHash;\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {RLPReader} from \"./RLPReader.sol\";\n\nlibrary MerklePatriciaProof {\n    /*\n     * @dev Verifies a merkle patricia proof.\n     * @param value The terminating value in the trie.\n     * @param encodedPath The path in the trie leading to value.\n     * @param rlpParentNodes The rlp encoded stack of nodes.\n     * @param root The root hash of the trie.\n     * @return The boolean validity of the proof.\n     */\n    function verify(\n        bytes memory value,\n        bytes memory encodedPath,\n        bytes memory rlpParentNodes,\n        bytes32 root\n    ) internal pure returns (bool) {\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\n\n        bytes memory currentNode;\n        RLPReader.RLPItem[] memory currentNodeList;\n\n        bytes32 nodeKey = root;\n        uint256 pathPtr = 0;\n\n        bytes memory path = _getNibbleArray(encodedPath);\n        if (path.length == 0) {\n            return false;\n        }\n\n        for (uint256 i = 0; i < parentNodes.length; i++) {\n            if (pathPtr > path.length) {\n                return false;\n            }\n\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\n            if (nodeKey != keccak256(currentNode)) {\n                return false;\n            }\n            currentNodeList = RLPReader.toList(parentNodes[i]);\n\n            if (currentNodeList.length == 17) {\n                if (pathPtr == path.length) {\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n\n                uint8 nextPathNibble = uint8(path[pathPtr]);\n                if (nextPathNibble > 16) {\n                    return false;\n                }\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\n                pathPtr += 1;\n            } else if (currentNodeList.length == 2) {\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\n                if (pathPtr + traversed == path.length) {\n                    //leaf node\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n\n                //extension node\n                if (traversed == 0) {\n                    return false;\n                }\n\n                pathPtr += traversed;\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\n            } else {\n                return false;\n            }\n        }\n    }\n\n    function _nibblesToTraverse(\n        bytes memory encodedPartialPath,\n        bytes memory path,\n        uint256 pathPtr\n    ) private pure returns (uint256) {\n        uint256 len = 0;\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\n        // and slicedPath have elements that are each one hex character (1 nibble)\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\n        bytes memory slicedPath = new bytes(partialPath.length);\n\n        // pathPtr counts nibbles in path\n        // partialPath.length is a number of nibbles\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\n            bytes1 pathNibble = path[i];\n            slicedPath[i - pathPtr] = pathNibble;\n        }\n\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\n            len = partialPath.length;\n        } else {\n            len = 0;\n        }\n        return len;\n    }\n\n    // bytes b must be hp encoded\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\n        bytes memory nibbles = \"\";\n        if (b.length > 0) {\n            uint8 offset;\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\n            if (hpNibble == 1 || hpNibble == 3) {\n                nibbles = new bytes(b.length * 2 - 1);\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\n                nibbles[0] = oddNibble;\n                offset = 1;\n            } else {\n                nibbles = new bytes(b.length * 2 - 2);\n                offset = 0;\n            }\n\n            for (uint256 i = offset; i < nibbles.length; i++) {\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\n            }\n        }\n        return nibbles;\n    }\n\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/lib/RLPReader.sol": {
      "content": "/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity ^0.8.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len - _payloadOffset(item.memPtr);\n    }\n\n    /*\n     * @param item RLP encoded list in bytes\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        return result == 0 ? false : true;\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 len = item.len - offset;\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + offset;\n        assembly {\n            result := mload(memPtr)\n\n            // shfit to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 len = item.len - offset; // data length\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(item.memPtr + offset, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\n        else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) return 0;\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\n        else if (byte0 < LIST_SHORT_START)\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        else return byte0 - (LIST_LONG_START - 1) + 1;\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(\n        uint256 src,\n        uint256 dest,\n        uint256 len\n    ) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len == 0) return;\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\n\n        assembly {\n            let srcpart := and(mload(src), not(mask)) // zero out src\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IFxMessageProcessor represents interface to process message\ninterface IFxMessageProcessor {\n    function processMessageFromRoot(\n        uint256 stateId,\n        address rootMessageSender,\n        bytes calldata data\n    ) external;\n}\n\n/**\n * @notice Mock child tunnel contract to receive and send message from L2\n */\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\n    // MessageTunnel on L1 will get data from this event\n    event MessageSent(bytes message);\n\n    // fx child\n    address public fxChild;\n\n    // fx root tunnel\n    address public fxRootTunnel;\n\n    constructor(address _fxChild) {\n        fxChild = _fxChild;\n    }\n\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\n    modifier validateSender(address sender) {\n        require(sender == fxRootTunnel, \"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\");\n        _;\n    }\n\n    // set fxRootTunnel if not set already\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\n        require(fxRootTunnel == address(0x0), \"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\");\n        fxRootTunnel = _fxRootTunnel;\n    }\n\n    function processMessageFromRoot(\n        uint256 stateId,\n        address rootMessageSender,\n        bytes calldata data\n    ) external override {\n        require(msg.sender == fxChild, \"FxBaseChildTunnel: INVALID_SENDER\");\n        _processMessageFromRoot(stateId, rootMessageSender, data);\n    }\n\n    /**\n     * @notice Emit message that can be received on Root Tunnel\n     * @dev Call the internal function when need to emit message\n     * @param message bytes message that will be sent to Root Tunnel\n     * some message examples -\n     *   abi.encode(tokenId);\n     *   abi.encode(tokenId, tokenMetadata);\n     *   abi.encode(messageType, messageData);\n     */\n    function _sendMessageToRoot(bytes memory message) internal {\n        emit MessageSent(message);\n    }\n\n    /**\n     * @notice Process message received from Root Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param stateId unique state id\n     * @param sender root message sender\n     * @param message bytes message that was sent from Root Tunnel\n     */\n    function _processMessageFromRoot(\n        uint256 stateId,\n        address sender,\n        bytes memory message\n    ) internal virtual;\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {RLPReader} from \"../lib/RLPReader.sol\";\nimport {MerklePatriciaProof} from \"../lib/MerklePatriciaProof.sol\";\nimport {Merkle} from \"../lib/Merkle.sol\";\nimport \"../lib/ExitPayloadReader.sol\";\n\ninterface IFxStateSender {\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\n}\n\ncontract ICheckpointManager {\n    struct HeaderBlock {\n        bytes32 root;\n        uint256 start;\n        uint256 end;\n        uint256 createdAt;\n        address proposer;\n    }\n\n    /**\n     * @notice mapping of checkpoint header numbers to block details\n     * @dev These checkpoints are submited by plasma contracts\n     */\n    mapping(uint256 => HeaderBlock) public headerBlocks;\n}\n\nabstract contract FxBaseRootTunnel {\n    using RLPReader for RLPReader.RLPItem;\n    using Merkle for bytes32;\n    using ExitPayloadReader for bytes;\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\n    using ExitPayloadReader for ExitPayloadReader.Log;\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\n\n    // keccak256(MessageSent(bytes))\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\n\n    // state sender contract\n    IFxStateSender public fxRoot;\n    // root chain manager\n    ICheckpointManager public checkpointManager;\n    // child tunnel contract which receives and sends messages\n    address public fxChildTunnel;\n\n    // storage to avoid duplicate exits\n    mapping(bytes32 => bool) public processedExits;\n\n    constructor(address _checkpointManager, address _fxRoot) {\n        checkpointManager = ICheckpointManager(_checkpointManager);\n        fxRoot = IFxStateSender(_fxRoot);\n    }\n\n    // set fxChildTunnel if not set already\n    function setFxChildTunnel(address _fxChildTunnel) public virtual {\n        require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\n        fxChildTunnel = _fxChildTunnel;\n    }\n\n    /**\n     * @notice Send bytes message to Child Tunnel\n     * @param message bytes message that will be sent to Child Tunnel\n     * some message examples -\n     *   abi.encode(tokenId);\n     *   abi.encode(tokenId, tokenMetadata);\n     *   abi.encode(messageType, messageData);\n     */\n    function _sendMessageToChild(bytes memory message) internal {\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\n    }\n\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\n\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\n        uint256 blockNumber = payload.getBlockNumber();\n        // checking if exit has already been processed\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\n        bytes32 exitHash = keccak256(\n            abi.encodePacked(\n                blockNumber,\n                // first 2 nibbles are dropped while generating nibble array\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\n                // so converting to nibble array and then hashing it\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\n                payload.getReceiptLogIndex()\n            )\n        );\n        require(processedExits[exitHash] == false, \"FxRootTunnel: EXIT_ALREADY_PROCESSED\");\n        processedExits[exitHash] = true;\n\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\n        ExitPayloadReader.Log memory log = receipt.getLog();\n\n        // check child tunnel\n        require(fxChildTunnel == log.getEmitter(), \"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\");\n\n        bytes32 receiptRoot = payload.getReceiptRoot();\n        // verify receipt inclusion\n        require(\n            MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\n            \"FxRootTunnel: INVALID_RECEIPT_PROOF\"\n        );\n\n        // verify checkpoint inclusion\n        _checkBlockMembershipInCheckpoint(\n            blockNumber,\n            payload.getBlockTime(),\n            payload.getTxRoot(),\n            receiptRoot,\n            payload.getHeaderNumber(),\n            payload.getBlockProof()\n        );\n\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\n\n        require(\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\n            \"FxRootTunnel: INVALID_SIGNATURE\"\n        );\n\n        // received message data\n        bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\n        return message;\n    }\n\n    function _checkBlockMembershipInCheckpoint(\n        uint256 blockNumber,\n        uint256 blockTime,\n        bytes32 txRoot,\n        bytes32 receiptRoot,\n        uint256 headerNumber,\n        bytes memory blockProof\n    ) private view returns (uint256) {\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\n\n        require(\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\n                blockNumber - startBlock,\n                headerRoot,\n                blockProof\n            ),\n            \"FxRootTunnel: INVALID_HEADER\"\n        );\n        return createdAt;\n    }\n\n    /**\n     * @notice receive message from  L2 to L1, validated by proof\n     * @dev This function verifies if the transaction actually happened on child chain\n     *\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\n     *  2 - blockNumber - Block number containing the reference tx on child chain\n     *  3 - blockTime - Reference tx block time\n     *  4 - txRoot - Transactions root of block\n     *  5 - receiptRoot - Receipts root of block\n     *  6 - receipt - Receipt of the reference transaction\n     *  7 - receiptProof - Merkle proof of the reference receipt\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\n     *  9 - receiptLogIndex - Log Index to read from the receipt\n     */\n    function receiveMessage(bytes memory inputData) public virtual {\n        bytes memory message = _validateAndExtractMessage(inputData);\n        _processMessageFromChild(message);\n    }\n\n    /**\n     * @notice Process message received from Child Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param message bytes message that was sent from Child Tunnel\n     */\n    function _processMessageFromChild(bytes memory message) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "contracts/fx-portal/token/ERC20/FxERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IFxERC20} from \"./interfaces/IFxERC20.sol\";\nimport {ERC20Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\";\nimport {ERC20DetailedStorage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\";\nimport {ERC20MetadataStorage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20MetadataStorage.sol\";\nimport {ERC20PermitStorage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20PermitStorage.sol\";\nimport {FxERC20Storage} from \"./libraries/FxERC20Storage.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ERC20Base} from \"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20Base.sol\";\nimport {ERC20DetailedBase} from \"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20DetailedBase.sol\";\nimport {ERC20MetadataBase} from \"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MetadataBase.sol\";\nimport {ERC20PermitBase} from \"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20PermitBase.sol\";\nimport {ERC20SafeTransfersBase} from \"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20SafeTransfersBase.sol\";\nimport {ERC20BatchTransfersBase} from \"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BatchTransfersBase.sol\";\nimport {InterfaceDetection} from \"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\";\nimport {ContractOwnershipBase} from \"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\";\nimport {TokenRecoveryBase} from \"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\n\n/// @title FxERC20\n/// @notice Base contract for a proxied Fx child ERC20.\nabstract contract FxERC20 is\n    ERC20Base,\n    ERC20DetailedBase,\n    ERC20MetadataBase,\n    ERC20PermitBase,\n    ERC20SafeTransfersBase,\n    ERC20BatchTransfersBase,\n    InterfaceDetection,\n    ContractOwnershipBase,\n    TokenRecoveryBase,\n    IFxERC20,\n    ForwarderRegistryContext\n{\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\n    using FxERC20Storage for FxERC20Storage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function init(\n        address fxManager_,\n        address connectedToken_,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        uint8 tokenDecimals,\n        string calldata uri,\n        address initialOwner\n    ) internal {\n        ERC20Storage.init();\n        ERC20DetailedStorage.layout().proxyInit(tokenName, tokenSymbol, tokenDecimals);\n        ERC20MetadataStorage.init();\n        ERC20MetadataStorage.layout().setTokenURI(uri);\n        ERC20PermitStorage.init();\n        ERC20Storage.initERC20BatchTransfers();\n        ERC20Storage.initERC20SafeTransfers();\n        FxERC20Storage.layout().init(fxManager_, connectedToken_);\n        ContractOwnershipStorage.layout().proxyInit(initialOwner);\n    }\n\n    /// @inheritdoc IFxERC20\n    function fxManager() external view returns (address) {\n        return FxERC20Storage.layout().fxManager();\n    }\n\n    /// @inheritdoc IFxERC20\n    function connectedToken() external view returns (address) {\n        return FxERC20Storage.layout().connectedToken();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"
    },
    "contracts/fx-portal/token/ERC20/FxERC20FixedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IFxERC20FixedSupply} from \"./interfaces/IFxERC20FixedSupply.sol\";\nimport {ERC20Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\";\nimport {FxERC20} from \"./FxERC20.sol\";\n\n/// @title FxERC20FixedSupply\n/// @notice Fx proxied child fixed supply ERC20.\ncontract FxERC20FixedSupply is FxERC20, IFxERC20FixedSupply {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    constructor(IForwarderRegistry forwarderRegistry) FxERC20(forwarderRegistry) {}\n\n    function initialize(\n        address fxManager_,\n        address connectedToken_,\n        uint256 totalSupply,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        uint8 tokenDecimals,\n        string calldata uri,\n        address initialOwner\n    ) external {\n        init(fxManager_, connectedToken_, tokenName, tokenSymbol, tokenDecimals, uri, initialOwner);\n        ERC20Storage.layout().mint(fxManager_, totalSupply);\n    }\n}\n"
    },
    "contracts/fx-portal/token/ERC20/FxERC20MintBurn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IFxERC20MintBurn} from \"./interfaces/IFxERC20MintBurn.sol\";\nimport {ERC20Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\";\nimport {ERC20MintableBase} from \"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20MintableBase.sol\";\nimport {ERC20BurnableBase} from \"@animoca/ethereum-contracts/contracts/token/ERC20/base/ERC20BurnableBase.sol\";\nimport {AccessControlBase} from \"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\";\nimport {FxERC20} from \"./FxERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\n\n/// @title FxERC20MintBurn\n/// @notice Fx proxied child mintable burnable ERC20.\ncontract FxERC20MintBurn is FxERC20, ERC20MintableBase, ERC20BurnableBase, IFxERC20MintBurn, AccessControlBase {\n    constructor(IForwarderRegistry forwarderRegistry) FxERC20(forwarderRegistry) {}\n\n    function initialize(\n        address fxManager_,\n        address connectedToken_,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        uint8 tokenDecimals,\n        string calldata uri,\n        address initialOwner\n    ) external {\n        init(fxManager_, connectedToken_, tokenName, tokenSymbol, tokenDecimals, uri, initialOwner);\n        ERC20Storage.initERC20Mintable();\n        ERC20Storage.initERC20Burnable();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(FxERC20, Context) returns (address) {\n        return FxERC20._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(FxERC20, Context) returns (bytes calldata) {\n        return FxERC20._msgData();\n    }\n}\n"
    },
    "contracts/fx-portal/token/ERC20/interfaces/IFxERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Base interface for an Fx child ERC20\ninterface IFxERC20 {\n    /// @notice Returns the address of Fx Manager (FxChild).\n    function fxManager() external returns (address);\n\n    /// @notice Returns the address of the mapped root token.\n    function connectedToken() external returns (address);\n}\n"
    },
    "contracts/fx-portal/token/ERC20/interfaces/IFxERC20FixedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Initialization interface for an Fx child fixed supply ERC20\ninterface IFxERC20FixedSupply {\n    function initialize(\n        address fxManager,\n        address connectedToken,\n        uint256 totalSupply,\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals,\n        string memory uri,\n        address initialOwner\n    ) external;\n}\n"
    },
    "contracts/fx-portal/token/ERC20/interfaces/IFxERC20MintBurn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Initialization interface for an Fx child mintable and burnable ERC20\ninterface IFxERC20MintBurn {\n    function initialize(\n        address fxManager,\n        address connectedToken,\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals,\n        string memory uri,\n        address initialOwner\n    ) external;\n}\n"
    },
    "contracts/fx-portal/token/ERC20/libraries/FxERC20Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ProxyInitialization} from \"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\";\n\nlibrary FxERC20Storage {\n    using FxERC20Storage for FxERC20Storage.Layout;\n\n    struct Layout {\n        address manager;\n        address rootToken;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.FxERC20.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.FxERC20.phase\")) - 1);\n\n    /// @notice Initializes the storage (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @param fxManager_ The FX manager.\n    /// @param connectedToken_ The root token address.\n    function init(Layout storage s, address fxManager_, address connectedToken_) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.manager = fxManager_;\n        s.rootToken = connectedToken_;\n    }\n\n    function fxManager(Layout storage s) internal view returns (address) {\n        return s.manager;\n    }\n\n    function connectedToken(Layout storage s) internal view returns (address) {\n        return s.rootToken;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "contracts/fx-portal/tunnel/ERC20/FxERC20ChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IFxERC20} from \"./../../token/ERC20/interfaces/IFxERC20.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Address} from \"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\";\nimport {ERC20Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\";\nimport {FxBaseChildTunnel} from \"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\";\nimport {FxTokenMapping} from \"./../FxTokenMapping.sol\";\nimport {FxERC20TunnelEvents} from \"./FxERC20TunnelEvents.sol\";\nimport {ERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\";\nimport {Create2} from \"@maticnetwork/fx-portal/contracts/lib/Create2.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\n\n/// @title FxERC20ChildTunnel\n/// @notice Base contract for an Fx child ERC20 tunnel.\nabstract contract FxERC20ChildTunnel is FxBaseChildTunnel, FxTokenMapping, FxERC20TunnelEvents, ERC20Receiver, Create2, ForwarderRegistryContext {\n    using Address for address;\n\n    string public constant SUFFIX_NAME = \" (Polygon)\";\n    string public constant PREFIX_SYMBOL = \"p\";\n\n    address public immutable CHILD_TOKEN_LOGIC;\n\n    /// @notice Thrown during construction if the provided child token logic address is not a deployed contract.\n    error FxERC20ChildTokenLogicNotContract();\n\n    /// @notice Thrown during a withdrawal if the requested child token withdrawal was not mapped from a root token.\n    error FxERC20TokenNotMapped();\n\n    /// @notice Thrown during a mapping request if the root token already has a mapping.\n    /// @param rootToken The mapped root token.\n    /// @param childToken The mapped child token.\n    error FxERC20TokenAlreadyMapped(address rootToken, address childToken);\n\n    /// @notice Thrown if a sync request is of an unrecognized type.\n    /// @param syncType The unrecognized sync type.\n    error FxERC20InvalidSyncType(bytes32 syncType);\n\n    /// @notice Thrown if a withdrawal recipient is the zero address.\n    error FxERC20InvalidWithdrawalAddress();\n\n    /// @dev Reverts with `FxERC20ChildTokenLogicNotContract` if `childTokenLogic_` is not a contract.\n    constructor(\n        address fxChild,\n        address childTokenLogic_,\n        IForwarderRegistry forwarderRegistry\n    ) FxBaseChildTunnel(fxChild) ForwarderRegistryContext(forwarderRegistry) {\n        if (!childTokenLogic_.hasBytecode()) {\n            revert FxERC20ChildTokenLogicNotContract();\n        }\n        CHILD_TOKEN_LOGIC = childTokenLogic_;\n    }\n\n    /// @notice Handles the receipt of ERC20 tokens as a withdrawal request.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @dev Reverts with `FxERC20InvalidWithdrawalAddress` if `receiver` is encoded in `data` and is the zero address.\n    /// @dev Reverts with `FxERC20TokenNotMapped` if the child token (msg.sender) has not been deployed through a mapping request.\n    // @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Empty if the receiver is the same as the tokens sender, else the abi-encoded address of the receiver.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue) {\n        address receiver = from;\n        if (data.length != 0) {\n            (receiver) = abi.decode(data, (address));\n            if (receiver == address(0)) {\n                revert FxERC20InvalidWithdrawalAddress();\n            }\n        }\n        _withdraw(msg.sender, from, receiver, value);\n        _withdrawReceivedTokens(msg.sender, value);\n        return ERC20Storage.ERC20_RECEIVED;\n    }\n\n    /// @notice Requests the withdrawal of an `amount` of `childToken` by and for the message sender.\n    /// @notice Note: Approval for `amount` of `childToken` must have been previously given to this contract.\n    /// @dev Reverts with `FxERC20TokenNotMapped` if `childToken` has not been deployed through a mapping request.\n    /// @dev Reverts if the token transfer fails for any reason.\n    /// @param childToken The ERC20 child token which has previously been deployed as a mapping for a root token.\n    /// @param amount The amount of tokens to withdraw.\n    function withdraw(address childToken, uint256 amount) external {\n        address withdrawer = _msgSender();\n        _withdraw(childToken, withdrawer, withdrawer, amount);\n        _withdrawTokensFrom(childToken, withdrawer, amount);\n    }\n\n    /// @notice Requests the withdrawal of an `amount` of `childToken` by the message sender and for a `receiver`.\n    /// @notice Note: Approval for `amount` of `childToken` must have been previously given to this contract.\n    /// @dev Reverts with `FxERC20InvalidWithdrawalAddress` if `receiver` is the zero address.\n    /// @dev Reverts with `FxERC20TokenNotMapped` if `childToken` has not been deployed through a mapping request.\n    /// @dev Reverts if the token transfer fails for any reason.\n    /// @param childToken The ERC20 child token which has previously been deployed as a mapping for a root token.\n    /// @param receiver The account receiving the withdrawal.\n    /// @param amount The amount of tokens to withdraw.\n    function withdrawTo(address childToken, address receiver, uint256 amount) external {\n        if (receiver == address(0)) {\n            revert FxERC20InvalidWithdrawalAddress();\n        }\n        address withdrawer = _msgSender();\n        _withdraw(childToken, withdrawer, receiver, amount);\n        _withdrawTokensFrom(childToken, withdrawer, amount);\n    }\n\n    /// @notice Processes a message coming from the root chain.\n    /// @dev Reverts with `FxERC20InvalidSyncType` if the sync type is not DEPOSIT or MAP_TOKEN.\n    function _processMessageFromRoot(uint256 /* stateId */, address sender, bytes memory data) internal override validateSender(sender) {\n        // decode incoming data\n        (bytes32 syncType, bytes memory syncData) = abi.decode(data, (bytes32, bytes));\n\n        if (syncType == DEPOSIT) {\n            _syncDeposit(syncData);\n        } else if (syncType == MAP_TOKEN) {\n            _mapToken(syncData);\n        } else {\n            revert FxERC20InvalidSyncType(syncType);\n        }\n    }\n\n    function _syncDeposit(bytes memory syncData) internal {\n        (address rootToken, address depositor, address receiver, uint256 amount) = abi.decode(syncData, (address, address, address, uint256));\n        address childToken = rootToChildToken[rootToken];\n\n        // deposit tokens\n        _deposit(childToken, receiver, amount);\n\n        emit FxERC20Deposit(rootToken, childToken, depositor, receiver, amount);\n    }\n\n    function _withdraw(address childToken, address withdrawer, address receiver, uint256 amount) internal {\n        address rootToken = IFxERC20(childToken).connectedToken();\n        if (rootToken == address(0x0) || childToken != rootToChildToken[rootToken]) {\n            revert FxERC20TokenNotMapped();\n        }\n\n        _sendMessageToRoot(abi.encode(rootToken, childToken, withdrawer, receiver, amount));\n        emit FxERC20Withdrawal(rootToken, childToken, withdrawer, receiver, amount);\n    }\n\n    function _mapToken(bytes memory syncData) internal returns (address childToken) {\n        (address rootToken, bytes memory initArguments) = abi.decode(syncData, (address, bytes));\n\n        // get root to child token\n        childToken = rootToChildToken[rootToken];\n\n        // check if it's already mapped\n        if (childToken != address(0)) {\n            revert FxERC20TokenAlreadyMapped(rootToken, childToken);\n        }\n\n        // deploy new child token\n        bytes32 salt = keccak256(abi.encodePacked(rootToken));\n        childToken = createClone(salt, CHILD_TOKEN_LOGIC);\n\n        _initializeChildToken(rootToken, childToken, initArguments);\n\n        // map the token\n        rootToChildToken[rootToken] = childToken;\n        emit FxERC20TokenMapping(rootToken, childToken);\n    }\n\n    /// @notice Calls the initialization sequence of a child token.\n    /// @param rootToken The root token address.\n    /// @param childToken The child token address.\n    /// @param initArguments The abi-encoded child token initialization arguments.\n    function _initializeChildToken(address rootToken, address childToken, bytes memory initArguments) internal virtual;\n\n    /// @notice Deposits the tokens received from the root chain.\n    /// @param childToken The child token address.\n    /// @param receiver The deposit receiver address.\n    /// @param amount The deposit amount.\n    function _deposit(address childToken, address receiver, uint256 amount) internal virtual;\n\n    /// @notice Withdraws tokens to the root chain when transferred to this contract via onERC20Received function.\n    /// @dev When this function is called, this contract has already become the owner of the tokens.\n    /// @param childToken The child token address.\n    /// @param amount The withdrawal amount.\n    function _withdrawReceivedTokens(address childToken, uint256 amount) internal virtual;\n\n    /// @notice Withdraws tokens to the root chain from a withdrawer.\n    /// @dev When this function is called, the withdrawer still owns the tokens.\n    /// @param childToken The child token address.\n    /// @param withdrawer The withdrawer address.\n    /// @param amount The withdrawal amount.\n    function _withdrawTokensFrom(address childToken, address withdrawer, uint256 amount) internal virtual;\n}\n"
    },
    "contracts/fx-portal/tunnel/ERC20/FxERC20FixedSupplyChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IFxERC20FixedSupply} from \"./../../token/ERC20/interfaces/IFxERC20FixedSupply.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {FxERC20ChildTunnel} from \"./FxERC20ChildTunnel.sol\";\n\n/// @title FxERC20FixedSupplyChildTunnel\n/// @notice Fx child fixed supply ERC20 tunnel.\ncontract FxERC20FixedSupplyChildTunnel is FxERC20ChildTunnel {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address fxChild,\n        address childTokenLogic,\n        IForwarderRegistry forwarderRegistry\n    ) FxERC20ChildTunnel(fxChild, childTokenLogic, forwarderRegistry) {}\n\n    /// @inheritdoc FxERC20ChildTunnel\n    function _initializeChildToken(address rootToken, address childToken, bytes memory initArguments) internal virtual override {\n        (uint256 totalSupply, string memory name, string memory symbol, uint8 decimals, string memory uri, address initialOwner) = abi.decode(\n            initArguments,\n            (uint256, string, string, uint8, string, address)\n        );\n\n        IFxERC20FixedSupply(childToken).initialize(\n            address(this),\n            rootToken,\n            totalSupply,\n            string(abi.encodePacked(name, SUFFIX_NAME)),\n            string(abi.encodePacked(PREFIX_SYMBOL, symbol)),\n            decimals,\n            uri,\n            initialOwner\n        );\n    }\n\n    /// @inheritdoc FxERC20ChildTunnel\n    /// @notice Unescrows the deposit amount from this contract.\n    function _deposit(address childToken, address receiver, uint256 amount) internal virtual override {\n        IERC20(childToken).safeTransfer(receiver, amount);\n    }\n\n    /// @inheritdoc FxERC20ChildTunnel\n    /// @notice Tokens are already escrowed when coming through the onERC20Received function\n    function _withdrawReceivedTokens(address childToken, uint256 amount) internal virtual override {}\n\n    /// @inheritdoc FxERC20ChildTunnel\n    /// @notice Escrows the withdrawal amount in this contract.\n    function _withdrawTokensFrom(address childToken, address withdrawer, uint256 amount) internal virtual override {\n        IERC20(childToken).safeTransferFrom(withdrawer, address(this), amount);\n    }\n}\n"
    },
    "contracts/fx-portal/tunnel/ERC20/FxERC20FixedSupplyRootTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IERC173} from \"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\";\nimport {IERC20Detailed} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\";\nimport {IERC20Metadata} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {FxERC20RootTunnel} from \"./FxERC20RootTunnel.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title FxERC20FixedSupplyRootTunnel\n/// @notice Fx root fixed supply ERC20 tunnel.\ncontract FxERC20FixedSupplyRootTunnel is FxERC20RootTunnel {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address checkpointManager,\n        address fxRoot,\n        address fxERC20Token,\n        IForwarderRegistry forwarderRegistry\n    ) FxERC20RootTunnel(checkpointManager, fxRoot, fxERC20Token, forwarderRegistry) {}\n\n    /// @inheritdoc FxERC20RootTunnel\n    function _encodeChildTokenInitArgs(address rootToken) internal virtual override returns (bytes memory) {\n        uint256 totalSupply = IERC20(rootToken).totalSupply();\n        IERC20Detailed rootTokenContract = IERC20Detailed(rootToken);\n        string memory name = rootTokenContract.name();\n        string memory symbol = rootTokenContract.symbol();\n        uint8 decimals = rootTokenContract.decimals();\n        string memory tokenURI = IERC20Metadata(rootToken).tokenURI();\n        address owner = IERC173(rootToken).owner();\n\n        return abi.encode(totalSupply, name, symbol, decimals, tokenURI, owner);\n    }\n\n    /// @inheritdoc FxERC20RootTunnel\n    /// @notice Tokens are already escrowed when coming through the onERC20Received function\n    function _depositReceivedTokens(address rootToken, uint256 amount) internal virtual override {}\n\n    /// @inheritdoc FxERC20RootTunnel\n    /// @notice Escrows the deposit amount in this contract.\n    function _depositTokensFrom(address rootToken, address depositor, uint256 amount) internal virtual override {\n        IERC20(rootToken).safeTransferFrom(depositor, address(this), amount);\n    }\n\n    /// @inheritdoc FxERC20RootTunnel\n    /// @notice Unescrows the withdrawal amount from this contract.\n    function _withdraw(address rootToken, address receiver, uint256 amount) internal virtual override {\n        IERC20(rootToken).safeTransfer(receiver, amount);\n    }\n}\n"
    },
    "contracts/fx-portal/tunnel/ERC20/FxERC20MintBurnChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IFxERC20MintBurn} from \"./../../token/ERC20/interfaces/IFxERC20MintBurn.sol\";\nimport {IERC20Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\";\nimport {IERC20Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {FxERC20ChildTunnel} from \"./FxERC20ChildTunnel.sol\";\n\n/// @title FxERC20MintBurnChildTunnel\n/// @notice Fx child mintable burnable ERC20 tunnel.\ncontract FxERC20MintBurnChildTunnel is FxERC20ChildTunnel {\n    constructor(\n        address fxChild,\n        address childTokenLogic,\n        IForwarderRegistry forwarderRegistry\n    ) FxERC20ChildTunnel(fxChild, childTokenLogic, forwarderRegistry) {}\n\n    /// @inheritdoc FxERC20ChildTunnel\n    function _initializeChildToken(address rootToken, address childToken, bytes memory initArguments) internal virtual override {\n        (string memory name, string memory symbol, uint8 decimals, string memory uri, address initialOwner) = abi.decode(\n            initArguments,\n            (string, string, uint8, string, address)\n        );\n\n        IFxERC20MintBurn(childToken).initialize(\n            address(this),\n            rootToken,\n            string(abi.encodePacked(name, SUFFIX_NAME)),\n            string(abi.encodePacked(PREFIX_SYMBOL, symbol)),\n            decimals,\n            uri,\n            initialOwner\n        );\n    }\n\n    /// @inheritdoc FxERC20ChildTunnel\n    /// @notice Mints the deposit amount.\n    function _deposit(address childToken, address receiver, uint256 amount) internal virtual override {\n        IERC20Mintable(childToken).mint(receiver, amount);\n    }\n\n    /// @inheritdoc FxERC20ChildTunnel\n    /// @notice Burns the withdrawal amount.\n    function _withdrawReceivedTokens(address childToken, uint256 amount) internal virtual override {\n        IERC20Burnable(childToken).burn(amount);\n    }\n\n    /// @inheritdoc FxERC20ChildTunnel\n    /// @notice Burns the withdrawal amount.\n    function _withdrawTokensFrom(address childToken, address withdrawer, uint256 amount) internal virtual override {\n        IERC20Burnable(childToken).burnFrom(withdrawer, amount);\n    }\n}\n"
    },
    "contracts/fx-portal/tunnel/ERC20/FxERC20MintBurnRootTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IERC173} from \"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\";\nimport {IERC20Detailed} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Detailed.sol\";\nimport {IERC20Metadata} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Metadata.sol\";\nimport {IERC20Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\";\nimport {IERC20Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {FxERC20RootTunnel} from \"./FxERC20RootTunnel.sol\";\n\n/// @title FxERC20MintBurnRootTunnel\n/// @notice Fx root mintable burnable ERC20 tunnel.\ncontract FxERC20MintBurnRootTunnel is FxERC20RootTunnel {\n    constructor(\n        address checkpointManager,\n        address fxRoot,\n        address fxERC20Token,\n        IForwarderRegistry forwarderRegistry\n    ) FxERC20RootTunnel(checkpointManager, fxRoot, fxERC20Token, forwarderRegistry) {}\n\n    /// @inheritdoc FxERC20RootTunnel\n    function _encodeChildTokenInitArgs(address rootToken) internal virtual override returns (bytes memory) {\n        IERC20Detailed rootTokenContract = IERC20Detailed(rootToken);\n        string memory name = rootTokenContract.name();\n        string memory symbol = rootTokenContract.symbol();\n        uint8 decimals = rootTokenContract.decimals();\n        string memory tokenURI = IERC20Metadata(rootToken).tokenURI();\n        address owner = IERC173(rootToken).owner();\n\n        return abi.encode(name, symbol, decimals, tokenURI, owner);\n    }\n\n    /// @inheritdoc FxERC20RootTunnel\n    /// @notice Burns the deposit amount.\n    function _depositReceivedTokens(address rootToken, uint256 amount) internal virtual override {\n        IERC20Burnable(rootToken).burn(amount);\n    }\n\n    /// @inheritdoc FxERC20RootTunnel\n    /// @notice Burns the deposit amount.\n    function _depositTokensFrom(address rootToken, address depositor, uint256 amount) internal virtual override {\n        IERC20Burnable(rootToken).burnFrom(depositor, amount);\n    }\n\n    /// @inheritdoc FxERC20RootTunnel\n    /// @notice Mints the withdrawal amount.\n    function _withdraw(address rootToken, address receiver, uint256 amount) internal virtual override {\n        IERC20Mintable(rootToken).mint(receiver, amount);\n    }\n}\n"
    },
    "contracts/fx-portal/tunnel/ERC20/FxERC20RootTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\";\nimport {Create2} from \"@maticnetwork/fx-portal/contracts/lib/Create2.sol\";\nimport {ERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\";\nimport {FxBaseRootTunnel} from \"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\";\nimport {FxTokenMapping} from \"./../FxTokenMapping.sol\";\nimport {FxERC20TunnelEvents} from \"./FxERC20TunnelEvents.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\n\n/// @title FxERC20RootTunnel\n/// @notice Base contract for an Fx root ERC20 tunnel.\nabstract contract FxERC20RootTunnel is FxBaseRootTunnel, FxTokenMapping, FxERC20TunnelEvents, ERC20Receiver, Create2, ForwarderRegistryContext {\n    bytes32 public immutable CHILD_TOKEN_PROXY_CODE_HASH;\n\n    /// @notice Thrown when a deposit request refers to an invalid token mapping.\n    /// @param childToken The child token.\n    /// @param expectedRootToken The expected root token.\n    /// @param actualRootToken The actual root token.\n    error FxERC20InvalidMappingOnExit(address childToken, address expectedRootToken, address actualRootToken);\n\n    /// @notice Thrown if a deposit recipient is the zero address.\n    error FxERC20InvalidDepositAddress();\n\n    constructor(\n        address checkpointManager,\n        address fxRoot,\n        address fxERC20Token,\n        IForwarderRegistry forwarderRegistry\n    ) FxBaseRootTunnel(checkpointManager, fxRoot) ForwarderRegistryContext(forwarderRegistry) {\n        // compute child token proxy code hash\n        CHILD_TOKEN_PROXY_CODE_HASH = keccak256(minimalProxyCreationCode(fxERC20Token));\n    }\n\n    /// @notice Map a token to enable its movement via the Fx Portal\n    /// @param rootToken address of token on root chain\n    function mapToken(address rootToken) public returns (address childToken) {\n        childToken = rootToChildToken[rootToken];\n        if (childToken != address(0x0)) {\n            return childToken;\n        }\n\n        // send the mapping request to the child chain\n        _sendMessageToChild(abi.encode(MAP_TOKEN, abi.encode(rootToken, _encodeChildTokenInitArgs(rootToken))));\n\n        // compute child token address before deployment using create2\n        bytes32 salt = keccak256(abi.encodePacked(rootToken));\n        childToken = computedCreate2Address(salt, CHILD_TOKEN_PROXY_CODE_HASH, fxChildTunnel);\n\n        // add into mapped tokens\n        rootToChildToken[rootToken] = childToken;\n        emit FxERC20TokenMapping(rootToken, childToken);\n    }\n\n    /// @notice Handles the receipt of ERC20 tokens as a deposit request.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    // @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Empty if the receiver is the same as the tokens sender, else the abi-encoded address of the receiver.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue) {\n        address receiver = from;\n        if (data.length != 0) {\n            (receiver) = abi.decode(data, (address));\n            if (receiver == address(0)) {\n                revert FxERC20InvalidDepositAddress();\n            }\n        }\n        _deposit(msg.sender, from, receiver, value);\n        _depositReceivedTokens(msg.sender, value);\n\n        return ERC20Storage.ERC20_RECEIVED;\n    }\n\n    /// @notice Deposits an `amount` of `rootToken` by and for the message sender.\n    /// @notice Note: Approval for `amount` of `rootToken` must have been previously given to this contract.\n    /// @dev Reverts if the token transfer fails for any reason.\n    /// @param rootToken The ERC20 root token.\n    /// @param amount The amount of tokens to deposit.\n    function deposit(address rootToken, uint256 amount) external {\n        address depositor = _msgSender();\n        _deposit(rootToken, depositor, depositor, amount);\n        _depositTokensFrom(rootToken, depositor, amount);\n    }\n\n    /// @notice Deposits an `amount` of `rootToken` by the message sender and for a `receiver`.\n    /// @notice Note: Approval for `amount` of `rootToken` must have been previously given to this contract.\n    /// @dev Reverts with `FxERC20TokenNotMapped` if `childToken has not been deployed through a mapping request.\n    /// @dev Reverts if the token transfer fails for any reason.\n    /// @param rootToken The ERC20 root token.\n    /// @param receiver The account receiving the deposit.\n    /// @param amount The amount of tokens to deposit.\n    function depositTo(address rootToken, address receiver, uint256 amount) external {\n        if (receiver == address(0)) {\n            revert FxERC20InvalidDepositAddress();\n        }\n        address depositor = _msgSender();\n        _deposit(rootToken, depositor, receiver, amount);\n        _depositTokensFrom(rootToken, depositor, amount);\n    }\n\n    function _deposit(address rootToken, address depositor, address receiver, uint256 amount) internal {\n        bytes memory message = abi.encode(DEPOSIT, abi.encode(rootToken, depositor, receiver, amount));\n        _sendMessageToChild(message);\n        emit FxERC20Deposit(rootToken, mapToken(rootToken), depositor, receiver, amount);\n    }\n\n    // exit processor\n    function _processMessageFromChild(bytes memory data) internal override {\n        (address rootToken, address childToken, address withdrawer, address receiver, uint256 amount) = abi.decode(\n            data,\n            (address, address, address, address, uint256)\n        );\n\n        // validate mapping for root to child\n        address mappedChildToken = rootToChildToken[rootToken];\n        if (childToken != mappedChildToken) {\n            revert FxERC20InvalidMappingOnExit(rootToken, childToken, mappedChildToken);\n        }\n\n        _withdraw(rootToken, receiver, amount);\n\n        emit FxERC20Withdrawal(rootToken, childToken, withdrawer, receiver, amount);\n    }\n\n    /// @notice Returns the abi-encoded arguments for the Fx child token initialization function.\n    /// @param rootToken The root token address.\n    function _encodeChildTokenInitArgs(address rootToken) internal virtual returns (bytes memory);\n\n    /// @notice Deposits tokens to the child chain when transferred to this contract via onERC20Received function.\n    /// @dev When this function is called, this contract has already become the owner of the tokens.\n    /// @param rootToken The root token address.\n    /// @param amount The token amount to deposit.\n    function _depositReceivedTokens(address rootToken, uint256 amount) internal virtual;\n\n    /// @notice Deposits tokens to the child chain from a withdrawer.\n    /// @dev When this function is called, the withdrawer still owns the tokens.\n    /// @param rootToken The root token address.\n    /// @param depositor The depositor address.\n    /// @param amount The token amount to deposit.\n    function _depositTokensFrom(address rootToken, address depositor, uint256 amount) internal virtual;\n\n    /// @notice Withdraws the tokens received from the child chain.\n    /// @param rootToken The root token address.\n    /// @param receiver The receiver address.\n    /// @param amount The token amount to deposit.\n    function _withdraw(address rootToken, address receiver, uint256 amount) internal virtual;\n}\n"
    },
    "contracts/fx-portal/tunnel/ERC20/FxERC20TunnelEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nabstract contract FxERC20TunnelEvents {\n    /// @notice Emitted when an ERC20 token has been mapped.\n    /// @param rootToken The root ERC20 token.\n    /// @param childToken The child ERC20 token.\n    event FxERC20TokenMapping(address indexed rootToken, address indexed childToken);\n\n    /// @notice Emitted when some ERC20 token has been withdrawn.\n    /// @param rootToken The root ERC20 token.\n    /// @param childToken The child ERC20 token.\n    /// @param withdrawer The withdrawer address.\n    /// @param recipient The recipient address.\n    /// @param amount The withdrawal amount.\n    event FxERC20Withdrawal(address indexed rootToken, address indexed childToken, address withdrawer, address recipient, uint256 amount);\n\n    /// @notice Emitted when some ERC20 token has been deposited.\n    /// @param rootToken The root ERC20 token.\n    /// @param childToken The child ERC20 token.\n    /// @param depositor The depositor address.\n    /// @param recipient The recipient address.\n    /// @param amount The deposit amount.\n    event FxERC20Deposit(address indexed rootToken, address indexed childToken, address depositor, address recipient, uint256 amount);\n}\n"
    },
    "contracts/fx-portal/tunnel/FxTokenMapping.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nabstract contract FxTokenMapping {\n    bytes32 public constant DEPOSIT = keccak256(\"DEPOSIT\");\n    bytes32 public constant MAP_TOKEN = keccak256(\"MAP_TOKEN\");\n\n    mapping(address => address) public rootToChildToken;\n}\n"
    },
    "contracts/layerzero/adapter/ERC20/OFTAdapterCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IOFT} from \"@layerzerolabs/oft-evm/contracts/interfaces/IOFT.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {OFTCore} from \"@layerzerolabs/oft-evm/contracts/OFTCore.sol\";\n\n/// @title OFTAdapterCore\nabstract contract OFTAdapterCore is OFTCore {\n    address internal immutable _INNER_TOKEN;\n\n    /// @notice Constructor for the OFTAdapterCore contract.\n    /// @param innerToken The address of the ERC-20 token to be adapted.\n    /// @param lzEndpoint The LayerZero endpoint address.\n    /// @param delegate The delegate capable of making OApp configurations inside of the endpoint.\n    constructor(\n        address innerToken,\n        address lzEndpoint,\n        address delegate\n    ) OFTCore(IERC20Metadata(innerToken).decimals(), lzEndpoint, delegate) Ownable(delegate) {\n        _INNER_TOKEN = innerToken;\n    }\n\n    /// @inheritdoc IOFT\n    function token() public view returns (address) {\n        return _INNER_TOKEN;\n    }\n\n    /// @inheritdoc IOFT\n    function approvalRequired() external pure virtual returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/layerzero/adapter/ERC20/OFTAdapterFixedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {OFTAdapterCore} from \"./OFTAdapterCore.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title OFTAdapterFixedSupply Contract\n/// @dev OFTAdapter designed to work with an ERC20FixedSupply preset token contract.\ncontract OFTAdapterFixedSupply is OFTAdapterCore {\n    using SafeERC20 for IERC20;\n\n    constructor(address token, address lzEndpoint, address delegate) OFTAdapterCore(token, lzEndpoint, delegate) {}\n\n    /// @notice Locks tokens from the sender's specified balance in this contract.\n    /// @param from The address to debit from.\n    /// @param amountLD The amount of tokens to send in local decimals.\n    /// @param minAmountLD The minimum amount to send in local decimals.\n    /// @param dstEid The destination chain ID.\n    /// @return amountSentLD The amount sent in local decimals.\n    /// @return amountReceivedLD The amount received in local decimals on the remote.\n    function _debit(\n        address from,\n        uint256 amountLD,\n        uint256 minAmountLD,\n        uint32 dstEid\n    ) internal virtual override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        (amountSentLD, amountReceivedLD) = _debitView(amountLD, minAmountLD, dstEid);\n        IERC20(_INNER_TOKEN).safeTransferFrom(from, address(this), amountSentLD);\n    }\n\n    /// @dev Credits tokens to the specified address.\n    /// @param to The address to credit the tokens to.\n    /// @param amountLD The amount of tokens to credit in local decimals.\n    /// @dev srcEid The source chain ID.\n    /// @return amountReceivedLD The amount of tokens ACTUALLY received in local decimals.\n    function _credit(address to, uint256 amountLD, uint32 /*srcEid*/) internal virtual override returns (uint256 amountReceivedLD) {\n        IERC20(_INNER_TOKEN).safeTransfer(to, amountLD);\n        return amountLD;\n    }\n}\n"
    },
    "contracts/layerzero/adapter/ERC20/OFTAdapterMintBurn.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.28;\n\nimport {IERC20Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\";\nimport {IERC20Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\";\nimport {OFTAdapterCore} from \"./OFTAdapterCore.sol\";\n\n/// @title OFTAdapterMintBurn Contract\n/// @dev OFTAdapter designed to work with an ERC20MintBurn preset token contract.\ncontract OFTAdapterMintBurn is OFTAdapterCore {\n    constructor(address token, address lzEndpoint, address delegate) OFTAdapterCore(token, lzEndpoint, delegate) {}\n\n    /// @notice Burns tokens from the sender's specified balance in this contract.\n    /// @param from The address to debit from.\n    /// @param amountLD The amount of tokens to send in local decimals.\n    /// @param minAmountLD The minimum amount to send in local decimals.\n    /// @param dstEid The destination chain ID.\n    /// @return amountSentLD The amount sent in local decimals.\n    /// @return amountReceivedLD The amount received in local decimals on the remote.\n    function _debit(\n        address from,\n        uint256 amountLD,\n        uint256 minAmountLD,\n        uint32 dstEid\n    ) internal virtual override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        (amountSentLD, amountReceivedLD) = _debitView(amountLD, minAmountLD, dstEid);\n        IERC20Burnable(_INNER_TOKEN).burnFrom(from, amountSentLD);\n    }\n\n    /// @dev Mints tokens to the specified address.\n    /// @param to The address to credit the tokens to.\n    /// @param amountLD The amount of tokens to credit in local decimals.\n    /// @dev srcEid The source chain ID.\n    /// @return amountReceivedLD The amount of tokens ACTUALLY received in local decimals.\n    function _credit(address to, uint256 amountLD, uint32 /*srcEid*/) internal virtual override returns (uint256 amountReceivedLD) {\n        IERC20Mintable(_INNER_TOKEN).mint(to, amountLD);\n        return amountLD;\n    }\n}\n"
    },
    "contracts/mocks/fx-portal/FxRootMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {FxRoot} from \"@maticnetwork/fx-portal/contracts/FxRoot.sol\";\n\ncontract FxRootMock is FxRoot {\n    constructor(address stateSender) FxRoot(stateSender) {}\n}\n"
    },
    "contracts/mocks/fx-portal/StateSenderMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IStateSender} from \"@maticnetwork/fx-portal/contracts/FxRoot.sol\";\n\ncontract StateSenderMock is IStateSender {\n    event StateSynced(uint256 indexed id, address indexed contractAddress, bytes data);\n\n    function syncState(address receiver, bytes calldata data) external {\n        emit StateSynced(0, receiver, data);\n    }\n}\n"
    },
    "contracts/mocks/fx-portal/token/ERC20/FxERC20FixedSupplyMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\";\nimport {FxERC20FixedSupply} from \"./../../../../fx-portal/token/ERC20/FxERC20FixedSupply.sol\";\n\ncontract FxERC20FixedSupplyMock is FxERC20FixedSupply {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    constructor(address[] memory holders, uint256[] memory allocations, IForwarderRegistry forwarderRegistry) FxERC20FixedSupply(forwarderRegistry) {\n        ERC20Storage.layout().batchMint(holders, allocations);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/fx-portal/token/ERC20/FxERC20MintBurnMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ERC20Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\";\nimport {FxERC20MintBurn} from \"./../../../../fx-portal/token/ERC20/FxERC20MintBurn.sol\";\n\ncontract FxERC20MintBurnMock is FxERC20MintBurn {\n    using ERC20Storage for ERC20Storage.Layout;\n\n    constructor(address[] memory holders, uint256[] memory allocations, IForwarderRegistry forwarderRegistry) FxERC20MintBurn(forwarderRegistry) {\n        ERC20Storage.layout().batchMint(holders, allocations);\n    }\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
    },
    "contracts/mocks/fx-portal/tunnel/ERC20/FxERC20FixedSupplyRootTunnelMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {FxERC20FixedSupplyRootTunnel} from \"./../../../../fx-portal/tunnel/ERC20/FxERC20FixedSupplyRootTunnel.sol\";\n\ncontract FxERC20FixedSupplyRootTunnelMock is FxERC20FixedSupplyRootTunnel {\n    constructor(\n        address checkpointManager,\n        address fxRoot,\n        address fxERC20Token,\n        IForwarderRegistry forwarderRegistry\n    ) FxERC20FixedSupplyRootTunnel(checkpointManager, fxRoot, fxERC20Token, forwarderRegistry) {}\n\n    function childToken(address rootToken) external view returns (address) {\n        bytes32 salt = keccak256(abi.encodePacked(rootToken));\n        return computedCreate2Address(salt, CHILD_TOKEN_PROXY_CODE_HASH, fxChildTunnel);\n    }\n\n    function __processMessageFromChild(bytes calldata data) external {\n        _processMessageFromChild(data);\n    }\n}\n"
    },
    "contracts/mocks/fx-portal/tunnel/ERC20/FxERC20MintBurnRootTunnelMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {FxERC20MintBurnRootTunnel} from \"./../../../../fx-portal/tunnel/ERC20/FxERC20MintBurnRootTunnel.sol\";\n\ncontract FxERC20MintBurnRootTunnelMock is FxERC20MintBurnRootTunnel {\n    constructor(\n        address checkpointManager,\n        address fxRoot,\n        address fxERC20Token,\n        IForwarderRegistry forwarderRegistry\n    ) FxERC20MintBurnRootTunnel(checkpointManager, fxRoot, fxERC20Token, forwarderRegistry) {}\n\n    function childToken(address rootToken) external view returns (address) {\n        bytes32 salt = keccak256(abi.encodePacked(rootToken));\n        return computedCreate2Address(salt, CHILD_TOKEN_PROXY_CODE_HASH, fxChildTunnel);\n    }\n\n    function __processMessageFromChild(bytes calldata data) external {\n        _processMessageFromChild(data);\n    }\n}\n"
    },
    "contracts/mocks/layerzero/adapter/ERC20/OFTAdapterFixedSupplyMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {OFTAdapterFixedSupply} from \"./../../../../layerzero/adapter/ERC20/OFTAdapterFixedSupply.sol\";\n\ncontract OFTAdapterFixedSupplyMock is OFTAdapterFixedSupply {\n    event Debit(uint256 amountSentLD, uint256 amountReceivedLD);\n    event Credit(uint256 amountReceivedLD);\n\n    constructor(address token, address lzEndpoint, address delegate) OFTAdapterFixedSupply(token, lzEndpoint, delegate) {}\n\n    function debit(address from, uint256 amountLD, uint256 minAmountLD, uint32 dstEid) external {\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(from, amountLD, minAmountLD, dstEid);\n        emit Debit(amountSentLD, amountReceivedLD);\n    }\n\n    function credit(address to, uint256 amountLD, uint32 srcEid) external {\n        uint256 amountReceivedLD = _credit(to, amountLD, srcEid);\n        emit Credit(amountReceivedLD);\n    }\n}\n"
    },
    "contracts/mocks/layerzero/adapter/ERC20/OFTAdapterMintBurnMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {OFTAdapterMintBurn} from \"./../../../../layerzero/adapter/ERC20/OFTAdapterMintBurn.sol\";\n\ncontract OFTAdapterMintBurnMock is OFTAdapterMintBurn {\n    event Debit(uint256 amountSentLD, uint256 amountReceivedLD);\n    event Credit(uint256 amountReceivedLD);\n\n    constructor(address token, address lzEndpoint, address delegate) OFTAdapterMintBurn(token, lzEndpoint, delegate) {}\n\n    function debit(address from, uint256 amountLD, uint256 minAmountLD, uint32 dstEid) external {\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(from, amountLD, minAmountLD, dstEid);\n        emit Debit(amountSentLD, amountReceivedLD);\n    }\n\n    function credit(address to, uint256 amountLD, uint32 srcEid) external {\n        uint256 amountReceivedLD = _credit(to, amountLD, srcEid);\n        emit Credit(amountReceivedLD);\n    }\n}\n"
    },
    "contracts/mocks/layerzero/EndpointV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\ncontract EndpointV2Mock {\n    function setDelegate(address delegate) external {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}