{
  "address": "0x42503cd6f4f90985409FD917C0502B22a366F48e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IForwarderRegistry",
          "name": "forwarderRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "increment",
          "type": "uint256"
        }
      ],
      "name": "ERC20AllowanceOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC20ApprovalToAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20BatchMintValuesOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20BatchTransferValuesOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decrement",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20MintToAddressZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "ERC20PermitExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20PermitFromAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20PermitInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "ERC20SafeTransferRejected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ERC20TotalSupplyOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC20TransferToAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentArrayLengths",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "IncorrectTokenContractType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentPhase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPhase",
          "type": "uint256"
        }
      ],
      "name": "InitializationPhaseAlreadyReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotContractOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forwarderRegistry",
      "outputs": [
        {
          "internalType": "contract IForwarderRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "allocations",
          "type": "uint256[]"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "recoverERC20s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC721[]",
          "name": "contracts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "recoverERC721s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x617ed427c7e490fbe9abff3f65e2c11819f537df6bd36eff57aa1ab32a5245a6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x80b12BD0F1793BF6CEa767Fa83Eb2068eaa17DC8",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "3113031",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x72847e815496ec34ba4fcf95bb5f26a32a0528274c1796206a2c221623905c1a",
    "transactionHash": "0x617ed427c7e490fbe9abff3f65e2c11819f537df6bd36eff57aa1ab32a5245a6",
    "logs": [],
    "blockNumber": 319240452,
    "cumulativeGasUsed": "3135929",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x316a472D084489CB6d4C66e5eB62aE3AdA17521e"
  ],
  "numDeployments": 1,
  "solcInputHash": "84bab0eb3356c2e3bedca0f2f5a163c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"ERC20AllowanceOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC20ApprovalToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20BatchMintValuesOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20BatchTransferValuesOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC20PermitExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20PermitFromAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20PermitInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ERC20SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20TotalSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC20TransferToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPhase\",\"type\":\"uint256\"}],\"name\":\"InitializationPhaseAlreadyReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20AllowanceOverflow(address,address,uint256,uint256)\":[{\"params\":{\"allowance\":\"The current allowance.\",\"increment\":\"The allowance increase.\",\"owner\":\"The owner of the tokens.\",\"spender\":\"The spender of the tokens.\"}}],\"ERC20ApprovalToAddressZero(address)\":[{\"params\":{\"owner\":\"The owner of the tokens.\"}}],\"ERC20InsufficientAllowance(address,address,uint256,uint256)\":[{\"params\":{\"allowance\":\"The current allowance.\",\"decrement\":\"The allowance decrease.\",\"owner\":\"The owner of the tokens.\",\"spender\":\"The spender of the tokens.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"params\":{\"balance\":\"The current balance.\",\"owner\":\"The owner of the tokens.\",\"value\":\"The amount of tokens being transferred.\"}}],\"ERC20PermitExpired(uint256)\":[{\"params\":{\"deadline\":\"The permit deadline.\"}}],\"ERC20SafeTransferRejected(address)\":[{\"params\":{\"recipient\":\"The recipient contract.\"}}],\"ERC20TotalSupplyOverflow(uint256,uint256)\":[{\"params\":{\"supply\":\"The current supply.\",\"value\":\"The amount of tokens being minted.\"}}],\"ERC20TransferToAddressZero(address)\":[{\"params\":{\"owner\":\"The account from which the tokens are transferred.\"}}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InitializationPhaseAlreadyReached(uint256,uint256)\":[{\"params\":{\"currentPhase\":\"The current phase.\",\"newPhase\":\"The new phase trying to be set.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"The account granting an allowance to `spender`.\",\"spender\":\"The account being granted an allowance from `owner`.\",\"value\":\"The allowance amount being granted.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The account where the transferred tokens are withdrawn from.\",\"to\":\"The account where the transferred tokens are deposited to.\",\"value\":\"The amount of tokens being transferred.\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.\",\"returns\":{\"_0\":\"The EIP-712 encoded hash struct of the domain-specific information for permits.\"}},\"allowance(address,address)\":{\"params\":{\"owner\":\"The account that has granted an allowance to `spender`.\",\"spender\":\"The account that was granted an allowance by `owner`.\"},\"returns\":{\"value\":\"The amount which `spender` is allowed to spend on behalf of `owner`.\"}},\"approve(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Emits an {Approval} event.\",\"params\":{\"spender\":\"The account being granted the allowance by the message caller.\",\"value\":\"The allowance amount to grant.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The account whose balance will be returned.\"},\"returns\":{\"balance\":\"The account balance.\"}},\"batchTransfer(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.\",\"params\":{\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"batchTransferFrom(address,address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to be transferred.\",\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"decimals()\":{\"details\":\"Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\",\"returns\":{\"_0\":\"The number of decimals used to display the balances.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being decreased.\",\"value\":\"The allowance amount decrease.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being increased.\",\"value\":\"The allowance amount increase.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token.\"}},\"nonces(address)\":{\"params\":{\"owner\":\"The account to check the nonce of.\"},\"returns\":{\"_0\":\"The current permit nonce of `owner`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.\",\"params\":{\"deadline\":\"The deadline from which the permit signature is no longer valid.\",\"owner\":\"The token owner granting the allowance to `spender`.\",\"r\":\"Permit signature r parameter.\",\"s\":\"Permit signature s parameter.\",\"spender\":\"The token spender being granted the allowance by `owner`.\",\"v\":\"Permit signature v parameter\",\"value\":\"The allowance amount to grant.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"setTokenURI(string)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.\",\"params\":{\"uri\":\"The token URI.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"symbol()\":{\"returns\":{\"_0\":\"The symbol of the token.\"}},\"tokenURI()\":{\"returns\":{\"_0\":\"The token metadata URI.\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"The total token supply.\"}},\"transfer(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.\",\"params\":{\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC20 Fungible Token Standard, fixed supply preset contract (proxied version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20AllowanceOverflow(address,address,uint256,uint256)\":[{\"notice\":\"Thrown when the allowance increase creates an overflow.\"}],\"ERC20ApprovalToAddressZero(address)\":[{\"notice\":\"Thrown when setting an allowance to the the zero address.\"}],\"ERC20BatchMintValuesOverflow()\":[{\"notice\":\"Thrown when the `values` array sum overflows on a batch mint operation.\"}],\"ERC20BatchTransferValuesOverflow()\":[{\"notice\":\"Thrown when the `values` array sum overflows on a batch transfer operation.\"}],\"ERC20InsufficientAllowance(address,address,uint256,uint256)\":[{\"notice\":\"Thrown when the allowance decreases below the current alowance set.\"}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"notice\":\"Thrown when transferring an amount of tokens greater than the current balance.\"}],\"ERC20MintToAddressZero()\":[{\"notice\":\"Thrown when the minting tokens to the zero address.\"}],\"ERC20PermitExpired(uint256)\":[{\"notice\":\"Thrown when the permit is expired.\"}],\"ERC20PermitFromAddressZero()\":[{\"notice\":\"Thrown when the permit is from the zero address.\"}],\"ERC20PermitInvalidSignature()\":[{\"notice\":\"Thrown when the permit signature cannot be verified.\"}],\"ERC20SafeTransferRejected(address)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"ERC20TotalSupplyOverflow(uint256,uint256)\":[{\"notice\":\"Thrown when the minting tokens overflows the supply.\"}],\"ERC20TransferToAddressZero(address)\":[{\"notice\":\"Thrown when transferring tokens to the zero address.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"InitializationPhaseAlreadyReached(uint256,uint256)\":[{\"notice\":\"Emitted when trying to set a phase value that has already been reached.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when an approval is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\"},\"allowance(address,address)\":{\"notice\":\"Gets the amount that an account is allowed to spend on behalf of another.\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"balanceOf(address)\":{\"notice\":\"Gets an account balance.\"},\"batchTransfer(address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from the sender.\"},\"batchTransferFrom(address,address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from a specified address.\"},\"decimals()\":{\"notice\":\"Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"nonces(address)\":{\"notice\":\"Gets the current permit nonce of an account.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"},\"setTokenURI(string)\":{\"notice\":\"Sets the token URI.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI()\":{\"notice\":\"Gets the token metadata URI.\"},\"totalSupply()\":{\"notice\":\"Gets the total token supply.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/ERC20/preset/proxied/ERC20FixedSupplyProxied.sol\":\"ERC20FixedSupplyProxied\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"contracts/token/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ERC20Base is IERC20, IERC20Allowance, Context {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20\\n    function approve(address spender, uint256 value) external virtual returns (bool result) {\\n        ERC20Storage.layout().approve(_msgSender(), spender, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(address to, uint256 value) external virtual returns (bool result) {\\n        ERC20Storage.layout().transfer(_msgSender(), to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(address from, address to, uint256 value) external virtual returns (bool result) {\\n        ERC20Storage.layout().transferFrom(_msgSender(), from, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Allowance\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool result) {\\n        ERC20Storage.layout().increaseAllowance(_msgSender(), spender, addedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Allowance\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool result) {\\n        ERC20Storage.layout().decreaseAllowance(_msgSender(), spender, subtractedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() external view returns (uint256 supply) {\\n        return ERC20Storage.layout().totalSupply();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC20Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256 value) {\\n        return ERC20Storage.layout().allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0xf97a513d511ec7919121b5f6afb3f297272c07966c4ce5fe0e69113f953e2bed\",\"license\":\"MIT\"},\"contracts/token/ERC20/base/ERC20BatchTransfersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Batch Transfers (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20BatchTransfersBase is IERC20BatchTransfers, Context {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20BatchTransfers\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external virtual returns (bool) {\\n        ERC20Storage.layout().batchTransfer(_msgSender(), recipients, values);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20BatchTransfers\\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external virtual returns (bool) {\\n        ERC20Storage.layout().batchTransferFrom(_msgSender(), from, recipients, values);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x3ccbda2d02d138a0fdbbac63cf9beede244ce77b777978ce9ee69847f14d3394\",\"license\":\"MIT\"},\"contracts/token/ERC20/base/ERC20DetailedBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./../libraries/ERC20DetailedStorage.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Detailed (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20DetailedBase is IERC20Detailed {\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    /// @inheritdoc IERC20Detailed\\n    function name() external view returns (string memory) {\\n        return ERC20DetailedStorage.layout().name();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function symbol() external view returns (string memory) {\\n        return ERC20DetailedStorage.layout().symbol();\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function decimals() external view returns (uint8) {\\n        return ERC20DetailedStorage.layout().decimals();\\n    }\\n}\\n\",\"keccak256\":\"0x45bd624da6d9eabc6529a398628be1d4239b641f16b126bd38976010456d2a54\",\"license\":\"MIT\"},\"contracts/token/ERC20/base/ERC20MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {ERC20MetadataStorage} from \\\"./../libraries/ERC20MetadataStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract ERC20MetadataBase is IERC20Metadata, Context {\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Sets the token URI.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @param uri The token URI.\\n    function setTokenURI(string calldata uri) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        ERC20MetadataStorage.layout().setTokenURI(uri);\\n    }\\n\\n    /// @inheritdoc IERC20Metadata\\n    function tokenURI() external view returns (string memory) {\\n        return ERC20MetadataStorage.layout().tokenURI();\\n    }\\n}\\n\",\"keccak256\":\"0x62a50d05465a8e741aaeec03804ea64ec4ce0f957cf89cecb3fed8e7d81d08db\",\"license\":\"MIT\"},\"contracts/token/ERC20/base/ERC20PermitBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {ERC20PermitStorage} from \\\"./../libraries/ERC20PermitStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Permit (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\n/// @dev Note: This contract requires ERC20Detailed.\\nabstract contract ERC20PermitBase is IERC20Permit, Context {\\n    using ERC20PermitStorage for ERC20PermitStorage.Layout;\\n\\n    /// @inheritdoc IERC20Permit\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        ERC20PermitStorage.layout().permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc IERC20Permit\\n    function nonces(address owner) external view returns (uint256) {\\n        return ERC20PermitStorage.layout().nonces(owner);\\n    }\\n\\n    /// @inheritdoc IERC20Permit\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return ERC20PermitStorage.DOMAIN_SEPARATOR();\\n    }\\n}\\n\",\"keccak256\":\"0x945240532fef42e83a1a6544dfbac715e0be7b4333a5662bd5a00dfadec9b162\",\"license\":\"MIT\"},\"contracts/token/ERC20/base/ERC20SafeTransfersBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Safe Transfers (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20SafeTransfersBase is IERC20SafeTransfers, Context {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20SafeTransfers\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external virtual returns (bool) {\\n        ERC20Storage.layout().safeTransfer(_msgSender(), to, value, data);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20SafeTransfers\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external virtual returns (bool) {\\n        ERC20Storage.layout().safeTransferFrom(_msgSender(), from, to, value, data);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf8d1c0c577b37f500be19f13d461a0612a36cac06cc99ce011b068e7ede60af7\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20AllowanceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the allowance increase creates an overflow.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param increment The allowance increase.\\nerror ERC20AllowanceOverflow(address owner, address spender, uint256 allowance, uint256 increment);\\n\",\"keccak256\":\"0x4f9dbb3db998429b996aeeaa937ab2cecb0e65b14359bfd2c59d8926aa35b9c9\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch transfer operation.\\nerror ERC20BatchTransferValuesOverflow();\\n\",\"keccak256\":\"0x1d5238c7a3a1a2bbea8bf4c3dbb3f479047c6d66566c02fa0e253fb59deff38f\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting an allowance to the the zero address.\\n/// @param owner The owner of the tokens.\\nerror ERC20ApprovalToAddressZero(address owner);\\n\\n/// @notice Thrown when the allowance decreases below the current alowance set.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param decrement The allowance decrease.\\nerror ERC20InsufficientAllowance(address owner, address spender, uint256 allowance, uint256 decrement);\\n\\n/// @notice Thrown when transferring tokens to the zero address.\\n/// @param owner The account from which the tokens are transferred.\\nerror ERC20TransferToAddressZero(address owner);\\n\\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\\n/// @param owner The owner of the tokens.\\n/// @param balance The current balance.\\n/// @param value The amount of tokens being transferred.\\nerror ERC20InsufficientBalance(address owner, uint256 balance, uint256 value);\\n\",\"keccak256\":\"0x43d145fcf88405e58f2bdb28d5f4e2ac12b98507af3bc9f8c7cdee4b908404c1\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the minting tokens to the zero address.\\nerror ERC20MintToAddressZero();\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch mint operation.\\nerror ERC20BatchMintValuesOverflow();\\n\\n/// @notice Thrown when the minting tokens overflows the supply.\\n/// @param supply The current supply.\\n/// @param value The amount of tokens being minted.\\nerror ERC20TotalSupplyOverflow(uint256 supply, uint256 value);\\n\",\"keccak256\":\"0x2f18d0b1ceecdc4684b8b2bf41887042a10e9a9fd1054b881032b08c48c047a1\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20PermitErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the permit is from the zero address.\\nerror ERC20PermitFromAddressZero();\\n\\n/// @notice Thrown when the permit is expired.\\n/// @param deadline The permit deadline.\\nerror ERC20PermitExpired(uint256 deadline);\\n\\n/// @notice Thrown when the permit signature cannot be verified.\\nerror ERC20PermitInvalidSignature();\\n\",\"keccak256\":\"0x35cf4e93c46e2f29947d0d17a539e5fa28a8418a174e9b8ab5f7e446451536a8\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\nerror ERC20SafeTransferRejected(address recipient);\\n\",\"keccak256\":\"0x3377653b83de8fd8a72bc7b66179ac8e8f7bcafba89a6c6db11e7906a880ecd1\",\"license\":\"MIT\"},\"contracts/token/ERC20/events/ERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when tokens are transferred, including zero value transfers.\\n/// @param from The account where the transferred tokens are withdrawn from.\\n/// @param to The account where the transferred tokens are deposited to.\\n/// @param value The amount of tokens being transferred.\\nevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n/// @notice Emitted when an approval is set.\\n/// @param owner The account granting an allowance to `spender`.\\n/// @param spender The account being granted an allowance from `owner`.\\n/// @param value The allowance amount being granted.\\nevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\",\"keccak256\":\"0xd4a596f9748c2c306ad9e602956d2cdc17f5d8bfca99647e142b63d44f7d0a82\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0x1f52c6f79dc8a1681712811688753d65c12a684fc94aeb776c65780b0125c1df\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xf11a7de9258ff2518af82357afdf852352b4f9759e2372e5b0c89dcbf142c50d\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x147f181fad3ab906471b002325e02a2395218c5e49de4da011d3ac0591742e22\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x298558ada849681cab64032d620c31f956c5296506006f7273cbf58974372c27\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Detailed.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xa219a025.\\ninterface IERC20Detailed {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals() external view returns (uint8 nbDecimals);\\n}\\n\",\"keccak256\":\"0x9d03e597b3b95f541d3239a1a6b27f4b14a14100ef4bf7ced23d526fe74a17d7\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, ERC1046 optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1046\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3c130d90.\\ninterface IERC20Metadata {\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI() external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x124023ceaa9020daa316a224d43527f08deaa45dfe0d53f77d7f28540fa1b3c2\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x8507c91851eebb6bcf4a7b416d0d2ed25400162b96b140951bbcc9ccdbc8d9c4\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, ERC2612 optional extension: permit \\u2013 712-signed approvals\\n/// @notice Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2612\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\\ninterface IERC20Permit {\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @notice Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @dev Reverts if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(address owner) external view returns (uint256 nonce);\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator);\\n}\\n\",\"keccak256\":\"0x31180baa873768b6e5def44e74dc4a87230dc40cef0533cd9c4b0cc8ca197a88\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"},\"contracts/token/ERC20/libraries/ERC20DetailedStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Detailed} from \\\"./../interfaces/IERC20Detailed.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20DetailedStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint8 tokenDecimals;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Detailed.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with the token details (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function constructorInit(Layout storage s, string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with the token details (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Detailed.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenDecimals The token decimals.\\n    function proxyInit(Layout storage s, string calldata tokenName, string calldata tokenSymbol, uint8 tokenDecimals) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenDecimals = tokenDecimals;\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Detailed).interfaceId, true);\\n    }\\n\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the number of decimals used to display the balances.\\n    /// @notice For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n    /// @notice Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    /// @dev Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.\\n    /// @return nbDecimals The number of decimals used to display the balances.\\n    function decimals(Layout storage s) internal view returns (uint8 nbDecimals) {\\n        return s.tokenDecimals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0860eb49b2885a96a582aa7c3c89b375a15342f1f5c39a21f4252cdea347173a\",\"license\":\"MIT\"},\"contracts/token/ERC20/libraries/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Metadata} from \\\"./../interfaces/IERC20Metadata.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20MetadataStorage {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n\\n    struct Layout {\\n        string uri;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Metadata.storage\\\")) - 1);\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Metadata.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the token URI.\\n    /// @param uri The token URI.\\n    function setTokenURI(Layout storage s, string calldata uri) internal {\\n        s.uri = uri;\\n    }\\n\\n    /// @notice Gets the token metadata URI.\\n    /// @return uri The token metadata URI.\\n    function tokenURI(Layout storage s) internal view returns (string memory uri) {\\n        return s.uri;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x14c5cce9fed173abc39d622577eb43e3c471f86d0108406610540de7b57d8036\",\"license\":\"MIT\"},\"contracts/token/ERC20/libraries/ERC20PermitStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ERC20PermitFromAddressZero, ERC20PermitExpired, ERC20PermitInvalidSignature} from \\\"./../errors/ERC20PermitErrors.sol\\\";\\nimport {IERC20Permit} from \\\"./../interfaces/IERC20Permit.sol\\\";\\nimport {ERC20Storage} from \\\"./ERC20Storage.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./ERC20DetailedStorage.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20PermitStorage {\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) accountNonces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20Permit.storage\\\")) - 1);\\n\\n    // 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Permit.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Permit).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account from another account using a signed permit.\\n    /// @dev Reverts with {ERC20PermitFromZeroAddress} if `owner` is the zero address.\\n    /// @dev Reverts with {ERC20PermitExpired} if the current blocktime is greather than `deadline`.\\n    /// @dev Reverts with {ERC20PermitInvalidSignature} if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.\\n    /// @dev Emits an {IERC20-Approval} event.\\n    /// @param owner The token owner granting the allowance to `spender`.\\n    /// @param spender The token spender being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    /// @param deadline The deadline from which the permit signature is no longer valid.\\n    /// @param v Permit signature v parameter\\n    /// @param r Permit signature r parameter.\\n    /// @param s Permit signature s parameter.\\n    function permit(Layout storage st, address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal {\\n        if (owner == address(0)) revert ERC20PermitFromAddressZero();\\n        if (block.timestamp > deadline) revert ERC20PermitExpired(deadline);\\n        unchecked {\\n            bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, st.accountNonces[owner]++, deadline));\\n            bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hashStruct));\\n            address signer = ecrecover(hash, v, r, s);\\n            if (signer != owner) revert ERC20PermitInvalidSignature();\\n        }\\n        ERC20Storage.layout().approve(owner, spender, value);\\n    }\\n\\n    /// @notice Gets the current permit nonce of an account.\\n    /// @param owner The account to check the nonce of.\\n    /// @return nonce The current permit nonce of `owner`.\\n    function nonces(Layout storage s, address owner) internal view returns (uint256 nonce) {\\n        return s.accountNonces[owner];\\n    }\\n\\n    /// @notice Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\\n    /// @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\\n    ///  keccak256(\\n    ///      abi.encode(\\n    ///          keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n    ///          keccak256(bytes(name)),\\n    ///          keccak256(bytes(version)),\\n    ///          chainId,\\n    ///          address(this)))\\n    ///\\n    ///  where\\n    ///   - `name` (string) is the ERC-20 token name.\\n    ///   - `version` (string) refers to the ERC-20 token contract version.\\n    ///   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\\n    ///   - `verifyingContract` (address) is the ERC-20 token contract address.\\n    ///\\n    /// @return domainSeparator The EIP-712 encoded hash struct of the domain-specific information for permits.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() internal view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(ERC20DetailedStorage.layout().name())),\\n                    keccak256(\\\"1\\\"),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe294b973941c35683279733dc2ae5b160a157af4d0da80a24a41503fb9f28311\",\"license\":\"MIT\"},\"contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC20ApprovalToAddressZero, ERC20InsufficientAllowance, ERC20TransferToAddressZero, ERC20InsufficientBalance} from \\\"./../errors/ERC20Errors.sol\\\";\\nimport {ERC20AllowanceOverflow} from \\\"./../errors/ERC20AllowanceErrors.sol\\\";\\nimport {ERC20BatchTransferValuesOverflow} from \\\"./../errors/ERC20BatchTransfersErrors.sol\\\";\\nimport {ERC20SafeTransferRejected} from \\\"./../errors/ERC20SafeTransfersErrors.sol\\\";\\nimport {ERC20MintToAddressZero, ERC20BatchMintValuesOverflow, ERC20TotalSupplyOverflow} from \\\"./../errors/ERC20MintableErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval} from \\\"./../events/ERC20Events.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"./../../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.phase\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function initWithAllocations(address[] memory initialHolders, uint256[] memory initialAllocations) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        init();\\n        layout().batchMint(initialHolders, initialAllocations);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = currentAllowance + value;\\n                if (newAllowance <= currentAllowance) revert ERC20AllowanceOverflow(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n\\n        if (currentAllowance != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = currentAllowance - value;\\n                if (newAllowance >= currentAllowance) revert ERC20InsufficientAllowance(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n            uint256 value = values[i];\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n            }\\n            emit Transfer(from, to, value);\\n        }\\n\\n        if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n            unchecked {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n            uint256 value = values[i];\\n\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n            }\\n\\n            emit Transfer(from, to, value);\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                unchecked {\\n                    uint256 newBalance = balance - totalValue;\\n                    // balance must be sufficient, including self-transfers\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                    s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n                }\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transfer(from, to, value);\\n        if (to.hasBytecode()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.hasBytecode()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(Layout storage s, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20MintToAddressZero();\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, value);\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20MintToAddressZero();\\n\\n            uint256 value = values[i];\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchMintValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n            }\\n            emit Transfer(address(0), to, value);\\n        }\\n\\n        if (totalValue != 0) {\\n            unchecked {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, totalValue);\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(Layout storage s, address from, uint256 value) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\\n    ///  at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\\n        uint256 length = owners.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address from = owners[i];\\n            uint256 value = values[i];\\n\\n            if (from != sender) {\\n                s.decreaseAllowance(from, sender, value);\\n            }\\n\\n            if (value != 0) {\\n                uint256 balance = s.balances[from];\\n                unchecked {\\n                    uint256 newBalance = balance - value;\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n            }\\n\\n            emit Transfer(from, address(0), value);\\n        }\\n\\n        if (totalValue != 0) {\\n            unchecked {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\\n        if (IERC20Receiver(to).onERC20Received(sender, from, value, data) != ERC20_RECEIVED) revert ERC20SafeTransferRejected(to);\\n    }\\n}\\n\",\"keccak256\":\"0xc9c4d98135ba7d9590d4ff6e055570c7c11dc0860d597bfc2f256c92ff648fa0\",\"license\":\"MIT\"},\"contracts/token/ERC20/preset/proxied/ERC20FixedSupplyProxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC20Storage} from \\\"./../../../../token/ERC20/libraries/ERC20Storage.sol\\\";\\nimport {ERC20DetailedStorage} from \\\"./../../../../token/ERC20/libraries/ERC20DetailedStorage.sol\\\";\\nimport {ERC20MetadataStorage} from \\\"./../../../../token/ERC20/libraries/ERC20MetadataStorage.sol\\\";\\nimport {ERC20PermitStorage} from \\\"./../../../../token/ERC20/libraries/ERC20PermitStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ERC20Base} from \\\"./../../base/ERC20Base.sol\\\";\\nimport {ERC20DetailedBase} from \\\"./../../base/ERC20DetailedBase.sol\\\";\\nimport {ERC20MetadataBase} from \\\"./../../base/ERC20MetadataBase.sol\\\";\\nimport {ERC20PermitBase} from \\\"./../../base/ERC20PermitBase.sol\\\";\\nimport {ERC20SafeTransfersBase} from \\\"./../../base/ERC20SafeTransfersBase.sol\\\";\\nimport {ERC20BatchTransfersBase} from \\\"./../../base/ERC20BatchTransfersBase.sol\\\";\\nimport {TokenRecoveryBase} from \\\"./../../../../security/base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./../../../../access/base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../../../introspection/InterfaceDetection.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../../../metatx/ForwarderRegistryContext.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, fixed supply preset contract (proxied version).\\ncontract ERC20FixedSupplyProxied is\\n    ERC20Base,\\n    ERC20DetailedBase,\\n    ERC20MetadataBase,\\n    ERC20PermitBase,\\n    ERC20SafeTransfersBase,\\n    ERC20BatchTransfersBase,\\n    InterfaceDetection,\\n    TokenRecoveryBase,\\n    ContractOwnershipBase,\\n    ForwarderRegistryContext\\n{\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using ERC20DetailedStorage for ERC20DetailedStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function init(\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint8 tokenDecimals,\\n        address[] calldata holders,\\n        uint256[] calldata allocations\\n    ) external {\\n        ContractOwnershipStorage.layout().proxyInit(_msgSender());\\n        ERC20Storage.init();\\n        ERC20Storage.initERC20BatchTransfers();\\n        ERC20Storage.initERC20SafeTransfers();\\n        ERC20DetailedStorage.layout().proxyInit(tokenName, tokenSymbol, tokenDecimals);\\n        ERC20MetadataStorage.init();\\n        ERC20PermitStorage.init();\\n        ERC20Storage.layout().batchMint(holders, allocations);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x8cf2234d031df4ed6d7ebd560fd9cd426e0ea026a89f2b903765317247040762\",\"license\":\"MIT\"},\"contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161367038038061367083398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516135d06100a06000396000818161024f015281816102f40152818161265801526126e601526135d06000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637ecebe0011610104578063b88d4fde116100a2578063e0df5b6f11610071578063e0df5b6f14610414578063eb79554914610427578063f2fde38b1461043a578063f7ba94bd1461044d57600080fd5b8063b88d4fde146103c8578063c3666c36146103db578063d505accf146103ee578063dd62ed3e1461040157600080fd5b80638da5cb5b116100de5780638da5cb5b1461039257806395d89b411461039a578063a457c2d7146103a2578063a9059cbb146103b557600080fd5b80637ecebe001461035957806388d695b21461036c5780638a6d57b61461037f57600080fd5b80633644e515116101715780634885b2541161014b5780634885b254146102d1578063572b6c05146102e457806370a082311461033157806373c8a9581461034457600080fd5b80633644e515146102ae57806339509351146102b65780633c130d90146102c957600080fd5b806318160ddd116101ad57806318160ddd1461022457806323b872dd1461023a5780632b4c9f161461024d578063313ce5671461029457600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063095ea7b314610211575b600080fd5b6101e76101e2366004612caa565b610460565b60405190151581526020015b60405180910390f35b61020461047a565b6040516101f39190612d2b565b6101e761021f366004612d60565b610491565b61022c6104b9565b6040519081526020016101f3565b6101e7610248366004612d8c565b6104cd565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b61029c6104f8565b60405160ff90911681526020016101f3565b61022c61050f565b6101e76102c4366004612d60565b610519565b610204610538565b6101e76102df366004612e19565b610545565b6101e76102f2366004612ea1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61022c61033f366004612ea1565b610576565b610357610352366004612ebe565b6105ae565b005b61022c610367366004612ea1565b6105dd565b6101e761037a366004612f64565b6105eb565b61035761038d36600461302d565b610619565b61026f6106f7565b61020461071e565b6101e76103b0366004612d60565b610730565b6101e76103c3366004612d60565b61074f565b6101e76103d6366004613118565b61076e565b6103576103e9366004612ebe565b610793565b6103576103fc36600461317a565b6107ac565b61022c61040f3660046131e9565b6107d3565b610357610422366004613222565b610825565b6101e7610435366004613264565b610848565b610357610448366004612ea1565b61086b565b61035761045b366004612f64565b610889565b60006104748261046e6108a6565b906108d4565b92915050565b606061048c6104876109ae565b6109dc565b905090565b60006104b061049e610a72565b84846104a8610a7c565b929190610aaa565b50600192915050565b600061048c6104c6610a7c565b6002015490565b60006104ee6104da610a72565b8585856104e5610a7c565b93929190610b86565b5060019392505050565b600061048c6105056109ae565b6002015460ff1690565b600061048c610bd8565b60006104b0610526610a72565b8484610530610a7c565b929190610c73565b606061048c610487610e25565b600061056a610552610a72565b878787878761055f610a7c565b959493929190610e53565b50600195945050505050565b600061047482610584610a7c565b9073ffffffffffffffffffffffffffffffffffffffff166000908152602091909152604090205490565b6105c76105b9610a72565b6105c161122d565b9061125b565b6105d58686868686866112c6565b505050505050565b6000610474826105846113b1565b600061060e6105f8610a72565b86868686610604610a7c565b94939291906113df565b506001949350505050565b610632610624610a72565b61062c61122d565b90611736565b61063a611775565b6106426117d9565b61064a611810565b610664898989898961065a6109ae565b949392919061183e565b61066c6118e6565b610674611914565b6106ec848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506106e59250610a7c915050565b9190611942565b505050505050505050565b600061048c61070461122d565b5473ffffffffffffffffffffffffffffffffffffffff1690565b606061048c61072b6109ae565b611b63565b60006104b061073d610a72565b8484610747610a7c565b929190611b74565b60006104b061075c610a72565b8484610766610a7c565b929190611cac565b600061056a61077b610a72565b8787878787610788610a7c565b959493929190611e6b565b61079e6105b9610a72565b6105d5868686868686611ed8565b6107ca878787878787876107be6113b1565b9695949392919061216e565b50505050505050565b600061081e83836107e2610a7c565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600193909301602090815260408085209290931684525290205490565b9392505050565b6108306105b9610a72565b610844828261083d610e25565b91906123dd565b5050565b600061060e610855610a72565b86868686610861610a7c565b94939291906123e9565b610886610876610a72565b8261087f61122d565b9190612455565b50565b6108946105b9610a72565b6108a084848484612569565b50505050565b60008061047460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6132b4565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161092457506000610474565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161097557506001610474565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061047460017f335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a826132b4565b60608160000180546109ed906132ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610a19906132ee565b8015610a665780601f10610a3b57610100808354040283529160200191610a66565b820191906000526020600020905b815481529060010190602001808311610a4957829003601f168201915b50505050509050919050565b600061048c612615565b60008061047460017f1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef6132b4565b73ffffffffffffffffffffffffffffffffffffffff8216610b14576040517ff7e1ac0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff838116600081815260018701602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a350505050565b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bc557610bc585848684611b74565b610bd185848484611cac565b5050505050565b6000467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610c076104876109ae565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c0016040516020818303038152906040528051906020012091505090565b73ffffffffffffffffffffffffffffffffffffffff8216610cd8576040517ff7e1ac0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220548115610db757808201818111610d7d576040517f93bc2ff100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8087166004830152851660248201526044810183905260648101849052608401610b0b565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600188016020908152604080832093881683529290522081905590505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e1691815260200190565b60405180910390a35050505050565b60008061047460017ff41bf6a5db26bffdfab174dcf66b31fbba8fdb7e3db040721ce1e62d61839ceb6132b4565b82818114610e8d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600003610e9b57506107ca565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602089905260408120549080805b848110156111e0576000898983818110610ee157610ee1613341565b9050602002016020810190610ef69190612ea1565b905073ffffffffffffffffffffffffffffffffffffffff8116610f5d576040517f754f425b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c166004820152602401610b0b565b6000888884818110610f7157610f71613341565b905060200201359050806000146110af57848101858111610fbe576040517fdedd834100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8095508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff161461104857818f60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506110ad565b868211156110a8576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e1660048201526024810188905260448101839052606401610b0b565b938101935b505b8173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161110e91815260200190565b60405180910390a384158015906111255750838514155b156111d65784860386811061118c576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e1660048201526024810188905260448101879052606401610b0b565b8481018f60000160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b5050600101610ec5565b508973ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614611220576112208b8a8c85611b74565b5050505050505050505050565b60008061047460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6132b4565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610844576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610b0b565b8483811415806112d65750808214155b1561130d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156113a75761139f88888381811061132d5761132d613341565b90506020020160208101906113429190612ea1565b85858481811061135457611354613341565b9050602002013588888581811061136d5761136d613341565b90506020020160208101906113829190612ea1565b73ffffffffffffffffffffffffffffffffffffffff169190612762565b600101611310565b5050505050505050565b60008061047460017f93fe0ff7226b064a4a8f0b09910762afb4bc2441835792c021ffd78cd513011e6132b4565b82818114611419576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060000361142757506105d5565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602088905260408120549080805b8481101561168857600089898381811061146d5761146d613341565b90506020020160208101906114829190612ea1565b905073ffffffffffffffffffffffffffffffffffffffff81166114e9576040517f754f425b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c166004820152602401610b0b565b60008888848181106114fd576114fd613341565b905060200201359050806000146116175784810185811161154a576040517fdedd834100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8095508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146115b05773ffffffffffffffffffffffffffffffffffffffff8316600090815260208f905260409020805483019055611615565b86821115611610576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e1660048201526024810188905260448101839052606401610b0b565b938101935b505b8173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161167691815260200190565b60405180910390a35050600101611451565b5081158015906116985750808214155b1561172a578183038381106116ff576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b1660048201526024810185905260448101849052606401610b0b565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260208c90526040902090820190555b50505050505050505050565b61176b61176460017f5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb846132b4565b60016127f4565b6108448282612840565b600061177f6108a6565b90506117ad817f36372b070000000000000000000000000000000000000000000000000000000060016128f6565b610886817f9d0751860000000000000000000000000000000000000000000000000000000060016128f6565b61180e7fc05327e60000000000000000000000000000000000000000000000000000000060016118076108a6565b91906128f6565b565b61180e7f53f41a970000000000000000000000000000000000000000000000000000000060016118076108a6565b61186c61176460017fd217496980d1cb14720b20a80af36676bbece8e5feeb5d8970a9681a2c76bb756132b4565b856118788587836133e6565b50600186016118888385836133e6565b506002860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff83161790556105d57fa219a0250000000000000000000000000000000000000000000000000000000060016118076108a6565b61180e7f3c130d900000000000000000000000000000000000000000000000000000000060016118076108a6565b61180e7f9d8ff7da0000000000000000000000000000000000000000000000000000000060016118076108a6565b81518151811461197e576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060000361198c5750505050565b6000805b82811015611b045760008582815181106119ac576119ac613341565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a1c576040517f92fd9c8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858381518110611a3057611a30613341565b6020026020010151905080600014611aac57838101848111611a7e576040517f5542ae7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208a90526040902080548301905593505b60405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050600101611990565b508015610bd1576002850154818101818111611b56576040517f0366a5f60000000000000000000000000000000000000000000000000000000081526004810183905260248101849052604401610b0b565b6002870155505050505050565b60608160010180546109ed906132ee565b73ffffffffffffffffffffffffffffffffffffffff8216611bd9576040517ff7e1ac0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114801590611c3d57508115155b15610db757818103818110610d7d576040517f137ad6ab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8087166004830152851660248201526044810183905260648101849052608401610b0b565b73ffffffffffffffffffffffffffffffffffffffff8216611d11576040517f754f425b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b8015611e0c5773ffffffffffffffffffffffffffffffffffffffff8316600090815260208590526040902054818103818110611d9f576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810183905260448101849052606401610b0b565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611e095773ffffffffffffffffffffffffffffffffffffffff8086166000908152602088905260408082208490559186168152208054840190555b50505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b7891815260200190565b611e788787878787610b86565b73ffffffffffffffffffffffffffffffffffffffff84163b156107ca576107ca8686868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506129d292505050565b848381141580611ee85750808214155b15611f1f576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156113a7576000868683818110611f3e57611f3e613341565b9050602002016020810190611f539190612ea1565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa158015611fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120049190613500565b612052576040517f986b9f1f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610b0b565b86868381811061206457612064613341565b90506020020160208101906120799190612ea1565b73ffffffffffffffffffffffffffffffffffffffff166342842e0e308b8b868181106120a7576120a7613341565b90506020020160208101906120bc9190612ea1565b8888878181106120ce576120ce613341565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561214a57600080fd5b505af115801561215e573d6000803e3d6000fd5b5050505050806001019050611f22565b73ffffffffffffffffffffffffffffffffffffffff87166121bb576040517fa974697600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b834211156121f8576040517fea2b6f5800000000000000000000000000000000000000000000000000000000815260048101859052602401610b0b565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260208b8152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e09093019093528151919092012090612297610bd8565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa15801561235b573d6000803e3d6000fd5b5050506020604051035190508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146123cc576040517f822a64c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050506113a78787876104a8610a7c565b826108a08284836133e6565b6123f586868686611cac565b73ffffffffffffffffffffffffffffffffffffffff84163b156105d5576105d58586868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506129d292505050565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146124c2576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108a05783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b828181146125a3576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156105d55761260d8484838181106125c3576125c3613341565b905060200201358787848181106125dc576125dc613341565b90506020020160208101906125f19190612ea1565b73ffffffffffffffffffffffffffffffffffffffff1690612ae0565b6001016125a6565b6000333214806126255750601836105b1561262f57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061275157506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa15801561272d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127519190613500565b1561275b57919050565b3391505090565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526127ef908490612b96565b505050565b8154829082811061283b576040517fbf0c18ec0000000000000000000000000000000000000000000000000000000081526004810182905260248101849052604401610b0b565b505550565b73ffffffffffffffffffffffffffffffffffffffff8116156128c85781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6108447f7f5828d00000000000000000000000000000000000000000000000000000000060016118076108a6565b7c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161296e576040517f72c683bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6040517f4fc35859000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff851690634fc3585990612a2c908990899088908890600401613522565b6020604051808303816000875af1158015612a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6f919061357d565b7fffffffff000000000000000000000000000000000000000000000000000000001614610bd1576040517f6d44973600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b80471015612b23576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101829052604401610b0b565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114612b7e576040519150601f19603f3d011682016040523d82523d6000602084013e612b83565b606091505b5091509150816108a0576108a081612c3a565b600080602060008451602086016000885af180612bb9576040513d6000823e3d81fd5b50506000513d91508115612bd1578060011415612beb565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156108a0576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610b0b565b805115612c4a5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461088657600080fd5b600060208284031215612cbc57600080fd5b813561081e81612c7c565b6000815180845260005b81811015612ced57602081850181015186830182015201612cd1565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061081e6020830184612cc7565b73ffffffffffffffffffffffffffffffffffffffff8116811461088657600080fd5b60008060408385031215612d7357600080fd5b8235612d7e81612d3e565b946020939093013593505050565b600080600060608486031215612da157600080fd5b8335612dac81612d3e565b92506020840135612dbc81612d3e565b929592945050506040919091013590565b60008083601f840112612ddf57600080fd5b50813567ffffffffffffffff811115612df757600080fd5b6020830191508360208260051b8501011115612e1257600080fd5b9250929050565b600080600080600060608688031215612e3157600080fd5b8535612e3c81612d3e565b9450602086013567ffffffffffffffff811115612e5857600080fd5b612e6488828901612dcd565b909550935050604086013567ffffffffffffffff811115612e8457600080fd5b612e9088828901612dcd565b969995985093965092949392505050565b600060208284031215612eb357600080fd5b813561081e81612d3e565b60008060008060008060608789031215612ed757600080fd5b863567ffffffffffffffff811115612eee57600080fd5b612efa89828a01612dcd565b909750955050602087013567ffffffffffffffff811115612f1a57600080fd5b612f2689828a01612dcd565b909550935050604087013567ffffffffffffffff811115612f4657600080fd5b612f5289828a01612dcd565b979a9699509497509295939492505050565b60008060008060408587031215612f7a57600080fd5b843567ffffffffffffffff811115612f9157600080fd5b612f9d87828801612dcd565b909550935050602085013567ffffffffffffffff811115612fbd57600080fd5b612fc987828801612dcd565b95989497509550505050565b60008083601f840112612fe757600080fd5b50813567ffffffffffffffff811115612fff57600080fd5b602083019150836020828501011115612e1257600080fd5b803560ff8116811461302857600080fd5b919050565b600080600080600080600080600060a08a8c03121561304b57600080fd5b893567ffffffffffffffff81111561306257600080fd5b61306e8c828d01612fd5565b909a5098505060208a013567ffffffffffffffff81111561308e57600080fd5b61309a8c828d01612fd5565b90985096506130ad905060408b01613017565b945060608a013567ffffffffffffffff8111156130c957600080fd5b6130d58c828d01612dcd565b90955093505060808a013567ffffffffffffffff8111156130f557600080fd5b6131018c828d01612dcd565b915080935050809150509295985092959850929598565b60008060008060006080868803121561313057600080fd5b853561313b81612d3e565b9450602086013561314b81612d3e565b935060408601359250606086013567ffffffffffffffff81111561316e57600080fd5b612e9088828901612fd5565b600080600080600080600060e0888a03121561319557600080fd5b87356131a081612d3e565b965060208801356131b081612d3e565b955060408801359450606088013593506131cc60808901613017565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156131fc57600080fd5b823561320781612d3e565b9150602083013561321781612d3e565b809150509250929050565b6000806020838503121561323557600080fd5b823567ffffffffffffffff81111561324c57600080fd5b61325885828601612fd5565b90969095509350505050565b6000806000806060858703121561327a57600080fd5b843561328581612d3e565b935060208501359250604085013567ffffffffffffffff8111156132a857600080fd5b612fc987828801612fd5565b81810381811115610474577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181811c9082168061330257607f821691505b60208210810361333b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156127ef57806000526020600020601f840160051c810160208510156133c65750805b601f840160051c820191505b81811015610bd157600081556001016133d2565b67ffffffffffffffff8311156133fe576133fe613370565b6134128361340c83546132ee565b8361339f565b6000601f841160018114613464576000851561342e5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610bd1565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156134b35786850135825560209485019460019092019101613493565b50868210156134ee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561351257600080fd5b8151801515811461081e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006135736080830184612cc7565b9695505050505050565b60006020828403121561358f57600080fd5b815161081e81612c7c56fea26469706673582212204eef91b6963b8700aae4ab976ebcd192a81a73eecb07db23510edc16754022e664736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637ecebe0011610104578063b88d4fde116100a2578063e0df5b6f11610071578063e0df5b6f14610414578063eb79554914610427578063f2fde38b1461043a578063f7ba94bd1461044d57600080fd5b8063b88d4fde146103c8578063c3666c36146103db578063d505accf146103ee578063dd62ed3e1461040157600080fd5b80638da5cb5b116100de5780638da5cb5b1461039257806395d89b411461039a578063a457c2d7146103a2578063a9059cbb146103b557600080fd5b80637ecebe001461035957806388d695b21461036c5780638a6d57b61461037f57600080fd5b80633644e515116101715780634885b2541161014b5780634885b254146102d1578063572b6c05146102e457806370a082311461033157806373c8a9581461034457600080fd5b80633644e515146102ae57806339509351146102b65780633c130d90146102c957600080fd5b806318160ddd116101ad57806318160ddd1461022457806323b872dd1461023a5780632b4c9f161461024d578063313ce5671461029457600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063095ea7b314610211575b600080fd5b6101e76101e2366004612caa565b610460565b60405190151581526020015b60405180910390f35b61020461047a565b6040516101f39190612d2b565b6101e761021f366004612d60565b610491565b61022c6104b9565b6040519081526020016101f3565b6101e7610248366004612d8c565b6104cd565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b61029c6104f8565b60405160ff90911681526020016101f3565b61022c61050f565b6101e76102c4366004612d60565b610519565b610204610538565b6101e76102df366004612e19565b610545565b6101e76102f2366004612ea1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61022c61033f366004612ea1565b610576565b610357610352366004612ebe565b6105ae565b005b61022c610367366004612ea1565b6105dd565b6101e761037a366004612f64565b6105eb565b61035761038d36600461302d565b610619565b61026f6106f7565b61020461071e565b6101e76103b0366004612d60565b610730565b6101e76103c3366004612d60565b61074f565b6101e76103d6366004613118565b61076e565b6103576103e9366004612ebe565b610793565b6103576103fc36600461317a565b6107ac565b61022c61040f3660046131e9565b6107d3565b610357610422366004613222565b610825565b6101e7610435366004613264565b610848565b610357610448366004612ea1565b61086b565b61035761045b366004612f64565b610889565b60006104748261046e6108a6565b906108d4565b92915050565b606061048c6104876109ae565b6109dc565b905090565b60006104b061049e610a72565b84846104a8610a7c565b929190610aaa565b50600192915050565b600061048c6104c6610a7c565b6002015490565b60006104ee6104da610a72565b8585856104e5610a7c565b93929190610b86565b5060019392505050565b600061048c6105056109ae565b6002015460ff1690565b600061048c610bd8565b60006104b0610526610a72565b8484610530610a7c565b929190610c73565b606061048c610487610e25565b600061056a610552610a72565b878787878761055f610a7c565b959493929190610e53565b50600195945050505050565b600061047482610584610a7c565b9073ffffffffffffffffffffffffffffffffffffffff166000908152602091909152604090205490565b6105c76105b9610a72565b6105c161122d565b9061125b565b6105d58686868686866112c6565b505050505050565b6000610474826105846113b1565b600061060e6105f8610a72565b86868686610604610a7c565b94939291906113df565b506001949350505050565b610632610624610a72565b61062c61122d565b90611736565b61063a611775565b6106426117d9565b61064a611810565b610664898989898961065a6109ae565b949392919061183e565b61066c6118e6565b610674611914565b6106ec848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506106e59250610a7c915050565b9190611942565b505050505050505050565b600061048c61070461122d565b5473ffffffffffffffffffffffffffffffffffffffff1690565b606061048c61072b6109ae565b611b63565b60006104b061073d610a72565b8484610747610a7c565b929190611b74565b60006104b061075c610a72565b8484610766610a7c565b929190611cac565b600061056a61077b610a72565b8787878787610788610a7c565b959493929190611e6b565b61079e6105b9610a72565b6105d5868686868686611ed8565b6107ca878787878787876107be6113b1565b9695949392919061216e565b50505050505050565b600061081e83836107e2610a7c565b919073ffffffffffffffffffffffffffffffffffffffff9182166000908152600193909301602090815260408085209290931684525290205490565b9392505050565b6108306105b9610a72565b610844828261083d610e25565b91906123dd565b5050565b600061060e610855610a72565b86868686610861610a7c565b94939291906123e9565b610886610876610a72565b8261087f61122d565b9190612455565b50565b6108946105b9610a72565b6108a084848484612569565b50505050565b60008061047460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6132b4565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161092457506000610474565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161097557506001610474565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061047460017f335df4119bbb04f056b33eba33b826d3529129e458faf6daa9924b5a8f3b6a826132b4565b60608160000180546109ed906132ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610a19906132ee565b8015610a665780601f10610a3b57610100808354040283529160200191610a66565b820191906000526020600020905b815481529060010190602001808311610a4957829003601f168201915b50505050509050919050565b600061048c612615565b60008061047460017f1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef6132b4565b73ffffffffffffffffffffffffffffffffffffffff8216610b14576040517ff7e1ac0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff838116600081815260018701602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a350505050565b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bc557610bc585848684611b74565b610bd185848484611cac565b5050505050565b6000467f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610c076104876109ae565b80516020918201206040805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c0016040516020818303038152906040528051906020012091505090565b73ffffffffffffffffffffffffffffffffffffffff8216610cd8576040517ff7e1ac0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220548115610db757808201818111610d7d576040517f93bc2ff100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8087166004830152851660248201526044810183905260648101849052608401610b0b565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600188016020908152604080832093881683529290522081905590505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e1691815260200190565b60405180910390a35050505050565b60008061047460017ff41bf6a5db26bffdfab174dcf66b31fbba8fdb7e3db040721ce1e62d61839ceb6132b4565b82818114610e8d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600003610e9b57506107ca565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602089905260408120549080805b848110156111e0576000898983818110610ee157610ee1613341565b9050602002016020810190610ef69190612ea1565b905073ffffffffffffffffffffffffffffffffffffffff8116610f5d576040517f754f425b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c166004820152602401610b0b565b6000888884818110610f7157610f71613341565b905060200201359050806000146110af57848101858111610fbe576040517fdedd834100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8095508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff161461104857818f60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506110ad565b868211156110a8576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e1660048201526024810188905260448101839052606401610b0b565b938101935b505b8173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161110e91815260200190565b60405180910390a384158015906111255750838514155b156111d65784860386811061118c576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e1660048201526024810188905260448101879052606401610b0b565b8481018f60000160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b5050600101610ec5565b508973ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614611220576112208b8a8c85611b74565b5050505050505050505050565b60008061047460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6132b4565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610844576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610b0b565b8483811415806112d65750808214155b1561130d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156113a75761139f88888381811061132d5761132d613341565b90506020020160208101906113429190612ea1565b85858481811061135457611354613341565b9050602002013588888581811061136d5761136d613341565b90506020020160208101906113829190612ea1565b73ffffffffffffffffffffffffffffffffffffffff169190612762565b600101611310565b5050505050505050565b60008061047460017f93fe0ff7226b064a4a8f0b09910762afb4bc2441835792c021ffd78cd513011e6132b4565b82818114611419576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060000361142757506105d5565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602088905260408120549080805b8481101561168857600089898381811061146d5761146d613341565b90506020020160208101906114829190612ea1565b905073ffffffffffffffffffffffffffffffffffffffff81166114e9576040517f754f425b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c166004820152602401610b0b565b60008888848181106114fd576114fd613341565b905060200201359050806000146116175784810185811161154a576040517fdedd834100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8095508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146115b05773ffffffffffffffffffffffffffffffffffffffff8316600090815260208f905260409020805483019055611615565b86821115611610576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e1660048201526024810188905260448101839052606401610b0b565b938101935b505b8173ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161167691815260200190565b60405180910390a35050600101611451565b5081158015906116985750808214155b1561172a578183038381106116ff576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b1660048201526024810185905260448101849052606401610b0b565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260208c90526040902090820190555b50505050505050505050565b61176b61176460017f5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb846132b4565b60016127f4565b6108448282612840565b600061177f6108a6565b90506117ad817f36372b070000000000000000000000000000000000000000000000000000000060016128f6565b610886817f9d0751860000000000000000000000000000000000000000000000000000000060016128f6565b61180e7fc05327e60000000000000000000000000000000000000000000000000000000060016118076108a6565b91906128f6565b565b61180e7f53f41a970000000000000000000000000000000000000000000000000000000060016118076108a6565b61186c61176460017fd217496980d1cb14720b20a80af36676bbece8e5feeb5d8970a9681a2c76bb756132b4565b856118788587836133e6565b50600186016118888385836133e6565b506002860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff83161790556105d57fa219a0250000000000000000000000000000000000000000000000000000000060016118076108a6565b61180e7f3c130d900000000000000000000000000000000000000000000000000000000060016118076108a6565b61180e7f9d8ff7da0000000000000000000000000000000000000000000000000000000060016118076108a6565b81518151811461197e576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060000361198c5750505050565b6000805b82811015611b045760008582815181106119ac576119ac613341565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a1c576040517f92fd9c8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858381518110611a3057611a30613341565b6020026020010151905080600014611aac57838101848111611a7e576040517f5542ae7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208a90526040902080548301905593505b60405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050600101611990565b508015610bd1576002850154818101818111611b56576040517f0366a5f60000000000000000000000000000000000000000000000000000000081526004810183905260248101849052604401610b0b565b6002870155505050505050565b60608160010180546109ed906132ee565b73ffffffffffffffffffffffffffffffffffffffff8216611bd9576040517ff7e1ac0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114801590611c3d57508115155b15610db757818103818110610d7d576040517f137ad6ab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8087166004830152851660248201526044810183905260648101849052608401610b0b565b73ffffffffffffffffffffffffffffffffffffffff8216611d11576040517f754f425b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b8015611e0c5773ffffffffffffffffffffffffffffffffffffffff8316600090815260208590526040902054818103818110611d9f576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810183905260448101849052606401610b0b565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611e095773ffffffffffffffffffffffffffffffffffffffff8086166000908152602088905260408082208490559186168152208054840190555b50505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b7891815260200190565b611e788787878787610b86565b73ffffffffffffffffffffffffffffffffffffffff84163b156107ca576107ca8686868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506129d292505050565b848381141580611ee85750808214155b15611f1f576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156113a7576000868683818110611f3e57611f3e613341565b9050602002016020810190611f539190612ea1565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa158015611fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120049190613500565b612052576040517f986b9f1f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610b0b565b86868381811061206457612064613341565b90506020020160208101906120799190612ea1565b73ffffffffffffffffffffffffffffffffffffffff166342842e0e308b8b868181106120a7576120a7613341565b90506020020160208101906120bc9190612ea1565b8888878181106120ce576120ce613341565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561214a57600080fd5b505af115801561215e573d6000803e3d6000fd5b5050505050806001019050611f22565b73ffffffffffffffffffffffffffffffffffffffff87166121bb576040517fa974697600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b834211156121f8576040517fea2b6f5800000000000000000000000000000000000000000000000000000000815260048101859052602401610b0b565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260208b8152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e09093019093528151919092012090612297610bd8565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa15801561235b573d6000803e3d6000fd5b5050506020604051035190508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146123cc576040517f822a64c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050506113a78787876104a8610a7c565b826108a08284836133e6565b6123f586868686611cac565b73ffffffffffffffffffffffffffffffffffffffff84163b156105d5576105d58586868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506129d292505050565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146124c2576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108a05783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b828181146125a3576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156105d55761260d8484838181106125c3576125c3613341565b905060200201358787848181106125dc576125dc613341565b90506020020160208101906125f19190612ea1565b73ffffffffffffffffffffffffffffffffffffffff1690612ae0565b6001016125a6565b6000333214806126255750601836105b1561262f57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061275157506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa15801561272d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127519190613500565b1561275b57919050565b3391505090565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526127ef908490612b96565b505050565b8154829082811061283b576040517fbf0c18ec0000000000000000000000000000000000000000000000000000000081526004810182905260248101849052604401610b0b565b505550565b73ffffffffffffffffffffffffffffffffffffffff8116156128c85781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6108447f7f5828d00000000000000000000000000000000000000000000000000000000060016118076108a6565b7c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161296e576040517f72c683bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6040517f4fc35859000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff851690634fc3585990612a2c908990899088908890600401613522565b6020604051808303816000875af1158015612a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6f919061357d565b7fffffffff000000000000000000000000000000000000000000000000000000001614610bd1576040517f6d44973600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610b0b565b80471015612b23576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101829052604401610b0b565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114612b7e576040519150601f19603f3d011682016040523d82523d6000602084013e612b83565b606091505b5091509150816108a0576108a081612c3a565b600080602060008451602086016000885af180612bb9576040513d6000823e3d81fd5b50506000513d91508115612bd1578060011415612beb565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156108a0576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610b0b565b805115612c4a5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff000000000000000000000000000000000000000000000000000000008116811461088657600080fd5b600060208284031215612cbc57600080fd5b813561081e81612c7c565b6000815180845260005b81811015612ced57602081850181015186830182015201612cd1565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600061081e6020830184612cc7565b73ffffffffffffffffffffffffffffffffffffffff8116811461088657600080fd5b60008060408385031215612d7357600080fd5b8235612d7e81612d3e565b946020939093013593505050565b600080600060608486031215612da157600080fd5b8335612dac81612d3e565b92506020840135612dbc81612d3e565b929592945050506040919091013590565b60008083601f840112612ddf57600080fd5b50813567ffffffffffffffff811115612df757600080fd5b6020830191508360208260051b8501011115612e1257600080fd5b9250929050565b600080600080600060608688031215612e3157600080fd5b8535612e3c81612d3e565b9450602086013567ffffffffffffffff811115612e5857600080fd5b612e6488828901612dcd565b909550935050604086013567ffffffffffffffff811115612e8457600080fd5b612e9088828901612dcd565b969995985093965092949392505050565b600060208284031215612eb357600080fd5b813561081e81612d3e565b60008060008060008060608789031215612ed757600080fd5b863567ffffffffffffffff811115612eee57600080fd5b612efa89828a01612dcd565b909750955050602087013567ffffffffffffffff811115612f1a57600080fd5b612f2689828a01612dcd565b909550935050604087013567ffffffffffffffff811115612f4657600080fd5b612f5289828a01612dcd565b979a9699509497509295939492505050565b60008060008060408587031215612f7a57600080fd5b843567ffffffffffffffff811115612f9157600080fd5b612f9d87828801612dcd565b909550935050602085013567ffffffffffffffff811115612fbd57600080fd5b612fc987828801612dcd565b95989497509550505050565b60008083601f840112612fe757600080fd5b50813567ffffffffffffffff811115612fff57600080fd5b602083019150836020828501011115612e1257600080fd5b803560ff8116811461302857600080fd5b919050565b600080600080600080600080600060a08a8c03121561304b57600080fd5b893567ffffffffffffffff81111561306257600080fd5b61306e8c828d01612fd5565b909a5098505060208a013567ffffffffffffffff81111561308e57600080fd5b61309a8c828d01612fd5565b90985096506130ad905060408b01613017565b945060608a013567ffffffffffffffff8111156130c957600080fd5b6130d58c828d01612dcd565b90955093505060808a013567ffffffffffffffff8111156130f557600080fd5b6131018c828d01612dcd565b915080935050809150509295985092959850929598565b60008060008060006080868803121561313057600080fd5b853561313b81612d3e565b9450602086013561314b81612d3e565b935060408601359250606086013567ffffffffffffffff81111561316e57600080fd5b612e9088828901612fd5565b600080600080600080600060e0888a03121561319557600080fd5b87356131a081612d3e565b965060208801356131b081612d3e565b955060408801359450606088013593506131cc60808901613017565b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156131fc57600080fd5b823561320781612d3e565b9150602083013561321781612d3e565b809150509250929050565b6000806020838503121561323557600080fd5b823567ffffffffffffffff81111561324c57600080fd5b61325885828601612fd5565b90969095509350505050565b6000806000806060858703121561327a57600080fd5b843561328581612d3e565b935060208501359250604085013567ffffffffffffffff8111156132a857600080fd5b612fc987828801612fd5565b81810381811115610474577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181811c9082168061330257607f821691505b60208210810361333b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156127ef57806000526020600020601f840160051c810160208510156133c65750805b601f840160051c820191505b81811015610bd157600081556001016133d2565b67ffffffffffffffff8311156133fe576133fe613370565b6134128361340c83546132ee565b8361339f565b6000601f841160018114613464576000851561342e5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610bd1565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156134b35786850135825560209485019460019092019101613493565b50868210156134ee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561351257600080fd5b8151801515811461081e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006135736080830184612cc7565b9695505050505050565b60006020828403121561358f57600080fd5b815161081e81612c7c56fea26469706673582212204eef91b6963b8700aae4ab976ebcd192a81a73eecb07db23510edc16754022e664736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "ERC20AllowanceOverflow(address,address,uint256,uint256)": [
        {
          "params": {
            "allowance": "The current allowance.",
            "increment": "The allowance increase.",
            "owner": "The owner of the tokens.",
            "spender": "The spender of the tokens."
          }
        }
      ],
      "ERC20ApprovalToAddressZero(address)": [
        {
          "params": {
            "owner": "The owner of the tokens."
          }
        }
      ],
      "ERC20InsufficientAllowance(address,address,uint256,uint256)": [
        {
          "params": {
            "allowance": "The current allowance.",
            "decrement": "The allowance decrease.",
            "owner": "The owner of the tokens.",
            "spender": "The spender of the tokens."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "params": {
            "balance": "The current balance.",
            "owner": "The owner of the tokens.",
            "value": "The amount of tokens being transferred."
          }
        }
      ],
      "ERC20PermitExpired(uint256)": [
        {
          "params": {
            "deadline": "The permit deadline."
          }
        }
      ],
      "ERC20SafeTransferRejected(address)": [
        {
          "params": {
            "recipient": "The recipient contract."
          }
        }
      ],
      "ERC20TotalSupplyOverflow(uint256,uint256)": [
        {
          "params": {
            "supply": "The current supply.",
            "value": "The amount of tokens being minted."
          }
        }
      ],
      "ERC20TransferToAddressZero(address)": [
        {
          "params": {
            "owner": "The account from which the tokens are transferred."
          }
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "IncorrectTokenContractType(address)": [
        {
          "params": {
            "tokenContract": "The token contract being recovered."
          }
        }
      ],
      "InitializationPhaseAlreadyReached(uint256,uint256)": [
        {
          "params": {
            "currentPhase": "The current phase.",
            "newPhase": "The new phase trying to be set."
          }
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "NotContractOwner(address)": [
        {
          "params": {
            "account": "The account that was checked."
          }
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "params": {
          "owner": "The account granting an allowance to `spender`.",
          "spender": "The account being granted an allowance from `owner`.",
          "value": "The allowance amount being granted."
        }
      },
      "OwnershipTransferred(address,address)": {
        "params": {
          "newOwner": "the new contract owner.",
          "previousOwner": "the previous contract owner."
        }
      },
      "Transfer(address,address,uint256)": {
        "params": {
          "from": "The account where the transferred tokens are withdrawn from.",
          "to": "The account where the transferred tokens are deposited to.",
          "value": "The amount of tokens being transferred."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:  keccak256(      abi.encode(          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),          keccak256(bytes(name)),          keccak256(bytes(version)),          chainId,          address(this)))  where   - `name` (string) is the ERC-20 token name.   - `version` (string) refers to the ERC-20 token contract version.   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.   - `verifyingContract` (address) is the ERC-20 token contract address.",
        "returns": {
          "_0": "The EIP-712 encoded hash struct of the domain-specific information for permits."
        }
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The account that has granted an allowance to `spender`.",
          "spender": "The account that was granted an allowance by `owner`."
        },
        "returns": {
          "value": "The amount which `spender` is allowed to spend on behalf of `owner`."
        }
      },
      "approve(address,uint256)": {
        "details": "Reverts if `spender` is the zero address.Emits an {Approval} event.",
        "params": {
          "spender": "The account being granted the allowance by the message caller.",
          "value": "The allowance amount to grant."
        },
        "returns": {
          "result": "Whether the operation succeeded."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The account whose balance will be returned."
        },
        "returns": {
          "balance": "The account balance."
        }
      },
      "batchTransfer(address[],uint256[])": {
        "details": "Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.",
        "params": {
          "recipients": "The list of accounts to transfer the tokens to.",
          "values": "The list of amounts of tokens to transfer to each of `recipients`."
        },
        "returns": {
          "_0": "Whether the operation succeeded."
        }
      },
      "batchTransferFrom(address,address[],uint256[])": {
        "details": "Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).",
        "params": {
          "from": "The account which owns the tokens to be transferred.",
          "recipients": "The list of accounts to transfer the tokens to.",
          "values": "The list of amounts of tokens to transfer to each of `recipients`."
        },
        "returns": {
          "_0": "Whether the operation succeeded."
        }
      },
      "decimals()": {
        "details": "Note: This information is only used for display purposes: it does  not impact the arithmetic of the contract.",
        "returns": {
          "_0": "The number of decimals used to display the balances."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.",
        "params": {
          "spender": "The account whose allowance is being decreased.",
          "value": "The allowance amount decrease."
        },
        "returns": {
          "result": "Whether the operation succeeded."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.",
        "params": {
          "spender": "The account whose allowance is being increased.",
          "value": "The allowance amount increase."
        },
        "returns": {
          "result": "Whether the operation succeeded."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The forwarder to check."
        },
        "returns": {
          "_0": "True if `forwarder` is trusted, false if not."
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token."
        }
      },
      "nonces(address)": {
        "params": {
          "owner": "The account to check the nonce of."
        },
        "returns": {
          "_0": "The current permit nonce of `owner`."
        }
      },
      "owner()": {
        "returns": {
          "_0": "The address of the contract owner."
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Reverts if `owner` is the zero address.Reverts if the current blocktime is greather than `deadline`.Reverts if `r`, `s`, and `v` do not represent a valid `secp256k1` signature from `owner`.Emits an {IERC20-Approval} event.",
        "params": {
          "deadline": "The deadline from which the permit signature is no longer valid.",
          "owner": "The token owner granting the allowance to `spender`.",
          "r": "Permit signature r parameter.",
          "s": "Permit signature s parameter.",
          "spender": "The token spender being granted the allowance by `owner`.",
          "v": "Permit signature v parameter",
          "value": "The allowance amount to grant."
        }
      },
      "recoverERC20s(address[],address[],uint256[])": {
        "details": "Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.",
        "params": {
          "accounts": "the list of accounts to transfer the tokens to.",
          "amounts": "the list of token amounts to transfer.",
          "tokens": "the list of ERC20 token addresses."
        }
      },
      "recoverERC721s(address[],address[],uint256[])": {
        "details": "Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.",
        "params": {
          "accounts": "the list of accounts to transfer the tokens to.",
          "contracts": "the list of ERC721 contract addresses.",
          "tokenIds": "the list of token ids to transfer."
        }
      },
      "recoverETH(address[],uint256[])": {
        "details": "Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.",
        "params": {
          "accounts": "the list of accounts to transfer the tokens to.",
          "amounts": "the list of token amounts to transfer."
        }
      },
      "safeTransfer(address,uint256,bytes)": {
        "details": "Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.",
        "params": {
          "data": "Optional additional data with no specified format, to be passed to the receiver contract.",
          "to": "The account to transfer the tokens to.",
          "value": "The amount of tokens to transfer."
        },
        "returns": {
          "_0": "Whether the operation succeeded."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).",
        "params": {
          "data": "Optional additional data with no specified format, to be passed to the receiver contract.",
          "from": "The account which owns the tokens to transfer.",
          "to": "The account to transfer the tokens to.",
          "value": "The amount of tokens to transfer."
        },
        "returns": {
          "_0": "Whether the operation succeeded."
        }
      },
      "setTokenURI(string)": {
        "details": "Reverts with {NotContractOwner} if the sender is not the contract owner.",
        "params": {
          "uri": "The token URI."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Note: This function call must use less than 30 000 gas.",
        "params": {
          "interfaceId": "the interface identifier to test."
        },
        "returns": {
          "_0": "True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
        }
      },
      "symbol()": {
        "returns": {
          "_0": "The symbol of the token."
        }
      },
      "tokenURI()": {
        "returns": {
          "_0": "The token metadata URI."
        }
      },
      "totalSupply()": {
        "returns": {
          "supply": "The total token supply."
        }
      },
      "transfer(address,uint256)": {
        "details": "Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.",
        "params": {
          "to": "The account to transfer the tokens to.",
          "value": "The amount of tokens to transfer."
        },
        "returns": {
          "result": "Whether the operation succeeded."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).",
        "params": {
          "from": "The account which owns the tokens to transfer.",
          "to": "The account to transfer the tokens to.",
          "value": "The amount of tokens to transfer."
        },
        "returns": {
          "result": "Whether the operation succeeded."
        }
      },
      "transferOwnership(address)": {
        "details": "Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.",
        "params": {
          "newOwner": "The address of the new contract owner. Using the zero address means renouncing ownership."
        }
      }
    },
    "title": "ERC20 Fungible Token Standard, fixed supply preset contract (proxied version).",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20AllowanceOverflow(address,address,uint256,uint256)": [
        {
          "notice": "Thrown when the allowance increase creates an overflow."
        }
      ],
      "ERC20ApprovalToAddressZero(address)": [
        {
          "notice": "Thrown when setting an allowance to the the zero address."
        }
      ],
      "ERC20BatchMintValuesOverflow()": [
        {
          "notice": "Thrown when the `values` array sum overflows on a batch mint operation."
        }
      ],
      "ERC20BatchTransferValuesOverflow()": [
        {
          "notice": "Thrown when the `values` array sum overflows on a batch transfer operation."
        }
      ],
      "ERC20InsufficientAllowance(address,address,uint256,uint256)": [
        {
          "notice": "Thrown when the allowance decreases below the current alowance set."
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "notice": "Thrown when transferring an amount of tokens greater than the current balance."
        }
      ],
      "ERC20MintToAddressZero()": [
        {
          "notice": "Thrown when the minting tokens to the zero address."
        }
      ],
      "ERC20PermitExpired(uint256)": [
        {
          "notice": "Thrown when the permit is expired."
        }
      ],
      "ERC20PermitFromAddressZero()": [
        {
          "notice": "Thrown when the permit is from the zero address."
        }
      ],
      "ERC20PermitInvalidSignature()": [
        {
          "notice": "Thrown when the permit signature cannot be verified."
        }
      ],
      "ERC20SafeTransferRejected(address)": [
        {
          "notice": "Thrown when a safe transfer is rejected by the recipient contract."
        }
      ],
      "ERC20TotalSupplyOverflow(uint256,uint256)": [
        {
          "notice": "Thrown when the minting tokens overflows the supply."
        }
      ],
      "ERC20TransferToAddressZero(address)": [
        {
          "notice": "Thrown when transferring tokens to the zero address."
        }
      ],
      "IllegalInterfaceId()": [
        {
          "notice": "Thrown when setting the illegal interfaceId 0xffffffff."
        }
      ],
      "InconsistentArrayLengths()": [
        {
          "notice": "Thrown when the multiple related arrays have different lengths."
        }
      ],
      "IncorrectTokenContractType(address)": [
        {
          "notice": "Thrown when trying to recover a token of the wrong contract type."
        }
      ],
      "InitializationPhaseAlreadyReached(uint256,uint256)": [
        {
          "notice": "Emitted when trying to set a phase value that has already been reached."
        }
      ],
      "NotContractOwner(address)": [
        {
          "notice": "Thrown when an account is not the contract owner but is required to."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "Emitted when an approval is set."
      },
      "OwnershipTransferred(address,address)": {
        "notice": "Emitted when the contract ownership changes."
      },
      "Transfer(address,address,uint256)": {
        "notice": "Emitted when tokens are transferred, including zero value transfers."
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Returns the EIP-712 encoded hash struct of the domain-specific information for permits."
      },
      "allowance(address,address)": {
        "notice": "Gets the amount that an account is allowed to spend on behalf of another."
      },
      "approve(address,uint256)": {
        "notice": "Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"
      },
      "balanceOf(address)": {
        "notice": "Gets an account balance."
      },
      "batchTransfer(address[],uint256[])": {
        "notice": "Transfers multiple amounts of tokens to multiple recipients from the sender."
      },
      "batchTransferFrom(address,address[],uint256[])": {
        "notice": "Transfers multiple amounts of tokens to multiple recipients from a specified address."
      },
      "decimals()": {
        "notice": "Gets the number of decimals used to display the balances.For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei."
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks whether a forwarder is trusted."
      },
      "name()": {
        "notice": "Gets the name of the token. E.g. \"My Token\"."
      },
      "nonces(address)": {
        "notice": "Gets the current permit nonce of an account."
      },
      "owner()": {
        "notice": "Gets the address of the contract owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sets the allowance to an account from another account using a signed permit.Warning: The standard ERC20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114"
      },
      "recoverERC20s(address[],address[],uint256[])": {
        "notice": "Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."
      },
      "recoverERC721s(address[],address[],uint256[])": {
        "notice": "Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."
      },
      "recoverETH(address[],uint256[])": {
        "notice": "Extract ETH tokens which were accidentally sent to the contract to a list of accounts."
      },
      "safeTransfer(address,uint256,bytes)": {
        "notice": "Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."
      },
      "setTokenURI(string)": {
        "notice": "Sets the token URI."
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether this contract implements a given interface."
      },
      "symbol()": {
        "notice": "Gets the symbol of the token. E.g. \"TOK\"."
      },
      "tokenURI()": {
        "notice": "Gets the token metadata URI."
      },
      "totalSupply()": {
        "notice": "Gets the total token supply."
      },
      "transfer(address,uint256)": {
        "notice": "Transfers an amount of tokens to a recipient from the sender."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers an amount of tokens to a recipient from a specified address."
      },
      "transferOwnership(address)": {
        "notice": "Sets the address of the new contract owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}