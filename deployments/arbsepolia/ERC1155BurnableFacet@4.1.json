{
  "address": "0xdD6423006E3dA5236C28a75290e2080F9FcDE767",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IForwarderRegistry",
          "name": "forwarderRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155NonApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentArrayLengths",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotProxyAdmin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initERC1155BurnableStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x653b4ef11a0f0666fa16f660d182047b20183779684b1c59f0b5c9095e927215",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB553C4B21966123d7f8c02Ca6909c110260052E8",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "624349",
    "logsBloom": "0x
    "blockHash": "0xa6beb640a1c88a0a40efb4452919f38d626347e84da728cf4d4824399dcdad3a",
    "transactionHash": "0x653b4ef11a0f0666fa16f660d182047b20183779684b1c59f0b5c9095e927215",
    "logs": [],
    "blockNumber": 133419704,
    "cumulativeGasUsed": "624349",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x316a472D084489CB6d4C66e5eB62aE3AdA17521e"
  ],
  "numDeployments": 1,
  "solcInputHash": "84bab0eb3356c2e3bedca0f2f5a163c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155NonApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotProxyAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initERC1155BurnableStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"params\":{\"balance\":\"The current balance.\",\"id\":\"The token identifier.\",\"owner\":\"The owner.\",\"value\":\"The amount of tokens to transfer.\"}}],\"ERC1155NonApproved(address,address)\":[{\"params\":{\"owner\":\"The owner.\",\"sender\":\"The sender.\"}}],\"NotProxyAdmin(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"params\":{\"from\":\"The previous tokens owner.\",\"ids\":\"The transferred tokens identifiers.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new tokens owner.\",\"values\":\"The amounts of tokens.\"}},\"TransferSingle(address,address,address,uint256,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"id\":\"The transferred token identifier.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new token owner.\",\"value\":\"The amount of token.\"}}},\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}},\"initERC1155BurnableStorage()\":{\"details\":\"Reverts with {NotProxyAdmin} if the sender is not the proxy admin.\"}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable (facet version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"notice\":\"Thrown when transferring an amount of tokens greater than the current balance.\"}],\"ERC1155NonApproved(address,address)\":[{\"notice\":\"Thrown when a sender tries to transfer tokens but is neither the owner nor approved by the owner.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotProxyAdmin(address)\":[{\"notice\":\"Thrown when an account is not the proxy admin but is required to.\"}]},\"events\":{\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"notice\":\"Emitted when a batch of tokens is transferred.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when some token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"},\"initERC1155BurnableStorage()\":{\"notice\":\"Marks the following ERC165 interfaces as supported: ERC1155Burnable.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/ERC1155/facets/ERC1155BurnableFacet.sol\":\"ERC1155BurnableFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"contracts/proxy/errors/ProxyAdminErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the initial admin is not set.\\nerror NoInitialProxyAdmin();\\n\\n/// @notice Thrown when an account is not the proxy admin but is required to.\\n/// @param account The account that was checked.\\nerror NotProxyAdmin(address account);\\n\",\"keccak256\":\"0x8ba37d9f154407fc3ddc058b5f678866b274a9674cd850bd8bf73d79e626c160\",\"license\":\"MIT\"},\"contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"contracts/proxy/events/ProxyAdminEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the proxy admin changes.\\n/// @param previousAdmin the previous admin.\\n/// @param newAdmin the new admin.\\nevent AdminChanged(address previousAdmin, address newAdmin);\\n\",\"keccak256\":\"0x8af172a87e9b4f1188e7837f4aaac8bdb438191b1465cc963f4543da1a435476\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyAdminStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NoInitialProxyAdmin, NotProxyAdmin} from \\\"./../errors/ProxyAdminErrors.sol\\\";\\nimport {AdminChanged} from \\\"./../events/ProxyAdminEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./ProxyInitialization.sol\\\";\\n\\nlibrary ProxyAdminStorage {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    struct Layout {\\n        address admin;\\n    }\\n\\n    // bytes32 public constant PROXYADMIN_STORAGE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial admin (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts {NoInitialProxyAdmin} if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function constructorInit(Layout storage s, address initialAdmin) internal {\\n        if (initialAdmin == address(0)) revert NoInitialProxyAdmin();\\n        s.admin = initialAdmin;\\n        emit AdminChanged(address(0), initialAdmin);\\n    }\\n\\n    /// @notice Initializes the storage with an initial admin (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts {NoInitialProxyAdmin} if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function proxyInit(Layout storage s, address initialAdmin) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialAdmin);\\n    }\\n\\n    /// @notice Sets a new proxy admin.\\n    /// @dev Reverts with {NotProxyAdmin} if `sender` is not the proxy admin.\\n    /// @dev Emits an {AdminChanged} event if `newAdmin` is different from the current proxy admin.\\n    /// @param newAdmin The new proxy admin.\\n    function changeProxyAdmin(Layout storage s, address sender, address newAdmin) internal {\\n        address previousAdmin = s.admin;\\n        if (sender != previousAdmin) revert NotProxyAdmin(sender);\\n        if (previousAdmin != newAdmin) {\\n            s.admin = newAdmin;\\n            emit AdminChanged(previousAdmin, newAdmin);\\n        }\\n    }\\n\\n    /// @notice Gets the proxy admin.\\n    /// @return admin The proxy admin\\n    function proxyAdmin(Layout storage s) internal view returns (address admin) {\\n        return s.admin;\\n    }\\n\\n    /// @notice Ensures that an account is the proxy admin.\\n    /// @dev Reverts with {NotProxyAdmin} if `account` is not the proxy admin.\\n    /// @param account The account.\\n    function enforceIsProxyAdmin(Layout storage s, address account) internal view {\\n        if (account != s.admin) revert NotProxyAdmin(account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1f1cb9a6470f14aa9942dedd288aaffc6c582abf831edeb52e51a3691cdd32a4\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"contracts/token/ERC1155/base/ERC1155BurnableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC1155 (Multi Token Standard).\\nabstract contract ERC1155BurnableBase is IERC1155Burnable, Context {\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n\\n    /// @inheritdoc IERC1155Burnable\\n    function burnFrom(address from, uint256 id, uint256 value) external virtual {\\n        ERC1155Storage.layout().burnFrom(_msgSender(), from, id, value);\\n    }\\n\\n    /// @inheritdoc IERC1155Burnable\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external virtual {\\n        ERC1155Storage.layout().batchBurnFrom(_msgSender(), from, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x7041e517e19bc4745e6da03452c60a5e4d79da87b46fcef815a798a5ab50011d\",\"license\":\"MIT\"},\"contracts/token/ERC1155/errors/ERC1155Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC1155SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when transferring tokens to the zero address.\\nerror ERC1155TransferToAddressZero();\\n\\n/// @notice Thrown when a sender tries to transfer tokens but is neither the owner nor approved by the owner.\\n/// @param sender The sender.\\n/// @param owner The owner.\\nerror ERC1155NonApproved(address sender, address owner);\\n\\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\\n/// @param owner The owner.\\n/// @param id The token identifier.\\n/// @param balance The current balance.\\n/// @param value The amount of tokens to transfer.\\nerror ERC1155InsufficientBalance(address owner, uint256 id, uint256 balance, uint256 value);\\n\\n/// @notice Thrown when minting or transferring an amount of tokens that would overflow the recipient's balance.\\n/// @param recipient The recipient.\\n/// @param id The token identifier.\\n/// @param balance The current balance.\\n/// @param value The amount of tokens to transfer.\\nerror ERC1155BalanceOverflow(address recipient, uint256 id, uint256 balance, uint256 value);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param id The token identifier.\\n/// @param value The amount of tokens to transfer.\\nerror ERC1155SafeTransferRejected(address recipient, uint256 id, uint256 value);\\n\\n/// @notice Thrown when a safe batch transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param ids The token identifiers.\\n/// @param values The amounts of tokens to transfer.\\nerror ERC1155SafeBatchTransferRejected(address recipient, uint256[] ids, uint256[] values);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC1155BalanceOfAddressZero();\\n\",\"keccak256\":\"0xa640e585835a4539da0711c0cdc187e7e3682aa7aefd1b116d92b74c17406757\",\"license\":\"MIT\"},\"contracts/token/ERC1155/errors/ERC1155MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when minting tokens to the zero address.\\nerror ERC1155MintToAddressZero();\\n\",\"keccak256\":\"0x5b9fb2919c87c03ca43d2406db789152371750b301cf6b6493eec211da3de27a\",\"license\":\"MIT\"},\"contracts/token/ERC1155/events/ERC1155Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when some token is transferred.\\n/// @param operator The initiator of the transfer.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param id The transferred token identifier.\\n/// @param value The amount of token.\\nevent TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n/// @notice Emitted when a batch of tokens is transferred.\\n/// @param operator The initiator of the transfer.\\n/// @param from The previous tokens owner.\\n/// @param to The new tokens owner.\\n/// @param ids The transferred tokens identifiers.\\n/// @param values The amounts of tokens.\\nevent TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n/// @notice Emitted when a token metadata URI is set updated.\\n/// @param value The token metadata URI.\\n/// @param id The token identifier.\\nevent URI(string value, uint256 indexed id);\\n\",\"keccak256\":\"0x63da57784bdefc5ae4ca5fa822ff9a711c66feea4a84bffbc9b4794ee9ff3a65\",\"license\":\"MIT\"},\"contracts/token/ERC1155/facets/ERC1155BurnableFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC1155Storage} from \\\"./../libraries/ERC1155Storage.sol\\\";\\nimport {ProxyAdminStorage} from \\\"./../../../proxy/libraries/ProxyAdminStorage.sol\\\";\\nimport {ERC1155BurnableBase} from \\\"./../base/ERC1155BurnableBase.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable (facet version).\\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\\n/// @dev Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.\\ncontract ERC1155BurnableFacet is ERC1155BurnableBase, ForwarderRegistryContextBase {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC1155Burnable.\\n    /// @dev Reverts with {NotProxyAdmin} if the sender is not the proxy admin.\\n    function initERC1155BurnableStorage() external {\\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\\n        ERC1155Storage.initERC1155Burnable();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xbb50df9b9b078ac76b9001db59f13a978ade557c174aea26f52d2150d3575dc8\",\"license\":\"MIT\"},\"contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0xf019b657b2742448085c4fb95c9bf4d06306f308555e60825ba61ee6b10501b8\",\"license\":\"MIT\"},\"contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.28;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x3ca9c86cba8266b9f0e8bea0d010d67a2bcbd7f94496bbcb7a469a85b5e453a7\",\"license\":\"MIT\"},\"contracts/token/ERC1155/interfaces/IERC1155Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xe8ab9ccc.\\ninterface IERC1155Deliverable {\\n    /// @notice Safely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `recipients` balance overflows.\\n    /// @dev Reverts if one of `recipients` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event from the zero address for each transfer.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(address[] calldata recipients, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x1cb4edc7a319232946985719e883f4029a43a4a8e60a714f5d550e690f37906e\",\"license\":\"MIT\"},\"contracts/token/ERC1155/interfaces/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\\ninterface IERC1155MetadataURI {\\n    /// @notice Retrieves the URI for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    /// @dev The URI MUST point to a JSON file that conforms to the \\\"ERC1155 Metadata URI JSON Schema\\\".\\n    /// @dev The uri function SHOULD be used to retrieve values if no event was emitted.\\n    /// @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\\n    /// @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\\n    ///  an implementation to return a valid string even if the token does not exist.\\n    /// @return metadataURI The URI associated to the token.\\n    function uri(uint256 id) external view returns (string memory metadataURI);\\n}\\n\",\"keccak256\":\"0xe75edc2d8ac3240182eab6105fd15fad2fb8ff34748df105f82c0f6a1fabd680\",\"license\":\"MIT\"},\"contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.28;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x90770e6af048c59bfc8fbc121f8623b98f1ee4a1e7ceb63698b9d6ff318f59be\",\"license\":\"MIT\"},\"contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x06d49ecd9e76bb0ea465c00cd5a0f2e3029e13b7cb8ec7b04674108a7a9dfe47\",\"license\":\"MIT\"},\"contracts/token/ERC1155/libraries/ERC1155Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC1155SelfApprovalForAll, ERC1155TransferToAddressZero, ERC1155NonApproved, ERC1155InsufficientBalance, ERC1155BalanceOverflow, ERC1155SafeTransferRejected, ERC1155SafeBatchTransferRejected, ERC1155BalanceOfAddressZero} from \\\"./../errors/ERC1155Errors.sol\\\";\\nimport {ERC1155MintToAddressZero} from \\\"./../errors/ERC1155MintableErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {TransferSingle, TransferBatch, ApprovalForAll} from \\\"./../events/ERC1155Events.sol\\\";\\nimport {IERC1155} from \\\"./../interfaces/IERC1155.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./../interfaces/IERC1155MetadataURI.sol\\\";\\nimport {IERC1155Mintable} from \\\"./../interfaces/IERC1155Mintable.sol\\\";\\nimport {IERC1155Deliverable} from \\\"./../interfaces/IERC1155Deliverable.sol\\\";\\nimport {IERC1155Burnable} from \\\"./../interfaces/IERC1155Burnable.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"./../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {Address} from \\\"./../../../utils/libraries/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC1155Storage {\\n    using Address for address;\\n    using ERC1155Storage for ERC1155Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC1155.ERC1155.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC1155_SINGLE_RECEIVED = IERC1155TokenReceiver.onERC1155Received.selector;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED = IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155MetadataURI.\\n    function initERC1155MetadataURI() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155MetadataURI).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Mintable.\\n    function initERC1155Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Deliverable.\\n    function initERC1155Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155Burnable.\\n    function initERC1155Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Safely transfers some token by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeTransferFrom(address,address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC1155TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC1155NonApproved} if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts with {ERC1155InsufficientBalance} if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts with {ERC1155BalanceOverflow} if `to`'s balance of `id` overflows.\\n    /// @dev Reverts with {ERC1155SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 id, uint256 value, bytes calldata data) internal {\\n        if (to == address(0)) revert ERC1155TransferToAddressZero();\\n        if (!_isOperatable(s, from, sender)) revert ERC1155NonApproved(sender, from);\\n\\n        _transferToken(s, from, to, id, value);\\n\\n        emit TransferSingle(sender, from, to, id, value);\\n\\n        if (to.hasBytecode()) {\\n            _callOnERC1155Received(sender, from, to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely transfers a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC1155TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `ids` and `values` have different lengths.\\n    /// @dev Reverts with {ERC1155NonApproved} if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts with {ERC1155InsufficientBalance} if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts with {ERC1155BalanceOverflow} if `to`'s balance of any of `ids` overflows.\\n    /// @dev Reverts with {ERC1155SafeBatchTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(\\n        Layout storage s,\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) internal {\\n        if (to == address(0)) revert ERC1155TransferToAddressZero();\\n        uint256 length = ids.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (!_isOperatable(s, from, sender)) revert ERC1155NonApproved(sender, from);\\n\\n        for (uint256 i; i < length; ++i) {\\n            _transferToken(s, from, to, ids[i], values[i]);\\n        }\\n\\n        emit TransferBatch(sender, from, to, ids, values);\\n\\n        if (to.hasBytecode()) {\\n            _callOnERC1155BatchReceived(sender, from, to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints some token by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeMint(address,uint256,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC1155MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC1155BalanceOverflow} if `to`'s balance of `id` overflows.\\n    /// @dev Reverts with {ERC1155SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(Layout storage s, address sender, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) revert ERC1155MintToAddressZero();\\n\\n        _mintToken(s, to, id, value);\\n\\n        emit TransferSingle(sender, address(0), to, id, value);\\n\\n        if (to.hasBytecode()) {\\n            _callOnERC1155Received(sender, address(0), to, id, value, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC1155Mintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC1155MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `ids` and `values` have different lengths.\\n    /// @dev Reverts with {ERC1155BalanceOverflow} if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts with {ERC1155SafeBatchTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(Layout storage s, address sender, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) revert ERC1155MintToAddressZero();\\n        uint256 length = ids.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        for (uint256 i; i < length; ++i) {\\n            _mintToken(s, to, ids[i], values[i]);\\n        }\\n\\n        emit TransferBatch(sender, address(0), to, ids, values);\\n\\n        if (to.hasBytecode()) {\\n            _callOnERC1155BatchReceived(sender, address(0), to, ids, values, data);\\n        }\\n    }\\n\\n    /// @notice Safely mints tokens to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC1155Deliverable-safeDeliver(address[],uint256[],uint256[],bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients`, `ids` and `values` have different lengths.\\n    /// @dev Reverts with {ERC1155MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC1155BalanceOverflow} if one of the `recipients`' balance overflows for the associated `ids`.\\n    /// @dev Reverts with {ERC1155SafeTransferRejected} if one of `recipients` is a contract and the call to\\n    ///  {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event from the zero address for each transfer.\\n    /// @param sender The message sender.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeDeliver(\\n        Layout storage s,\\n        address sender,\\n        address[] memory recipients,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        uint256 length = recipients.length;\\n        if (length != ids.length || length != values.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.safeMint(sender, recipients[i], ids[i], values[i], data);\\n        }\\n    }\\n\\n    /// @notice Burns some token by a sender.\\n    /// @dev Reverts with {ERC1155NonApproved} if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts with {ERC1155InsufficientBalance} if `from` has an insufficient balance of `id`.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 id, uint256 value) internal {\\n        if (!_isOperatable(s, from, sender)) revert ERC1155NonApproved(sender, from);\\n        _burnToken(s, from, id, value);\\n        emit TransferSingle(sender, from, address(0), id, value);\\n    }\\n\\n    /// @notice Burns multiple tokens by a sender.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `ids` and `values` have different lengths.\\n    /// @dev Reverts with {ERC1155NonApproved} if `sender` is not `from` and has not been approved by `from`.\\n    /// @dev Reverts with {ERC1155InsufficientBalance} if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param sender The message sender.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata ids, uint256[] calldata values) internal {\\n        uint256 length = ids.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n        if (!_isOperatable(s, from, sender)) revert ERC1155NonApproved(sender, from);\\n\\n        for (uint256 i; i < length; ++i) {\\n            _burnToken(s, from, ids[i], values[i]);\\n        }\\n\\n        emit TransferBatch(sender, from, address(0), ids, values);\\n    }\\n\\n    /// @notice Enables or disables an operator's approval by a sender.\\n    /// @dev Reverts with {ERC1155SelfApprovalForAll} if `sender` is `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC1155SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approved) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @dev Reverts with {ERC1155BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(Layout storage s, address owner, uint256 id) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC1155BalanceOfAddressZero();\\n        return s.balances[id][owner];\\n    }\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `ids` have different lengths.\\n    /// @dev Reverts with {ERC1155BalanceOfAddressZero} if one of `owners` is the zero address.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(Layout storage s, address[] calldata owners, uint256[] calldata ids) internal view returns (uint256[] memory balances) {\\n        uint256 length = owners.length;\\n        if (length != ids.length) revert InconsistentArrayLengths();\\n\\n        balances = new uint256[](owners.length);\\n\\n        for (uint256 i; i < length; ++i) {\\n            balances[i] = s.balanceOf(owners[i], ids[i]);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _transferToken(Layout storage s, address from, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            uint256 fromBalance = s.balances[id][from];\\n            unchecked {\\n                uint256 newFromBalance = fromBalance - value;\\n                if (newFromBalance >= fromBalance) revert ERC1155InsufficientBalance(from, id, fromBalance, value);\\n                if (from != to) {\\n                    uint256 toBalance = s.balances[id][to];\\n                    uint256 newToBalance = toBalance + value;\\n                    if (newToBalance <= toBalance) revert ERC1155BalanceOverflow(to, id, toBalance, value);\\n\\n                    s.balances[id][from] = newFromBalance;\\n                    s.balances[id][to] = newToBalance;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _mintToken(Layout storage s, address to, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            unchecked {\\n                uint256 balance = s.balances[id][to];\\n                uint256 newBalance = balance + value;\\n                if (newBalance <= balance) revert ERC1155BalanceOverflow(to, id, balance, value);\\n                s.balances[id][to] = newBalance;\\n            }\\n        }\\n    }\\n\\n    function _burnToken(Layout storage s, address from, uint256 id, uint256 value) private {\\n        if (value != 0) {\\n            uint256 balance = s.balances[id][from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC1155InsufficientBalance(from, id, balance, value);\\n                s.balances[id][from] = newBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\\n    /// @dev Reverts with {ERC1155SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param id Identifier of the token transferred.\\n    /// @param value Value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155Received(address sender, address from, address to, uint256 id, uint256 value, bytes memory data) private {\\n        if (IERC1155TokenReceiver(to).onERC1155Received(sender, from, id, value, data) != ERC1155_SINGLE_RECEIVED)\\n            revert ERC1155SafeTransferRejected(to, id, value);\\n    }\\n\\n    /// @notice Calls {IERC1155TokenReceiver-onERC1155BatchReceived} on a target contract.\\n    /// @dev Reverts with {ERC1155SafeBatchTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param ids Identifiers of the tokens transferred.\\n    /// @param values Values transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC1155BatchReceived(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (IERC1155TokenReceiver(to).onERC1155BatchReceived(sender, from, ids, values, data) != ERC1155_BATCH_RECEIVED)\\n            revert ERC1155SafeBatchTransferRejected(to, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x201df15650b747c9d5db30e0b9d88d24b48dc25261c21e8870e181ed30980721\",\"license\":\"MIT\"},\"contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052348015600f57600080fd5b50604051610ae7380380610ae7833981016040819052602c91603c565b6001600160a01b0316608052606a565b600060208284031215604d57600080fd5b81516001600160a01b0381168114606357600080fd5b9392505050565b608051610a5b61008c6000396000818161048901526105170152610a5b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063124d91e514610046578063641ff7d91461005b5780638053493414610063575b600080fd5b610059610054366004610811565b610076565b005b61005961009a565b610059610071366004610890565b6100bd565b6100956100816100e7565b84848461008c6100f6565b9392919061012a565b505050565b6100b36100a56100e7565b6100ad6101fc565b9061022a565b6100bb610299565b565b6100e06100c86100e7565b86868686866100d56100f6565b9594939291906102ce565b5050505050565b60006100f1610446565b905090565b60008061012460017f5ccf5846fa27a68fafc8e588671a68f5e67c2f9b56af4263806a4d71735e8613610916565b92915050565b610135858486610593565b610190576040517f05bbb9c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152841660248201526044015b60405180910390fd5b61019c8584848461060b565b604080518381526020810183905260009173ffffffffffffffffffffffffffffffffffffffff86811692908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60008061012460017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104610916565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610295576040517f673a31a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610187565b5050565b6100bb7f921ed8d10000000000000000000000000000000000000000000000000000000060016102c76106de565b919061070c565b82818114610308576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610313888789610593565b610369576040517f05bbb9c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015287166024820152604401610187565b60005b818110156103b8576103b0898888888581811061038b5761038b610950565b905060200201358787868181106103a4576103a4610950565b9050602002013561060b565b60010161036c565b50600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8888888860405161043494939291906109ca565b60405180910390a45050505050505050565b6000333214806104565750601836105b1561046057503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061058257506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058291906109fc565b1561058c57919050565b3391505090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610603575073ffffffffffffffffffffffffffffffffffffffff808416600090815260018601602090815260408083209386168352929052205460ff165b949350505050565b80156106d85760008281526020858152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091529020548181038181106106a8576040517f03dee4c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152602481018590526044810183905260648101849052608401610187565b60008481526020878152604080832073ffffffffffffffffffffffffffffffffffffffff89168452909152902055505b50505050565b60008061012460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610916565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610784576040517f72c683bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b803573ffffffffffffffffffffffffffffffffffffffff8116811461080c57600080fd5b919050565b60008060006060848603121561082657600080fd5b61082f846107e8565b95602085013595506040909401359392505050565b60008083601f84011261085657600080fd5b50813567ffffffffffffffff81111561086e57600080fd5b6020830191508360208260051b850101111561088957600080fd5b9250929050565b6000806000806000606086880312156108a857600080fd5b6108b1866107e8565b9450602086013567ffffffffffffffff8111156108cd57600080fd5b6108d988828901610844565b909550935050604086013567ffffffffffffffff8111156108f957600080fd5b61090588828901610844565b969995985093965092949392505050565b81810381811115610124577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156109b157600080fd5b8260051b80836020870137939093016020019392505050565b6040815260006109de60408301868861097f565b82810360208401526109f181858761097f565b979650505050505050565b600060208284031215610a0e57600080fd5b81518015158114610a1e57600080fd5b939250505056fea2646970667358221220a5b5a01f99fac7b0b293af91b98aa9c9c415f77f7047cb2734acabe4a9db737b64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063124d91e514610046578063641ff7d91461005b5780638053493414610063575b600080fd5b610059610054366004610811565b610076565b005b61005961009a565b610059610071366004610890565b6100bd565b6100956100816100e7565b84848461008c6100f6565b9392919061012a565b505050565b6100b36100a56100e7565b6100ad6101fc565b9061022a565b6100bb610299565b565b6100e06100c86100e7565b86868686866100d56100f6565b9594939291906102ce565b5050505050565b60006100f1610446565b905090565b60008061012460017f5ccf5846fa27a68fafc8e588671a68f5e67c2f9b56af4263806a4d71735e8613610916565b92915050565b610135858486610593565b610190576040517f05bbb9c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152841660248201526044015b60405180910390fd5b61019c8584848461060b565b604080518381526020810183905260009173ffffffffffffffffffffffffffffffffffffffff86811692908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60008061012460017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104610916565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610295576040517f673a31a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610187565b5050565b6100bb7f921ed8d10000000000000000000000000000000000000000000000000000000060016102c76106de565b919061070c565b82818114610308576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610313888789610593565b610369576040517f05bbb9c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015287166024820152604401610187565b60005b818110156103b8576103b0898888888581811061038b5761038b610950565b905060200201358787868181106103a4576103a4610950565b9050602002013561060b565b60010161036c565b50600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8888888860405161043494939291906109ca565b60405180910390a45050505050505050565b6000333214806104565750601836105b1561046057503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061058257506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058291906109fc565b1561058c57919050565b3391505090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610603575073ffffffffffffffffffffffffffffffffffffffff808416600090815260018601602090815260408083209386168352929052205460ff165b949350505050565b80156106d85760008281526020858152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091529020548181038181106106a8576040517f03dee4c500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152602481018590526044810183905260648101849052608401610187565b60008481526020878152604080832073ffffffffffffffffffffffffffffffffffffffff89168452909152902055505b50505050565b60008061012460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610916565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610784576040517f72c683bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b803573ffffffffffffffffffffffffffffffffffffffff8116811461080c57600080fd5b919050565b60008060006060848603121561082657600080fd5b61082f846107e8565b95602085013595506040909401359392505050565b60008083601f84011261085657600080fd5b50813567ffffffffffffffff81111561086e57600080fd5b6020830191508360208260051b850101111561088957600080fd5b9250929050565b6000806000806000606086880312156108a857600080fd5b6108b1866107e8565b9450602086013567ffffffffffffffff8111156108cd57600080fd5b6108d988828901610844565b909550935050604086013567ffffffffffffffff8111156108f957600080fd5b61090588828901610844565b969995985093965092949392505050565b81810381811115610124577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156109b157600080fd5b8260051b80836020870137939093016020019392505050565b6040815260006109de60408301868861097f565b82810360208401526109f181858761097f565b979650505050505050565b600060208284031215610a0e57600080fd5b81518015158114610a1e57600080fd5b939250505056fea2646970667358221220a5b5a01f99fac7b0b293af91b98aa9c9c415f77f7047cb2734acabe4a9db737b64736f6c634300081c0033",
  "devdoc": {
    "details": "This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).Note: This facet depends on {ProxyAdminFacet}, and {InterfaceDetectionFacet}.",
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "params": {
            "balance": "The current balance.",
            "id": "The token identifier.",
            "owner": "The owner.",
            "value": "The amount of tokens to transfer."
          }
        }
      ],
      "ERC1155NonApproved(address,address)": [
        {
          "params": {
            "owner": "The owner.",
            "sender": "The sender."
          }
        }
      ],
      "NotProxyAdmin(address)": [
        {
          "params": {
            "account": "The account that was checked."
          }
        }
      ]
    },
    "events": {
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "params": {
          "from": "The previous tokens owner.",
          "ids": "The transferred tokens identifiers.",
          "operator": "The initiator of the transfer.",
          "to": "The new tokens owner.",
          "values": "The amounts of tokens."
        }
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "params": {
          "from": "The previous token owner.",
          "id": "The transferred token identifier.",
          "operator": "The initiator of the transfer.",
          "to": "The new token owner.",
          "value": "The amount of token."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "batchBurnFrom(address,uint256[],uint256[])": {
        "details": "Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.",
        "params": {
          "from": "Address of the current tokens owner.",
          "ids": "Identifiers of the tokens to burn.",
          "values": "Amounts of tokens to burn."
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "details": "Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.",
        "params": {
          "from": "Address of the current token owner.",
          "id": "Identifier of the token to burn.",
          "value": "Amount of token to burn."
        }
      },
      "initERC1155BurnableStorage()": {
        "details": "Reverts with {NotProxyAdmin} if the sender is not the proxy admin."
      }
    },
    "title": "ERC1155 Multi Token Standard, optional extension: Burnable (facet version).",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "notice": "Thrown when transferring an amount of tokens greater than the current balance."
        }
      ],
      "ERC1155NonApproved(address,address)": [
        {
          "notice": "Thrown when a sender tries to transfer tokens but is neither the owner nor approved by the owner."
        }
      ],
      "IllegalInterfaceId()": [
        {
          "notice": "Thrown when setting the illegal interfaceId 0xffffffff."
        }
      ],
      "InconsistentArrayLengths()": [
        {
          "notice": "Thrown when the multiple related arrays have different lengths."
        }
      ],
      "NotProxyAdmin(address)": [
        {
          "notice": "Thrown when an account is not the proxy admin but is required to."
        }
      ]
    },
    "events": {
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "notice": "Emitted when a batch of tokens is transferred."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "notice": "Emitted when some token is transferred."
      }
    },
    "kind": "user",
    "methods": {
      "batchBurnFrom(address,uint256[],uint256[])": {
        "notice": "Burns multiple tokens."
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "Burns some token."
      },
      "initERC1155BurnableStorage()": {
        "notice": "Marks the following ERC165 interfaces as supported: ERC1155Burnable."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}