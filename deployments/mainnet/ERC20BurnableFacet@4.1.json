{
  "address": "0x352b7f7f30B9e239991AB61329434d1DdDE8D7D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IForwarderRegistry",
          "name": "forwarderRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC20ApprovalToAddressZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decrement",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InconsistentArrayLengths",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotProxyAdmin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "batchBurnFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initERC20BurnableStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42705ae20350b69aa89cb5438a0b7a4674412224bd7b3d8efef237850ecb6da9",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x80b12BD0F1793BF6CEa767Fa83Eb2068eaa17DC8",
    "contractAddress": null,
    "transactionIndex": 54,
    "gasUsed": "718033",
    "logsBloom": "0x
    "blockHash": "0xeb9238b5a61a3705c5b89e8aeaf23a2a579c2a2800d6e70deaaf298869fb7250",
    "transactionHash": "0x42705ae20350b69aa89cb5438a0b7a4674412224bd7b3d8efef237850ecb6da9",
    "logs": [],
    "blockNumber": 22120662,
    "cumulativeGasUsed": "5162612",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x316a472D084489CB6d4C66e5eB62aE3AdA17521e"
  ],
  "numDeployments": 1,
  "solcInputHash": "84bab0eb3356c2e3bedca0f2f5a163c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC20ApprovalToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotProxyAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initERC20BurnableStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\",\"errors\":{\"ERC20ApprovalToAddressZero(address)\":[{\"params\":{\"owner\":\"The owner of the tokens.\"}}],\"ERC20InsufficientAllowance(address,address,uint256,uint256)\":[{\"params\":{\"allowance\":\"The current allowance.\",\"decrement\":\"The allowance decrease.\",\"owner\":\"The owner of the tokens.\",\"spender\":\"The spender of the tokens.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"params\":{\"balance\":\"The current balance.\",\"owner\":\"The owner of the tokens.\",\"value\":\"The amount of tokens being transferred.\"}}],\"NotProxyAdmin(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"The account granting an allowance to `spender`.\",\"spender\":\"The account being granted an allowance from `owner`.\",\"value\":\"The allowance amount being granted.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The account where the transferred tokens are withdrawn from.\",\"to\":\"The account where the transferred tokens are deposited to.\",\"value\":\"The amount of tokens being transferred.\"}}},\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\",\"params\":{\"owners\":\"The list of accounts to burn the tokens from.\",\"values\":\"The list of amounts of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"burn(uint256)\":{\"details\":\"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.\",\"params\":{\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account to burn the tokens from.\",\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"Whether the operation succeeded.\"}},\"initERC20BurnableStorage()\":{\"details\":\"Reverts with {NotProxyAdmin} if the sender is not the proxy admin.\"}},\"title\":\"ERC20 Fungible Token Standard, optional extension: Burnable (facet version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20ApprovalToAddressZero(address)\":[{\"notice\":\"Thrown when setting an allowance to the the zero address.\"}],\"ERC20InsufficientAllowance(address,address,uint256,uint256)\":[{\"notice\":\"Thrown when the allowance decreases below the current alowance set.\"}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"notice\":\"Thrown when transferring an amount of tokens greater than the current balance.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotProxyAdmin(address)\":[{\"notice\":\"Thrown when an account is not the proxy admin but is required to.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when an approval is set.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"notice\":\"Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\"},\"burn(uint256)\":{\"notice\":\"Burns an amount of tokens from the sender, decreasing the total supply.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns an amount of tokens from a specified address, decreasing the total supply.\"},\"initERC20BurnableStorage()\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Burnable.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/ERC20/facets/ERC20BurnableFacet.sol\":\"ERC20BurnableFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"contracts/proxy/errors/ProxyAdminErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the initial admin is not set.\\nerror NoInitialProxyAdmin();\\n\\n/// @notice Thrown when an account is not the proxy admin but is required to.\\n/// @param account The account that was checked.\\nerror NotProxyAdmin(address account);\\n\",\"keccak256\":\"0x8ba37d9f154407fc3ddc058b5f678866b274a9674cd850bd8bf73d79e626c160\",\"license\":\"MIT\"},\"contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"contracts/proxy/events/ProxyAdminEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the proxy admin changes.\\n/// @param previousAdmin the previous admin.\\n/// @param newAdmin the new admin.\\nevent AdminChanged(address previousAdmin, address newAdmin);\\n\",\"keccak256\":\"0x8af172a87e9b4f1188e7837f4aaac8bdb438191b1465cc963f4543da1a435476\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyAdminStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NoInitialProxyAdmin, NotProxyAdmin} from \\\"./../errors/ProxyAdminErrors.sol\\\";\\nimport {AdminChanged} from \\\"./../events/ProxyAdminEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./ProxyInitialization.sol\\\";\\n\\nlibrary ProxyAdminStorage {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    struct Layout {\\n        address admin;\\n    }\\n\\n    // bytes32 public constant PROXYADMIN_STORAGE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.admin.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial admin (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts {NoInitialProxyAdmin} if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function constructorInit(Layout storage s, address initialAdmin) internal {\\n        if (initialAdmin == address(0)) revert NoInitialProxyAdmin();\\n        s.admin = initialAdmin;\\n        emit AdminChanged(address(0), initialAdmin);\\n    }\\n\\n    /// @notice Initializes the storage with an initial admin (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts {NoInitialProxyAdmin} if `initialAdmin` is the zero address.\\n    /// @dev Emits an {AdminChanged} event.\\n    /// @param initialAdmin The initial payout wallet.\\n    function proxyInit(Layout storage s, address initialAdmin) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialAdmin);\\n    }\\n\\n    /// @notice Sets a new proxy admin.\\n    /// @dev Reverts with {NotProxyAdmin} if `sender` is not the proxy admin.\\n    /// @dev Emits an {AdminChanged} event if `newAdmin` is different from the current proxy admin.\\n    /// @param newAdmin The new proxy admin.\\n    function changeProxyAdmin(Layout storage s, address sender, address newAdmin) internal {\\n        address previousAdmin = s.admin;\\n        if (sender != previousAdmin) revert NotProxyAdmin(sender);\\n        if (previousAdmin != newAdmin) {\\n            s.admin = newAdmin;\\n            emit AdminChanged(previousAdmin, newAdmin);\\n        }\\n    }\\n\\n    /// @notice Gets the proxy admin.\\n    /// @return admin The proxy admin\\n    function proxyAdmin(Layout storage s) internal view returns (address admin) {\\n        return s.admin;\\n    }\\n\\n    /// @notice Ensures that an account is the proxy admin.\\n    /// @dev Reverts with {NotProxyAdmin} if `account` is not the proxy admin.\\n    /// @param account The account.\\n    function enforceIsProxyAdmin(Layout storage s, address account) internal view {\\n        if (account != s.admin) revert NotProxyAdmin(account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1f1cb9a6470f14aa9942dedd288aaffc6c582abf831edeb52e51a3691cdd32a4\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"contracts/token/ERC20/base/ERC20BurnableBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC20 (Fungible Token Standard).\\nabstract contract ERC20BurnableBase is IERC20Burnable, Context {\\n    using ERC20Storage for ERC20Storage.Layout;\\n\\n    /// @inheritdoc IERC20Burnable\\n    function burn(uint256 value) external virtual returns (bool) {\\n        ERC20Storage.layout().burn(_msgSender(), value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Burnable\\n    function burnFrom(address from, uint256 value) external virtual returns (bool) {\\n        ERC20Storage.layout().burnFrom(_msgSender(), from, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20Burnable\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external virtual returns (bool) {\\n        ERC20Storage.layout().batchBurnFrom(_msgSender(), owners, values);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x7f2115b4808cf36ac99b057489d28aedc741ab65bc623cc6a73e35b96a3d669b\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20AllowanceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the allowance increase creates an overflow.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param increment The allowance increase.\\nerror ERC20AllowanceOverflow(address owner, address spender, uint256 allowance, uint256 increment);\\n\",\"keccak256\":\"0x4f9dbb3db998429b996aeeaa937ab2cecb0e65b14359bfd2c59d8926aa35b9c9\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch transfer operation.\\nerror ERC20BatchTransferValuesOverflow();\\n\",\"keccak256\":\"0x1d5238c7a3a1a2bbea8bf4c3dbb3f479047c6d66566c02fa0e253fb59deff38f\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting an allowance to the the zero address.\\n/// @param owner The owner of the tokens.\\nerror ERC20ApprovalToAddressZero(address owner);\\n\\n/// @notice Thrown when the allowance decreases below the current alowance set.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param decrement The allowance decrease.\\nerror ERC20InsufficientAllowance(address owner, address spender, uint256 allowance, uint256 decrement);\\n\\n/// @notice Thrown when transferring tokens to the zero address.\\n/// @param owner The account from which the tokens are transferred.\\nerror ERC20TransferToAddressZero(address owner);\\n\\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\\n/// @param owner The owner of the tokens.\\n/// @param balance The current balance.\\n/// @param value The amount of tokens being transferred.\\nerror ERC20InsufficientBalance(address owner, uint256 balance, uint256 value);\\n\",\"keccak256\":\"0x43d145fcf88405e58f2bdb28d5f4e2ac12b98507af3bc9f8c7cdee4b908404c1\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the minting tokens to the zero address.\\nerror ERC20MintToAddressZero();\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch mint operation.\\nerror ERC20BatchMintValuesOverflow();\\n\\n/// @notice Thrown when the minting tokens overflows the supply.\\n/// @param supply The current supply.\\n/// @param value The amount of tokens being minted.\\nerror ERC20TotalSupplyOverflow(uint256 supply, uint256 value);\\n\",\"keccak256\":\"0x2f18d0b1ceecdc4684b8b2bf41887042a10e9a9fd1054b881032b08c48c047a1\",\"license\":\"MIT\"},\"contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\nerror ERC20SafeTransferRejected(address recipient);\\n\",\"keccak256\":\"0x3377653b83de8fd8a72bc7b66179ac8e8f7bcafba89a6c6db11e7906a880ecd1\",\"license\":\"MIT\"},\"contracts/token/ERC20/events/ERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when tokens are transferred, including zero value transfers.\\n/// @param from The account where the transferred tokens are withdrawn from.\\n/// @param to The account where the transferred tokens are deposited to.\\n/// @param value The amount of tokens being transferred.\\nevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n/// @notice Emitted when an approval is set.\\n/// @param owner The account granting an allowance to `spender`.\\n/// @param spender The account being granted an allowance from `owner`.\\n/// @param value The allowance amount being granted.\\nevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\",\"keccak256\":\"0xd4a596f9748c2c306ad9e602956d2cdc17f5d8bfca99647e142b63d44f7d0a82\",\"license\":\"MIT\"},\"contracts/token/ERC20/facets/ERC20BurnableFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC20Storage} from \\\"./../libraries/ERC20Storage.sol\\\";\\nimport {ProxyAdminStorage} from \\\"./../../../proxy/libraries/ProxyAdminStorage.sol\\\";\\nimport {ERC20BurnableBase} from \\\"./../base/ERC20BurnableBase.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, optional extension: Burnable (facet version).\\n/// @dev This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).\\n/// @dev Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.\\ncontract ERC20BurnableFacet is ERC20BurnableBase, ForwarderRegistryContextBase {\\n    using ProxyAdminStorage for ProxyAdminStorage.Layout;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContextBase(forwarderRegistry) {}\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    /// @dev Reverts with {NotProxyAdmin} if the sender is not the proxy admin.\\n    function initERC20BurnableStorage() external {\\n        ProxyAdminStorage.layout().enforceIsProxyAdmin(_msgSender());\\n        ERC20Storage.initERC20Burnable();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xf6b1947181d5e1193017c8b081c3ba8105cf730a0a7c1866f2efa0d506144335\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0x1f52c6f79dc8a1681712811688753d65c12a684fc94aeb776c65780b0125c1df\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xf11a7de9258ff2518af82357afdf852352b4f9759e2372e5b0c89dcbf142c50d\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x147f181fad3ab906471b002325e02a2395218c5e49de4da011d3ac0591742e22\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x298558ada849681cab64032d620c31f956c5296506006f7273cbf58974372c27\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x8507c91851eebb6bcf4a7b416d0d2ed25400162b96b140951bbcc9ccdbc8d9c4\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"},\"contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC20ApprovalToAddressZero, ERC20InsufficientAllowance, ERC20TransferToAddressZero, ERC20InsufficientBalance} from \\\"./../errors/ERC20Errors.sol\\\";\\nimport {ERC20AllowanceOverflow} from \\\"./../errors/ERC20AllowanceErrors.sol\\\";\\nimport {ERC20BatchTransferValuesOverflow} from \\\"./../errors/ERC20BatchTransfersErrors.sol\\\";\\nimport {ERC20SafeTransferRejected} from \\\"./../errors/ERC20SafeTransfersErrors.sol\\\";\\nimport {ERC20MintToAddressZero, ERC20BatchMintValuesOverflow, ERC20TotalSupplyOverflow} from \\\"./../errors/ERC20MintableErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval} from \\\"./../events/ERC20Events.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"./../../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.phase\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function initWithAllocations(address[] memory initialHolders, uint256[] memory initialAllocations) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        init();\\n        layout().batchMint(initialHolders, initialAllocations);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = currentAllowance + value;\\n                if (newAllowance <= currentAllowance) revert ERC20AllowanceOverflow(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n\\n        if (currentAllowance != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = currentAllowance - value;\\n                if (newAllowance >= currentAllowance) revert ERC20InsufficientAllowance(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n            uint256 value = values[i];\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n            }\\n            emit Transfer(from, to, value);\\n        }\\n\\n        if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n            unchecked {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n            uint256 value = values[i];\\n\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n            }\\n\\n            emit Transfer(from, to, value);\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                unchecked {\\n                    uint256 newBalance = balance - totalValue;\\n                    // balance must be sufficient, including self-transfers\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                    s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n                }\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transfer(from, to, value);\\n        if (to.hasBytecode()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.hasBytecode()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(Layout storage s, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20MintToAddressZero();\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, value);\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20MintToAddressZero();\\n\\n            uint256 value = values[i];\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchMintValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n            }\\n            emit Transfer(address(0), to, value);\\n        }\\n\\n        if (totalValue != 0) {\\n            unchecked {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, totalValue);\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(Layout storage s, address from, uint256 value) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\\n    ///  at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\\n        uint256 length = owners.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address from = owners[i];\\n            uint256 value = values[i];\\n\\n            if (from != sender) {\\n                s.decreaseAllowance(from, sender, value);\\n            }\\n\\n            if (value != 0) {\\n                uint256 balance = s.balances[from];\\n                unchecked {\\n                    uint256 newBalance = balance - value;\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n            }\\n\\n            emit Transfer(from, address(0), value);\\n        }\\n\\n        if (totalValue != 0) {\\n            unchecked {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\\n        if (IERC20Receiver(to).onERC20Received(sender, from, value, data) != ERC20_RECEIVED) revert ERC20SafeTransferRejected(to);\\n    }\\n}\\n\",\"keccak256\":\"0xc9c4d98135ba7d9590d4ff6e055570c7c11dc0860d597bfc2f256c92ff648fa0\",\"license\":\"MIT\"},\"contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052348015600f57600080fd5b50604051610c99380380610c99833981016040819052602c91603c565b6001600160a01b0316608052606a565b600060208284031215604d57600080fd5b81516001600160a01b0381168114606357600080fd5b9392505050565b608051610c0d61008c6000396000818161060d015261069b0152610c0d6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631b9a75291461005157806342966c6814610078578063751ec2d31461008b57806379cc679014610095575b600080fd5b61006461005f366004610a4d565b6100a8565b604051901515815260200160405180910390f35b610064610086366004610abe565b6100d6565b6100936100fb565b005b6100646100a3366004610b00565b61011e565b60006100cb6100b5610147565b868686866100c1610156565b9493929190610184565b506001949350505050565b60006100f36100e3610147565b836100ec610156565b9190610394565b506001919050565b610114610106610147565b61010e6104a8565b906104d6565b61011c610545565b565b600061013d61012b610147565b8484610135610156565b92919061057a565b5060015b92915050565b60006101516105ca565b905090565b60008061014160017f1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef610b2a565b828181146101be576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000036101cc575061038c565b6000805b828110156103765760008787838181106101ec576101ec610b64565b90506020020160208101906102019190610b93565b9050600086868481811061021757610217610b64565b9050602002013590508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461025f5761025f8b838c84610717565b801561031e5773ffffffffffffffffffffffffffffffffffffffff8216600090815260208c905260409020548181038181106102f2576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604481018490526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208e9052604090205550928301925b60405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350506001016101d0565b5080156103895760028801805482900390555b50505b505050505050565b80156104555773ffffffffffffffffffffffffffffffffffffffff8216600090815260208490526040902054818103818110610422576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604481018490526064016102e9565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602086905260409020555060028301805482900390555b60405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60008061014160017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104610b2a565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610541576040517f673a31a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016102e9565b5050565b61011c7f20c07ed10000000000000000000000000000000000000000000000000000000060016105736108f7565b9190610925565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105b9576105b984838584610717565b6105c4848383610394565b50505050565b6000333214806105da5750601836105b156105e457503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061070657506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190610bb5565b1561071057919050565b3391505090565b73ffffffffffffffffffffffffffffffffffffffff821661077c576040517ff7e1ac0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016102e9565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81148015906107e057508115155b156108895781810381811061084f576040517f137ad6ab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528516602482015260448101839052606481018490526084016102e9565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600188016020908152604080832093881683529290522081905590505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108e891815260200190565b60405180910390a35050505050565b60008061014160017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610b2a565b7c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161099d576040517f72c683bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60008083601f840112610a1357600080fd5b50813567ffffffffffffffff811115610a2b57600080fd5b6020830191508360208260051b8501011115610a4657600080fd5b9250929050565b60008060008060408587031215610a6357600080fd5b843567ffffffffffffffff811115610a7a57600080fd5b610a8687828801610a01565b909550935050602085013567ffffffffffffffff811115610aa657600080fd5b610ab287828801610a01565b95989497509550505050565b600060208284031215610ad057600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610afb57600080fd5b919050565b60008060408385031215610b1357600080fd5b610b1c83610ad7565b946020939093013593505050565b81810381811115610141577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610ba557600080fd5b610bae82610ad7565b9392505050565b600060208284031215610bc757600080fd5b81518015158114610bae57600080fdfea2646970667358221220ca44644da3d3d75a2ec42768d24777704414bcb6141423ccafb09d4f9ec235db64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631b9a75291461005157806342966c6814610078578063751ec2d31461008b57806379cc679014610095575b600080fd5b61006461005f366004610a4d565b6100a8565b604051901515815260200160405180910390f35b610064610086366004610abe565b6100d6565b6100936100fb565b005b6100646100a3366004610b00565b61011e565b60006100cb6100b5610147565b868686866100c1610156565b9493929190610184565b506001949350505050565b60006100f36100e3610147565b836100ec610156565b9190610394565b506001919050565b610114610106610147565b61010e6104a8565b906104d6565b61011c610545565b565b600061013d61012b610147565b8484610135610156565b92919061057a565b5060015b92915050565b60006101516105ca565b905090565b60008061014160017f1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef610b2a565b828181146101be576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000036101cc575061038c565b6000805b828110156103765760008787838181106101ec576101ec610b64565b90506020020160208101906102019190610b93565b9050600086868481811061021757610217610b64565b9050602002013590508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461025f5761025f8b838c84610717565b801561031e5773ffffffffffffffffffffffffffffffffffffffff8216600090815260208c905260409020548181038181106102f2576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604481018490526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208e9052604090205550928301925b60405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350506001016101d0565b5080156103895760028801805482900390555b50505b505050505050565b80156104555773ffffffffffffffffffffffffffffffffffffffff8216600090815260208490526040902054818103818110610422576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604481018490526064016102e9565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602086905260409020555060028301805482900390555b60405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60008061014160017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104610b2a565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610541576040517f673a31a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016102e9565b5050565b61011c7f20c07ed10000000000000000000000000000000000000000000000000000000060016105736108f7565b9190610925565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105b9576105b984838584610717565b6105c4848383610394565b50505050565b6000333214806105da5750601836105b156105e457503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061070657506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190610bb5565b1561071057919050565b3391505090565b73ffffffffffffffffffffffffffffffffffffffff821661077c576040517ff7e1ac0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016102e9565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526001860160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81148015906107e057508115155b156108895781810381811061084f576040517f137ad6ab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80871660048301528516602482015260448101839052606481018490526084016102e9565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600188016020908152604080832093881683529290522081905590505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108e891815260200190565b60405180910390a35050505050565b60008061014160017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610b2a565b7c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161099d576040517f72c683bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60008083601f840112610a1357600080fd5b50813567ffffffffffffffff811115610a2b57600080fd5b6020830191508360208260051b8501011115610a4657600080fd5b9250929050565b60008060008060408587031215610a6357600080fd5b843567ffffffffffffffff811115610a7a57600080fd5b610a8687828801610a01565b909550935050602085013567ffffffffffffffff811115610aa657600080fd5b610ab287828801610a01565b95989497509550505050565b600060208284031215610ad057600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610afb57600080fd5b919050565b60008060408385031215610b1357600080fd5b610b1c83610ad7565b946020939093013593505050565b81810381811115610141577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610ba557600080fd5b610bae82610ad7565b9392505050565b600060208284031215610bc757600080fd5b81518015158114610bae57600080fdfea2646970667358221220ca44644da3d3d75a2ec42768d24777704414bcb6141423ccafb09d4f9ec235db64736f6c634300081c0033",
  "devdoc": {
    "details": "This contract is to be used as a diamond facet (see ERC2535 Diamond Standard https://eips.ethereum.org/EIPS/eip-2535).Note: This facet depends on {ProxyAdminFacet} and {InterfaceDetectionFacet}.",
    "errors": {
      "ERC20ApprovalToAddressZero(address)": [
        {
          "params": {
            "owner": "The owner of the tokens."
          }
        }
      ],
      "ERC20InsufficientAllowance(address,address,uint256,uint256)": [
        {
          "params": {
            "allowance": "The current allowance.",
            "decrement": "The allowance decrease.",
            "owner": "The owner of the tokens.",
            "spender": "The spender of the tokens."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "params": {
            "balance": "The current balance.",
            "owner": "The owner of the tokens.",
            "value": "The amount of tokens being transferred."
          }
        }
      ],
      "NotProxyAdmin(address)": [
        {
          "params": {
            "account": "The account that was checked."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "params": {
          "owner": "The account granting an allowance to `spender`.",
          "spender": "The account being granted an allowance from `owner`.",
          "value": "The allowance amount being granted."
        }
      },
      "Transfer(address,address,uint256)": {
        "params": {
          "from": "The account where the transferred tokens are withdrawn from.",
          "to": "The account where the transferred tokens are deposited to.",
          "value": "The amount of tokens being transferred."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "batchBurnFrom(address[],uint256[])": {
        "details": "Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).",
        "params": {
          "owners": "The list of accounts to burn the tokens from.",
          "values": "The list of amounts of tokens to burn."
        },
        "returns": {
          "_0": "Whether the operation succeeded."
        }
      },
      "burn(uint256)": {
        "details": "Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.",
        "params": {
          "value": "The amount of tokens to burn."
        },
        "returns": {
          "_0": "Whether the operation succeeded."
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).",
        "params": {
          "from": "The account to burn the tokens from.",
          "value": "The amount of tokens to burn."
        },
        "returns": {
          "_0": "Whether the operation succeeded."
        }
      },
      "initERC20BurnableStorage()": {
        "details": "Reverts with {NotProxyAdmin} if the sender is not the proxy admin."
      }
    },
    "title": "ERC20 Fungible Token Standard, optional extension: Burnable (facet version).",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20ApprovalToAddressZero(address)": [
        {
          "notice": "Thrown when setting an allowance to the the zero address."
        }
      ],
      "ERC20InsufficientAllowance(address,address,uint256,uint256)": [
        {
          "notice": "Thrown when the allowance decreases below the current alowance set."
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "notice": "Thrown when transferring an amount of tokens greater than the current balance."
        }
      ],
      "IllegalInterfaceId()": [
        {
          "notice": "Thrown when setting the illegal interfaceId 0xffffffff."
        }
      ],
      "InconsistentArrayLengths()": [
        {
          "notice": "Thrown when the multiple related arrays have different lengths."
        }
      ],
      "NotProxyAdmin(address)": [
        {
          "notice": "Thrown when an account is not the proxy admin but is required to."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "Emitted when an approval is set."
      },
      "Transfer(address,address,uint256)": {
        "notice": "Emitted when tokens are transferred, including zero value transfers."
      }
    },
    "kind": "user",
    "methods": {
      "batchBurnFrom(address[],uint256[])": {
        "notice": "Burns multiple amounts of tokens from multiple owners, decreasing the total supply."
      },
      "burn(uint256)": {
        "notice": "Burns an amount of tokens from the sender, decreasing the total supply."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burns an amount of tokens from a specified address, decreasing the total supply."
      },
      "initERC20BurnableStorage()": {
        "notice": "Marks the following ERC165 interface(s) as supported: ERC20Burnable."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}