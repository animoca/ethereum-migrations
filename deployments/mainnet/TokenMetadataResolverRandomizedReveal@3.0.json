{
  "address": "0xf5D106542171d941bB04D0197ce8A964d090834D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "linkToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfWrapper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "EmptyPostRevealBaseMetadataURI",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "EmptyPreRevealTokenMetadataURI",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotTargetContractOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "RevealAlreadyRequested",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetContract",
          "type": "address"
        }
      ],
      "name": "TargetIsNotAContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "TokenDataNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "TokensAlreadyRevealed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "UnknownRequestId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrongAddress",
          "type": "address"
        }
      ],
      "name": "WrongLINKTokenAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "ZeroTokenSupply",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RevealRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "preRevealTokenMetadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "postRevealBaseMetadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        }
      ],
      "name": "TokenDataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "metadataOffset",
          "type": "uint256"
        }
      ],
      "name": "TokensRevealed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHAINLINK_LINK_TOKEN",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHAINLINK_VRF_WRAPPER",
      "outputs": [
        {
          "internalType": "contract VRFV2WrapperInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "metadataOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "postRevealBaseMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "preRevealTokenMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdToTokenContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        }
      ],
      "name": "requestReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "revealStatus",
      "outputs": [
        {
          "internalType": "enum TokenMetadataResolverRandomizedReveal.RevealStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "preRevealTokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "postRevealBaseURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "setTokenData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "0x514910771AF9Ca656af840dff83E8264EcF986CA",
    "0x5A861794B927983406fCE1D062e00b9368d97Df6"
  ],
  "numDeployments": 1,
  "solcInputHash": "143cd077c882cb4b84a4896b7dea96de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"linkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfWrapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"EmptyPostRevealBaseMetadataURI\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"EmptyPreRevealTokenMetadataURI\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotTargetContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"RevealAlreadyRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"}],\"name\":\"TargetIsNotAContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"TokenDataNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"TokensAlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"UnknownRequestId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrongAddress\",\"type\":\"address\"}],\"name\":\"WrongLINKTokenAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"ZeroTokenSupply\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RevealRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"preRevealTokenMetadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"postRevealBaseMetadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"TokenDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"metadataOffset\",\"type\":\"uint256\"}],\"name\":\"TokensRevealed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAINLINK_LINK_TOKEN\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_VRF_WRAPPER\",\"outputs\":[{\"internalType\":\"contract VRFV2WrapperInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"metadataOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"postRevealBaseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preRevealTokenMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"}],\"name\":\"requestReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revealStatus\",\"outputs\":[{\"internalType\":\"enum TokenMetadataResolverRandomizedReveal.RevealStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"preRevealTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postRevealBaseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"setTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EmptyPostRevealBaseMetadataURI(address)\":[{\"params\":{\"tokenContract\":\"The token contract which data is being set.\"}}],\"EmptyPreRevealTokenMetadataURI(address)\":[{\"params\":{\"tokenContract\":\"The token contract which data is being set.\"}}],\"NotTargetContractOwner(address,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"targetContract\":\"The contract that was checked.\"}}],\"RevealAlreadyRequested(address)\":[{\"params\":{\"tokenContract\":\"The token contract which is already requested to reveal.\"}}],\"TargetIsNotAContract(address)\":[{\"params\":{\"targetContract\":\"The contract that was checked\"}}],\"TokenDataNotSet(address)\":[{\"params\":{\"tokenContract\":\"The token contract on which is being requested to reveal.\"}}],\"TokensAlreadyRevealed(address)\":[{\"params\":{\"tokenContract\":\"The token contract which is already revealed.\"}}],\"UnknownRequestId(uint256)\":[{\"params\":{\"requestId\":\"The request ID.\"}}],\"ZeroTokenSupply(address)\":[{\"params\":{\"tokenContract\":\"The token contract which data is being set.\"}}]},\"events\":{\"RevealRequested(address,uint256)\":{\"params\":{\"requestId\":\"The ChainLink VRF request ID.\",\"tokenContract\":\"The token contract on which the tokens are requested to reveal.\"}},\"TokenDataSet(address,string,string,uint256)\":{\"params\":{\"postRevealBaseMetadataURI\":\"The post-reveal base metadata URI.\",\"preRevealTokenMetadataURI\":\"The pre-reveal token metadata URI.\",\"tokenContract\":\"The token contract on which the base metadata URI was set.\",\"tokenSupply\":\"The token supply.\"}},\"TokensRevealed(address,uint256,uint256)\":{\"params\":{\"metadataOffset\":\"The random metadata offset.\",\"requestId\":\"The ChainLink VRF request ID.\",\"tokenContract\":\"The token contract on which the tokens are revealed.\"}}},\"kind\":\"dev\",\"methods\":{\"requestReveal(address,uint32,uint16)\":{\"details\":\"Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.Reverts with {TokenDataNotSet} if the token data has not been set yet.Reverts with {TokensAlreadyRevealed} if the tokens have already been revealed.Emits a {RevealRequested} event.Emits an ERC20 {Transfer} event for the VRF request price in LINK token transferred from the sender to this contract.Emits an ERC20 {Transfer} event for the VRF request price in LINK token transferred from this contract to the VRF Wrapper.\",\"params\":{\"callbackGasLimit\":\"The gas limit to set for the VRF V2 wrapper callback.\",\"requestConfirmations\":\"The number of confirmations to wait before fulfilling the request.\",\"tokenContract\":\"The token contract for which to reveal the tokens.\"}},\"setTokenData(address,string,string,uint256)\":{\"details\":\"Reverts with {EmptyPreRevealTokenMetadataURI} if the pre-reveal token metadata URI is empty.Reverts with {EmptyPostRevealBaseMetadataURIs} if the post-reveal base metadata URI is empty.Reverts with {ZeroTokenSupply} if the token supply is 0.Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.Reverts with {RevealAlreadyRequested} if reveal has already been requested.Emits a {TokenDataSet} event.\",\"params\":{\"postRevealBaseURI\":\"The post-reveal base metadata URI.\",\"preRevealTokenURI\":\"The pre-reveal token metadata URI.\",\"supply\":\"The token supply.\",\"tokenContract\":\"The token contract on which to set the base metadata URI.\"}},\"tokenMetadataURI(address,uint256)\":{\"params\":{\"tokenContract\":\"The token contract for which to retrieve the token URI.\",\"tokenId\":\"The token identifier.\"},\"returns\":{\"tokenURI\":\"The token metadata URI.\"}}},\"title\":\"TokenMetadataResolverRandomizedReveal.\",\"version\":1},\"userdoc\":{\"errors\":{\"EmptyPostRevealBaseMetadataURI(address)\":[{\"notice\":\"Thrown when trying to set an empty post-reveal base metadata URI.\"}],\"EmptyPreRevealTokenMetadataURI(address)\":[{\"notice\":\"Thrown when trying to set an empty pre-reveal token metadata URI.\"}],\"NotTargetContractOwner(address,address)\":[{\"notice\":\"Thrown when an account is not the target contract owner but is required to.\"}],\"RevealAlreadyRequested(address)\":[{\"notice\":\"Thrown when trying to set the metadata for a token which has already been requested to reveal.\"}],\"TargetIsNotAContract(address)\":[{\"notice\":\"Thrown when the target contract is actually not a contract.\"}],\"TokenDataNotSet(address)\":[{\"notice\":\"Thrown when requesting to reveal tokens but the token data is not set.\"}],\"TokensAlreadyRevealed(address)\":[{\"notice\":\"Emitted when trying to reveal a token which is already revealed.\"}],\"UnknownRequestId(uint256)\":[{\"notice\":\"Thrown when trying to fulfill a randomness request with a wrong request ID (ie. not associated to a token contract).\"}],\"WrongLINKTokenAddress(address)\":[{\"notice\":\"Thrown when trying to call the `onTokenTransfer` function but the sender is not the LINK token contract.\"}],\"ZeroTokenSupply(address)\":[{\"notice\":\"Thrown when setting token data with a zero token supply.\"}]},\"events\":{\"RevealRequested(address,uint256)\":{\"notice\":\"Emitted when a request to reveal tokens is made.\"},\"TokenDataSet(address,string,string,uint256)\":{\"notice\":\"Emitted when the token data is set.\"},\"TokensRevealed(address,uint256,uint256)\":{\"notice\":\"Emitted when the tokens are revealed.\"}},\"kind\":\"user\",\"methods\":{\"requestReveal(address,uint32,uint16)\":{\"notice\":\"Requests to switch the base metadata URI to the post-reveal URI while applying a fixed random offset to the metadata token id.The random offset is requested via Chainlink VRF direct funding method:- payment of LINK token  will be made, and pre-approval of LINK to this contract is required(the amount to be approved cannot reliably be known in advance, but can be estimated with `VRF_V2_WRAPPER.estimateRequestPrice`),- the randomness request will be fulfilled later by a call to the `rawFulfillRandomWords` callback.This function can be called multiple times as long as the tokens have not been effectively revealed yet, so that any failure toexecute the fulfill callback (such as because of insufficient gas) does not prevent from retrying.\"},\"setTokenData(address,string,string,uint256)\":{\"notice\":\"Sets the metadata URIs and the token supply for a token contract.\"},\"tokenMetadataURI(address,uint256)\":{\"notice\":\"Gets the token metadata URI for a token.\"}},\"notice\":\"Token Metadata Resolver with a reveal mechanism.Before reveal, all the tokens have the same metadata URI. After reveal tokens have individual metadata URIs based on a random offset.This resolver is designed to work with incremental token IDs NFTs starting at 0 and a fixed token supply.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/metadata/TokenMetadataResolverRandomizedReveal.sol\":\"TokenMetadataResolverRandomizedReveal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x44f6fa0cb1867a0bc137a195d4603bafa1cf74ecfbe69eb82a5dabeca8957738\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFV2WrapperConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../interfaces/VRFV2WrapperInterface.sol\\\";\\n\\n/** *******************************************************************************\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2WrapperConsumerBase {\\n  LinkTokenInterface internal immutable LINK;\\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\n\\n  /**\\n   * @param _link is the address of LinkToken\\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _link, address _vrfV2Wrapper) {\\n    LINK = LinkTokenInterface(_link);\\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2 wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\\n   */\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) internal returns (uint256 requestId) {\\n    LINK.transferAndCall(\\n      address(VRF_V2_WRAPPER),\\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\n    );\\n    return VRF_V2_WRAPPER.lastRequestId();\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    require(msg.sender == address(VRF_V2_WRAPPER), \\\"only VRF V2 wrapper can fulfill\\\");\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x892f17652e5de9d5e0b5e9424a9b3f2a69d3e50070ba1387f2292aea8190d3bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"contracts/token/metadata/TokenMetadataResolverRandomizedReveal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./interfaces/ITokenMetadataResolver.sol\\\";\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {VRFV2WrapperInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {VRFV2WrapperConsumerBase} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFV2WrapperConsumerBase.sol\\\";\\n\\n/// @title TokenMetadataResolverRandomizedReveal.\\n/// @notice Token Metadata Resolver with a reveal mechanism.\\n/// @notice Before reveal, all the tokens have the same metadata URI. After reveal tokens have individual metadata URIs based on a random offset.\\n/// @notice This resolver is designed to work with incremental token IDs NFTs starting at 0 and a fixed token supply.\\ncontract TokenMetadataResolverRandomizedReveal is ITokenMetadataResolver, VRFV2WrapperConsumerBase {\\n    using ContractOwnershipStorage for address;\\n    using Strings for uint256;\\n\\n    enum RevealStatus {\\n        NotRequested, // 0\\n        Requested, // 1\\n        Revealed // 2\\n    }\\n\\n    mapping(address => string) public preRevealTokenMetadataURI; // tokenContract => pre-reveal token metadata URI\\n    mapping(address => string) public postRevealBaseMetadataURI; // tokenContract => post-reveal base metadata URI\\n    mapping(address => uint256) public tokenSupply; // tokenContract => token supply\\n    mapping(address => RevealStatus) public revealStatus; // tokenContract => reveal status\\n    mapping(address => uint256) public metadataOffset; // tokenContract => metadata offset\\n    mapping(uint256 => address) public requestIdToTokenContract; // requestId => tokenContract\\n\\n    /// @notice Emitted when the token data is set.\\n    /// @param tokenContract The token contract on which the base metadata URI was set.\\n    /// @param preRevealTokenMetadataURI The pre-reveal token metadata URI.\\n    /// @param postRevealBaseMetadataURI The post-reveal base metadata URI.\\n    /// @param tokenSupply The token supply.\\n    event TokenDataSet(address tokenContract, string preRevealTokenMetadataURI, string postRevealBaseMetadataURI, uint256 tokenSupply);\\n\\n    /// @notice Emitted when a request to reveal tokens is made.\\n    /// @param tokenContract The token contract on which the tokens are requested to reveal.\\n    /// @param requestId The ChainLink VRF request ID.\\n    event RevealRequested(address tokenContract, uint256 requestId);\\n\\n    /// @notice Emitted when the tokens are revealed.\\n    /// @param tokenContract The token contract on which the tokens are revealed.\\n    /// @param requestId The ChainLink VRF request ID.\\n    /// @param metadataOffset The random metadata offset.\\n    event TokensRevealed(address tokenContract, uint256 requestId, uint256 metadataOffset);\\n\\n    /// @notice Thrown when trying to set an empty pre-reveal token metadata URI.\\n    /// @param tokenContract The token contract which data is being set.\\n    error EmptyPreRevealTokenMetadataURI(address tokenContract);\\n\\n    /// @notice Thrown when trying to set an empty post-reveal base metadata URI.\\n    /// @param tokenContract The token contract which data is being set.\\n    error EmptyPostRevealBaseMetadataURI(address tokenContract);\\n\\n    /// @notice Thrown when setting token data with a zero token supply.\\n    /// @param tokenContract The token contract which data is being set.\\n    error ZeroTokenSupply(address tokenContract);\\n\\n    /// @notice Thrown when requesting to reveal tokens but the token data is not set.\\n    /// @param tokenContract The token contract on which is being requested to reveal.\\n    error TokenDataNotSet(address tokenContract);\\n\\n    /// @notice Thrown when trying to set the metadata for a token which has already been requested to reveal.\\n    /// @param tokenContract The token contract which is already requested to reveal.\\n    error RevealAlreadyRequested(address tokenContract);\\n\\n    /// @notice Emitted when trying to reveal a token which is already revealed.\\n    /// @param tokenContract The token contract which is already revealed.\\n    error TokensAlreadyRevealed(address tokenContract);\\n\\n    /// @notice Thrown when trying to call the `onTokenTransfer` function but the sender is not the LINK token contract.\\n    error WrongLINKTokenAddress(address wrongAddress);\\n\\n    /// @notice Thrown when trying to fulfill a randomness request with a wrong request ID (ie. not associated to a token contract).\\n    /// @param requestId The request ID.\\n    error UnknownRequestId(uint256 requestId);\\n\\n    constructor(address linkToken, address vrfWrapper) VRFV2WrapperConsumerBase(linkToken, vrfWrapper) {}\\n\\n    /// @notice Sets the metadata URIs and the token supply for a token contract.\\n    /// @dev Reverts with {EmptyPreRevealTokenMetadataURI} if the pre-reveal token metadata URI is empty.\\n    /// @dev Reverts with {EmptyPostRevealBaseMetadataURIs} if the post-reveal base metadata URI is empty.\\n    /// @dev Reverts with {ZeroTokenSupply} if the token supply is 0.\\n    /// @dev Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.\\n    /// @dev Reverts with {RevealAlreadyRequested} if reveal has already been requested.\\n    /// @dev Emits a {TokenDataSet} event.\\n    /// @param tokenContract The token contract on which to set the base metadata URI.\\n    /// @param preRevealTokenURI The pre-reveal token metadata URI.\\n    /// @param postRevealBaseURI The post-reveal base metadata URI.\\n    /// @param supply The token supply.\\n    function setTokenData(address tokenContract, string calldata preRevealTokenURI, string calldata postRevealBaseURI, uint256 supply) external {\\n        if (bytes(preRevealTokenURI).length == 0) revert EmptyPreRevealTokenMetadataURI(tokenContract);\\n        if (bytes(postRevealBaseURI).length == 0) revert EmptyPostRevealBaseMetadataURI(tokenContract);\\n        if (supply == 0) revert ZeroTokenSupply(tokenContract);\\n        tokenContract.enforceIsTargetContractOwner(msg.sender);\\n        if (revealStatus[tokenContract] != RevealStatus.NotRequested) revert RevealAlreadyRequested(tokenContract);\\n        preRevealTokenMetadataURI[tokenContract] = preRevealTokenURI;\\n        postRevealBaseMetadataURI[tokenContract] = postRevealBaseURI;\\n        tokenSupply[tokenContract] = supply;\\n        emit TokenDataSet(tokenContract, preRevealTokenURI, postRevealBaseURI, supply);\\n    }\\n\\n    /// @notice Requests to switch the base metadata URI to the post-reveal URI while applying a fixed random offset to the metadata token id.\\n    /// @notice The random offset is requested via Chainlink VRF direct funding method:\\n    /// @notice  - payment of LINK token  will be made, and pre-approval of LINK to this contract is required\\n    /// @notice    (the amount to be approved cannot reliably be known in advance, but can be estimated with `VRF_V2_WRAPPER.estimateRequestPrice`),\\n    /// @notice  - the randomness request will be fulfilled later by a call to the `rawFulfillRandomWords` callback.\\n    /// @notice This function can be called multiple times as long as the tokens have not been effectively revealed yet, so that any failure to\\n    /// @notice  execute the fulfill callback (such as because of insufficient gas) does not prevent from retrying.\\n    /// @dev Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.\\n    /// @dev Reverts with {TokenDataNotSet} if the token data has not been set yet.\\n    /// @dev Reverts with {TokensAlreadyRevealed} if the tokens have already been revealed.\\n    /// @dev Emits a {RevealRequested} event.\\n    /// @dev Emits an ERC20 {Transfer} event for the VRF request price in LINK token transferred from the sender to this contract.\\n    /// @dev Emits an ERC20 {Transfer} event for the VRF request price in LINK token transferred from this contract to the VRF Wrapper.\\n    /// @param tokenContract The token contract for which to reveal the tokens.\\n    /// @param callbackGasLimit The gas limit to set for the VRF V2 wrapper callback.\\n    /// @param requestConfirmations The number of confirmations to wait before fulfilling the request.\\n    function requestReveal(address tokenContract, uint32 callbackGasLimit, uint16 requestConfirmations) external {\\n        tokenContract.enforceIsTargetContractOwner(msg.sender);\\n        if (tokenSupply[tokenContract] == 0) revert TokenDataNotSet(tokenContract);\\n        if (revealStatus[tokenContract] == RevealStatus.Revealed) revert TokensAlreadyRevealed(tokenContract);\\n        uint256 requestPrice = VRF_V2_WRAPPER.calculateRequestPrice(callbackGasLimit);\\n        LINK.transferFrom(msg.sender, address(this), requestPrice);\\n        LINK.transferAndCall(address(VRF_V2_WRAPPER), requestPrice, abi.encode(callbackGasLimit, requestConfirmations, 1));\\n        uint256 requestId = VRF_V2_WRAPPER.lastRequestId();\\n        requestIdToTokenContract[requestId] = tokenContract;\\n        revealStatus[tokenContract] = RevealStatus.Requested;\\n        emit RevealRequested(tokenContract, requestId);\\n    }\\n\\n    /// @inheritdoc ITokenMetadataResolver\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI) {\\n        if (revealStatus[tokenContract] == RevealStatus.Revealed) {\\n            uint256 metadataId = (tokenId + metadataOffset[tokenContract]) % tokenSupply[tokenContract];\\n            return string(abi.encodePacked(postRevealBaseMetadataURI[tokenContract], metadataId.toString()));\\n        } else {\\n            return preRevealTokenMetadataURI[tokenContract];\\n        }\\n    }\\n\\n    /// @notice Callback function called by the VRF V2 wrapper when the randomness is received. Applies the random offset.\\n    /// @dev Reverts with {UnknownRequestId} if the request ID is not associated to a token contract.\\n    /// @dev Reverts with {TokensAlreadyRevealed} if the tokens have already been revealed.\\n    /// @dev Emits a {TokensRevealed} event.\\n    /// @param requestId The ChainLink VRF request ID.\\n    /// @param randomWords The randomness result.\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual override {\\n        address tokenContract = requestIdToTokenContract[requestId];\\n        if (tokenContract == address(0)) revert UnknownRequestId(requestId);\\n        delete requestIdToTokenContract[requestId];\\n        if (revealStatus[tokenContract] == RevealStatus.Revealed) revert TokensAlreadyRevealed(tokenContract);\\n        uint256 offset = randomWords[0] % tokenSupply[tokenContract];\\n        metadataOffset[tokenContract] = offset;\\n        revealStatus[tokenContract] = RevealStatus.Revealed;\\n        emit TokensRevealed(tokenContract, requestId, offset);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CHAINLINK_LINK_TOKEN() external view returns (LinkTokenInterface) {\\n        return LINK;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CHAINLINK_VRF_WRAPPER() external view returns (VRFV2WrapperInterface) {\\n        return VRF_V2_WRAPPER;\\n    }\\n}\\n\",\"keccak256\":\"0x8c0cdef0029d2f9dc0b651b4799f258081b0de150d337b7e5e3a06638f875dbc\",\"license\":\"MIT\"},\"contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001b3238038062001b32833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a051611a41620000f1600039600081816102060152818161029b0152818161048d0152818161066c01526106df01526000818161024c0152818161054b015261062a0152611a416000f3fe608060405234801561001057600080fd5b50600436106100d35760003560e01c80636b0fce1311610081578063e643792e1161005b578063e643792e1461022a578063ee206f9d1461024a578063f724dad71461027057600080fd5b80636b0fce13146101de5780637c9bc105146101f1578063981e4cc21461020457600080fd5b806349855083116100b257806349855083146101605780634bf810d8146101905780636844d6fa146101be57600080fd5b80625e24de146100d85780631fe543e31461013857806328e82e431461014d575b600080fd5b61010e6100e6366004611208565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61014b610146366004611250565b610283565b005b61014b61015b36600461135d565b610335565b61018361016e3660046113b8565b60036020526000908152604090205460ff1681565b60405161012f919061140b565b6101b061019e3660046113b8565b60046020526000908152604090205481565b60405190815260200161012f565b6101d16101cc3660046113b8565b610833565b60405161012f91906114ba565b6101d16101ec3660046113b8565b6108cd565b61014b6101ff366004611516565b6108e6565b7f000000000000000000000000000000000000000000000000000000000000000061010e565b6101b06102383660046113b8565b60026020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000061010e565b6101d161027e3660046115a1565b610b5b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6f6e6c792056524620563220777261707065722063616e2066756c66696c6c0060448201526064015b60405180910390fd5b6103318282610cf3565b5050565b61035573ffffffffffffffffffffffffffffffffffffffff841633610efc565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081205490036103cb576040517f7f78e40300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161031e565b600273ffffffffffffffffffffffffffffffffffffffff841660009081526003602052604090205460ff166002811115610407576104076113dc565b03610456576040517fd2a6a91e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161031e565b6040517f4306d35400000000000000000000000000000000000000000000000000000000815263ffffffff831660048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634306d35490602401602060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d91906115cd565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd91906115e6565b506040805163ffffffff8516602082015261ffff84168183015260016060808301919091528251808303909101815260808201928390527f4000aea0000000000000000000000000000000000000000000000000000000009092527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691634000aea091610697917f000000000000000000000000000000000000000000000000000000000000000091869190608401611608565b6020604051808303816000875af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da91906115e6565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c91906115cd565b6000818152600560209081526040808320805473ffffffffffffffffffffffffffffffffffffffff8b167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155808452600383529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580519283529082018390529192507f40cafdc32fe56fc488360b1b38d2c0ae3ac896e631536bb4bae762e342f0e704910160405180910390a15050505050565b6000602081905290815260409020805461084c90611646565b80601f016020809104026020016040519081016040528092919081815260200182805461087890611646565b80156108c55780601f1061089a576101008083540402835291602001916108c5565b820191906000526020600020905b8154815290600101906020018083116108a857829003601f168201915b505050505081565b6001602052600090815260409020805461084c90611646565b6000849003610939576040517f9e9de65d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015260240161031e565b600082900361098c576040517fea1c6ea000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015260240161031e565b806000036109de576040517f0f63365800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015260240161031e565b6109fe73ffffffffffffffffffffffffffffffffffffffff871633610efc565b73ffffffffffffffffffffffffffffffffffffffff861660009081526003602052604081205460ff166002811115610a3857610a386113dc565b14610a87576040517f66daadea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015260240161031e565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020610ab78587836116ea565b5073ffffffffffffffffffffffffffffffffffffffff86166000908152600160205260409020610ae88385836116ea565b5073ffffffffffffffffffffffffffffffffffffffff861660009081526002602052604090819020829055517f1e2c5cd029119717a495b3bafc43690a7584a3f26d1253838c2aacfdebae1f4390610b4b9088908890889088908890889061184e565b60405180910390a1505050505050565b6060600273ffffffffffffffffffffffffffffffffffffffff841660009081526003602052604090205460ff166002811115610b9957610b996113dc565b03610c3c5773ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320546004909252822054610bd990856118a5565b610be391906118df565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160205260409020909150610c1482610f5c565b604051602001610c2592919061191a565b604051602081830303815290604052915050610ced565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090208054610c6c90611646565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9890611646565b8015610ce55780601f10610cba57610100808354040283529160200191610ce5565b820191906000526020600020905b815481529060010190602001808311610cc857829003601f168201915b505050505090505b92915050565b60008281526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1680610d52576040517f597349fa0000000000000000000000000000000000000000000000000000000081526004810184905260240161031e565b600083815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600273ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604090205460ff166002811115610dc257610dc26113dc565b03610e11576040517fd2a6a91e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161031e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812054835184908390610e4957610e496119bf565b6020026020010151610e5b91906118df565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600460209081526040808320859055600382529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660021790558151928352820187905281018290529091507f4188cd09fa8447854490f2c7c4b3e63e3e8e55beb167c0bc1fd93e3fc30f49f89060600160405180910390a150505050565b610f06828261101a565b610331576040517f29b9b08b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301528216602482015260440161031e565b60606000610f6983611126565b600101905060008167ffffffffffffffff811115610f8957610f89611221565b6040519080825280601f01601f191660200182016040528015610fb3576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610fbd57509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83163b611082576040517f73a5b5e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161031e565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110891906119ee565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061116f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061119b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106111b957662386f26fc10000830492506010015b6305f5e10083106111d1576305f5e100830492506008015b61271083106111e557612710830492506004015b606483106111f7576064830492506002015b600a8310610ced5760010192915050565b60006020828403121561121a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561126357600080fd5b8235915060208084013567ffffffffffffffff8082111561128357600080fd5b818601915086601f83011261129757600080fd5b8135818111156112a9576112a9611221565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156112ec576112ec611221565b60405291825284820192508381018501918983111561130a57600080fd5b938501935b828510156113285784358452938501939285019261130f565b8096505050505050509250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461135a57600080fd5b50565b60008060006060848603121561137257600080fd5b833561137d81611338565b9250602084013563ffffffff8116811461139657600080fd5b9150604084013561ffff811681146113ad57600080fd5b809150509250925092565b6000602082840312156113ca57600080fd5b81356113d581611338565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310611446577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60005b8381101561146757818101518382015260200161144f565b50506000910152565b6000815180845261148881602086016020860161144c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006113d56020830184611470565b60008083601f8401126114df57600080fd5b50813567ffffffffffffffff8111156114f757600080fd5b60208301915083602082850101111561150f57600080fd5b9250929050565b6000806000806000806080878903121561152f57600080fd5b863561153a81611338565b9550602087013567ffffffffffffffff8082111561155757600080fd5b6115638a838b016114cd565b9097509550604089013591508082111561157c57600080fd5b5061158989828a016114cd565b979a9699509497949695606090950135949350505050565b600080604083850312156115b457600080fd5b82356115bf81611338565b946020939093013593505050565b6000602082840312156115df57600080fd5b5051919050565b6000602082840312156115f857600080fd5b815180151581146113d557600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061163d6060830184611470565b95945050505050565b600181811c9082168061165a57607f821691505b602082108103611693577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156116e5576000816000526020600020601f850160051c810160208610156116c25750805b601f850160051c820191505b818110156116e1578281556001016116ce565b5050505b505050565b67ffffffffffffffff83111561170257611702611221565b611716836117108354611646565b83611699565b6000601f84116001811461176857600085156117325750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556117fe565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156117b75786850135825560209485019460019092019101611797565b50868210156117f2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8716815260806020820152600061187e608083018789611805565b8281036040840152611891818688611805565b915050826060830152979650505050505050565b80820180821115610ced577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611915577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b600080845461192881611646565b600182811680156119405760018114611973576119a2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506119a2565b8860005260208060002060005b858110156119995781548a820152908401908201611980565b50505082870194505b5050505083516119b681836020880161144c565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611a0057600080fd5b81516113d58161133856fea2646970667358221220021eaeb9503c1d0c4435d7b6af00109dc5f2b716d458ca6fab6eea0abad1955164736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d35760003560e01c80636b0fce1311610081578063e643792e1161005b578063e643792e1461022a578063ee206f9d1461024a578063f724dad71461027057600080fd5b80636b0fce13146101de5780637c9bc105146101f1578063981e4cc21461020457600080fd5b806349855083116100b257806349855083146101605780634bf810d8146101905780636844d6fa146101be57600080fd5b80625e24de146100d85780631fe543e31461013857806328e82e431461014d575b600080fd5b61010e6100e6366004611208565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61014b610146366004611250565b610283565b005b61014b61015b36600461135d565b610335565b61018361016e3660046113b8565b60036020526000908152604090205460ff1681565b60405161012f919061140b565b6101b061019e3660046113b8565b60046020526000908152604090205481565b60405190815260200161012f565b6101d16101cc3660046113b8565b610833565b60405161012f91906114ba565b6101d16101ec3660046113b8565b6108cd565b61014b6101ff366004611516565b6108e6565b7f000000000000000000000000000000000000000000000000000000000000000061010e565b6101b06102383660046113b8565b60026020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000061010e565b6101d161027e3660046115a1565b610b5b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6f6e6c792056524620563220777261707065722063616e2066756c66696c6c0060448201526064015b60405180910390fd5b6103318282610cf3565b5050565b61035573ffffffffffffffffffffffffffffffffffffffff841633610efc565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081205490036103cb576040517f7f78e40300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161031e565b600273ffffffffffffffffffffffffffffffffffffffff841660009081526003602052604090205460ff166002811115610407576104076113dc565b03610456576040517fd2a6a91e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161031e565b6040517f4306d35400000000000000000000000000000000000000000000000000000000815263ffffffff831660048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634306d35490602401602060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d91906115cd565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd91906115e6565b506040805163ffffffff8516602082015261ffff84168183015260016060808301919091528251808303909101815260808201928390527f4000aea0000000000000000000000000000000000000000000000000000000009092527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691634000aea091610697917f000000000000000000000000000000000000000000000000000000000000000091869190608401611608565b6020604051808303816000875af11580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da91906115e6565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c91906115cd565b6000818152600560209081526040808320805473ffffffffffffffffffffffffffffffffffffffff8b167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155808452600383529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580519283529082018390529192507f40cafdc32fe56fc488360b1b38d2c0ae3ac896e631536bb4bae762e342f0e704910160405180910390a15050505050565b6000602081905290815260409020805461084c90611646565b80601f016020809104026020016040519081016040528092919081815260200182805461087890611646565b80156108c55780601f1061089a576101008083540402835291602001916108c5565b820191906000526020600020905b8154815290600101906020018083116108a857829003601f168201915b505050505081565b6001602052600090815260409020805461084c90611646565b6000849003610939576040517f9e9de65d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015260240161031e565b600082900361098c576040517fea1c6ea000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015260240161031e565b806000036109de576040517f0f63365800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015260240161031e565b6109fe73ffffffffffffffffffffffffffffffffffffffff871633610efc565b73ffffffffffffffffffffffffffffffffffffffff861660009081526003602052604081205460ff166002811115610a3857610a386113dc565b14610a87576040517f66daadea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716600482015260240161031e565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020610ab78587836116ea565b5073ffffffffffffffffffffffffffffffffffffffff86166000908152600160205260409020610ae88385836116ea565b5073ffffffffffffffffffffffffffffffffffffffff861660009081526002602052604090819020829055517f1e2c5cd029119717a495b3bafc43690a7584a3f26d1253838c2aacfdebae1f4390610b4b9088908890889088908890889061184e565b60405180910390a1505050505050565b6060600273ffffffffffffffffffffffffffffffffffffffff841660009081526003602052604090205460ff166002811115610b9957610b996113dc565b03610c3c5773ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320546004909252822054610bd990856118a5565b610be391906118df565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160205260409020909150610c1482610f5c565b604051602001610c2592919061191a565b604051602081830303815290604052915050610ced565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090208054610c6c90611646565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9890611646565b8015610ce55780601f10610cba57610100808354040283529160200191610ce5565b820191906000526020600020905b815481529060010190602001808311610cc857829003601f168201915b505050505090505b92915050565b60008281526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1680610d52576040517f597349fa0000000000000000000000000000000000000000000000000000000081526004810184905260240161031e565b600083815260056020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600273ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604090205460ff166002811115610dc257610dc26113dc565b03610e11576040517fd2a6a91e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161031e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040812054835184908390610e4957610e496119bf565b6020026020010151610e5b91906118df565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600460209081526040808320859055600382529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660021790558151928352820187905281018290529091507f4188cd09fa8447854490f2c7c4b3e63e3e8e55beb167c0bc1fd93e3fc30f49f89060600160405180910390a150505050565b610f06828261101a565b610331576040517f29b9b08b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80841660048301528216602482015260440161031e565b60606000610f6983611126565b600101905060008167ffffffffffffffff811115610f8957610f89611221565b6040519080825280601f01601f191660200182016040528015610fb3576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610fbd57509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83163b611082576040517f73a5b5e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161031e565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110891906119ee565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061116f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061119b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106111b957662386f26fc10000830492506010015b6305f5e10083106111d1576305f5e100830492506008015b61271083106111e557612710830492506004015b606483106111f7576064830492506002015b600a8310610ced5760010192915050565b60006020828403121561121a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561126357600080fd5b8235915060208084013567ffffffffffffffff8082111561128357600080fd5b818601915086601f83011261129757600080fd5b8135818111156112a9576112a9611221565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156112ec576112ec611221565b60405291825284820192508381018501918983111561130a57600080fd5b938501935b828510156113285784358452938501939285019261130f565b8096505050505050509250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461135a57600080fd5b50565b60008060006060848603121561137257600080fd5b833561137d81611338565b9250602084013563ffffffff8116811461139657600080fd5b9150604084013561ffff811681146113ad57600080fd5b809150509250925092565b6000602082840312156113ca57600080fd5b81356113d581611338565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160038310611446577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60005b8381101561146757818101518382015260200161144f565b50506000910152565b6000815180845261148881602086016020860161144c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006113d56020830184611470565b60008083601f8401126114df57600080fd5b50813567ffffffffffffffff8111156114f757600080fd5b60208301915083602082850101111561150f57600080fd5b9250929050565b6000806000806000806080878903121561152f57600080fd5b863561153a81611338565b9550602087013567ffffffffffffffff8082111561155757600080fd5b6115638a838b016114cd565b9097509550604089013591508082111561157c57600080fd5b5061158989828a016114cd565b979a9699509497949695606090950135949350505050565b600080604083850312156115b457600080fd5b82356115bf81611338565b946020939093013593505050565b6000602082840312156115df57600080fd5b5051919050565b6000602082840312156115f857600080fd5b815180151581146113d557600080fd5b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061163d6060830184611470565b95945050505050565b600181811c9082168061165a57607f821691505b602082108103611693577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156116e5576000816000526020600020601f850160051c810160208610156116c25750805b601f850160051c820191505b818110156116e1578281556001016116ce565b5050505b505050565b67ffffffffffffffff83111561170257611702611221565b611716836117108354611646565b83611699565b6000601f84116001811461176857600085156117325750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556117fe565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156117b75786850135825560209485019460019092019101611797565b50868210156117f2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8716815260806020820152600061187e608083018789611805565b8281036040840152611891818688611805565b915050826060830152979650505050505050565b80820180821115610ced577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611915577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b600080845461192881611646565b600182811680156119405760018114611973576119a2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841687528215158302870194506119a2565b8860005260208060002060005b858110156119995781548a820152908401908201611980565b50505082870194505b5050505083516119b681836020880161144c565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611a0057600080fd5b81516113d58161133856fea2646970667358221220021eaeb9503c1d0c4435d7b6af00109dc5f2b716d458ca6fab6eea0abad1955164736f6c63430008160033",
  "devdoc": {
    "errors": {
      "EmptyPostRevealBaseMetadataURI(address)": [
        {
          "params": {
            "tokenContract": "The token contract which data is being set."
          }
        }
      ],
      "EmptyPreRevealTokenMetadataURI(address)": [
        {
          "params": {
            "tokenContract": "The token contract which data is being set."
          }
        }
      ],
      "NotTargetContractOwner(address,address)": [
        {
          "params": {
            "account": "The account that was checked.",
            "targetContract": "The contract that was checked."
          }
        }
      ],
      "RevealAlreadyRequested(address)": [
        {
          "params": {
            "tokenContract": "The token contract which is already requested to reveal."
          }
        }
      ],
      "TargetIsNotAContract(address)": [
        {
          "params": {
            "targetContract": "The contract that was checked"
          }
        }
      ],
      "TokenDataNotSet(address)": [
        {
          "params": {
            "tokenContract": "The token contract on which is being requested to reveal."
          }
        }
      ],
      "TokensAlreadyRevealed(address)": [
        {
          "params": {
            "tokenContract": "The token contract which is already revealed."
          }
        }
      ],
      "UnknownRequestId(uint256)": [
        {
          "params": {
            "requestId": "The request ID."
          }
        }
      ],
      "ZeroTokenSupply(address)": [
        {
          "params": {
            "tokenContract": "The token contract which data is being set."
          }
        }
      ]
    },
    "events": {
      "RevealRequested(address,uint256)": {
        "params": {
          "requestId": "The ChainLink VRF request ID.",
          "tokenContract": "The token contract on which the tokens are requested to reveal."
        }
      },
      "TokenDataSet(address,string,string,uint256)": {
        "params": {
          "postRevealBaseMetadataURI": "The post-reveal base metadata URI.",
          "preRevealTokenMetadataURI": "The pre-reveal token metadata URI.",
          "tokenContract": "The token contract on which the base metadata URI was set.",
          "tokenSupply": "The token supply."
        }
      },
      "TokensRevealed(address,uint256,uint256)": {
        "params": {
          "metadataOffset": "The random metadata offset.",
          "requestId": "The ChainLink VRF request ID.",
          "tokenContract": "The token contract on which the tokens are revealed."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "requestReveal(address,uint32,uint16)": {
        "details": "Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.Reverts with {TokenDataNotSet} if the token data has not been set yet.Reverts with {TokensAlreadyRevealed} if the tokens have already been revealed.Emits a {RevealRequested} event.Emits an ERC20 {Transfer} event for the VRF request price in LINK token transferred from the sender to this contract.Emits an ERC20 {Transfer} event for the VRF request price in LINK token transferred from this contract to the VRF Wrapper.",
        "params": {
          "callbackGasLimit": "The gas limit to set for the VRF V2 wrapper callback.",
          "requestConfirmations": "The number of confirmations to wait before fulfilling the request.",
          "tokenContract": "The token contract for which to reveal the tokens."
        }
      },
      "setTokenData(address,string,string,uint256)": {
        "details": "Reverts with {EmptyPreRevealTokenMetadataURI} if the pre-reveal token metadata URI is empty.Reverts with {EmptyPostRevealBaseMetadataURIs} if the post-reveal base metadata URI is empty.Reverts with {ZeroTokenSupply} if the token supply is 0.Reverts with {NotTargetContractOwner} if the sender is not the owner of the token contract.Reverts with {RevealAlreadyRequested} if reveal has already been requested.Emits a {TokenDataSet} event.",
        "params": {
          "postRevealBaseURI": "The post-reveal base metadata URI.",
          "preRevealTokenURI": "The pre-reveal token metadata URI.",
          "supply": "The token supply.",
          "tokenContract": "The token contract on which to set the base metadata URI."
        }
      },
      "tokenMetadataURI(address,uint256)": {
        "params": {
          "tokenContract": "The token contract for which to retrieve the token URI.",
          "tokenId": "The token identifier."
        },
        "returns": {
          "tokenURI": "The token metadata URI."
        }
      }
    },
    "title": "TokenMetadataResolverRandomizedReveal.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "EmptyPostRevealBaseMetadataURI(address)": [
        {
          "notice": "Thrown when trying to set an empty post-reveal base metadata URI."
        }
      ],
      "EmptyPreRevealTokenMetadataURI(address)": [
        {
          "notice": "Thrown when trying to set an empty pre-reveal token metadata URI."
        }
      ],
      "NotTargetContractOwner(address,address)": [
        {
          "notice": "Thrown when an account is not the target contract owner but is required to."
        }
      ],
      "RevealAlreadyRequested(address)": [
        {
          "notice": "Thrown when trying to set the metadata for a token which has already been requested to reveal."
        }
      ],
      "TargetIsNotAContract(address)": [
        {
          "notice": "Thrown when the target contract is actually not a contract."
        }
      ],
      "TokenDataNotSet(address)": [
        {
          "notice": "Thrown when requesting to reveal tokens but the token data is not set."
        }
      ],
      "TokensAlreadyRevealed(address)": [
        {
          "notice": "Emitted when trying to reveal a token which is already revealed."
        }
      ],
      "UnknownRequestId(uint256)": [
        {
          "notice": "Thrown when trying to fulfill a randomness request with a wrong request ID (ie. not associated to a token contract)."
        }
      ],
      "WrongLINKTokenAddress(address)": [
        {
          "notice": "Thrown when trying to call the `onTokenTransfer` function but the sender is not the LINK token contract."
        }
      ],
      "ZeroTokenSupply(address)": [
        {
          "notice": "Thrown when setting token data with a zero token supply."
        }
      ]
    },
    "events": {
      "RevealRequested(address,uint256)": {
        "notice": "Emitted when a request to reveal tokens is made."
      },
      "TokenDataSet(address,string,string,uint256)": {
        "notice": "Emitted when the token data is set."
      },
      "TokensRevealed(address,uint256,uint256)": {
        "notice": "Emitted when the tokens are revealed."
      }
    },
    "kind": "user",
    "methods": {
      "requestReveal(address,uint32,uint16)": {
        "notice": "Requests to switch the base metadata URI to the post-reveal URI while applying a fixed random offset to the metadata token id.The random offset is requested via Chainlink VRF direct funding method:- payment of LINK token  will be made, and pre-approval of LINK to this contract is required(the amount to be approved cannot reliably be known in advance, but can be estimated with `VRF_V2_WRAPPER.estimateRequestPrice`),- the randomness request will be fulfilled later by a call to the `rawFulfillRandomWords` callback.This function can be called multiple times as long as the tokens have not been effectively revealed yet, so that any failure toexecute the fulfill callback (such as because of insufficient gas) does not prevent from retrying."
      },
      "setTokenData(address,string,string,uint256)": {
        "notice": "Sets the metadata URIs and the token supply for a token contract."
      },
      "tokenMetadataURI(address,uint256)": {
        "notice": "Gets the token metadata URI for a token."
      }
    },
    "notice": "Token Metadata Resolver with a reveal mechanism.Before reveal, all the tokens have the same metadata URI. After reveal tokens have individual metadata URIs based on a random offset.This resolver is designed to work with incremental token IDs NFTs starting at 0 and a fixed token supply.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27381,
        "contract": "contracts/token/metadata/TokenMetadataResolverRandomizedReveal.sol:TokenMetadataResolverRandomizedReveal",
        "label": "preRevealTokenMetadataURI",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 27385,
        "contract": "contracts/token/metadata/TokenMetadataResolverRandomizedReveal.sol:TokenMetadataResolverRandomizedReveal",
        "label": "postRevealBaseMetadataURI",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 27389,
        "contract": "contracts/token/metadata/TokenMetadataResolverRandomizedReveal.sol:TokenMetadataResolverRandomizedReveal",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27394,
        "contract": "contracts/token/metadata/TokenMetadataResolverRandomizedReveal.sol:TokenMetadataResolverRandomizedReveal",
        "label": "revealStatus",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_enum(RevealStatus)27377)"
      },
      {
        "astId": 27398,
        "contract": "contracts/token/metadata/TokenMetadataResolverRandomizedReveal.sol:TokenMetadataResolverRandomizedReveal",
        "label": "metadataOffset",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27402,
        "contract": "contracts/token/metadata/TokenMetadataResolverRandomizedReveal.sol:TokenMetadataResolverRandomizedReveal",
        "label": "requestIdToTokenContract",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(RevealStatus)27377": {
        "encoding": "inplace",
        "label": "enum TokenMetadataResolverRandomizedReveal.RevealStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(RevealStatus)27377)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum TokenMetadataResolverRandomizedReveal.RevealStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(RevealStatus)27377"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}