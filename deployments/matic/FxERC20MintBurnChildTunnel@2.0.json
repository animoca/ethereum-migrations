{
  "address": "0x1C58217eb4a3B0Bb897949aa32c05808fbd022FE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fxChild",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "childTokenLogic",
          "type": "address"
        },
        {
          "internalType": "contract IForwarderRegistry",
          "name": "forwarderRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FxERC20ChildTokenLogicNotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "syncType",
          "type": "bytes32"
        }
      ],
      "name": "FxERC20InvalidSyncType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FxERC20InvalidWithdrawalAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        }
      ],
      "name": "FxERC20TokenAlreadyMapped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FxERC20TokenNotMapped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalInterfaceId",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FxERC20Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        }
      ],
      "name": "FxERC20TokenMapping",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rootToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FxERC20Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHILD_TOKEN_LOGIC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAP_TOKEN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PREFIX_SYMBOL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUFFIX_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "bytecodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "computedCreate2Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forwarderRegistry",
      "outputs": [
        {
          "internalType": "contract IForwarderRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC20Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rootToChildToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b8149f4d1c5dcdf5e44c16c85588773cd5efd22d70d96ea13dd63c91582138c",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x80b12BD0F1793BF6CEa767Fa83Eb2068eaa17DC8",
    "contractAddress": null,
    "transactionIndex": 53,
    "gasUsed": "1578365",
    "logsBloom": "0x
    "blockHash": "0xd1e5d9e427d63bb11092de4243a508f0f885d55f2a6beb1aaaa2c063cec91c64",
    "transactionHash": "0x8b8149f4d1c5dcdf5e44c16c85588773cd5efd22d70d96ea13dd63c91582138c",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 69464207,
        "transactionHash": "0x8b8149f4d1c5dcdf5e44c16c85588773cd5efd22d70d96ea13dd63c91582138c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000080b12bd0f1793bf6cea767fa83eb2068eaa17dc8",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a83970273c0be900000000000000000000000000000000000000000000000632aa7551896a08cd0000000000000000000000000000000000000000000015d65dbfccede714050500000000000000000000000000000000000000000000000632023be1622dfce40000000000000000000000000000000000000000000015d65e68065e0e5010ee",
        "logIndex": 210,
        "blockHash": "0xd1e5d9e427d63bb11092de4243a508f0f885d55f2a6beb1aaaa2c063cec91c64"
      }
    ],
    "blockNumber": 69464207,
    "cumulativeGasUsed": "8268191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8397259c983751DAf40400790063935a11afa28a",
    "0xC42642D5f17A60EB8f95FF631090E0544cf2A1d8",
    "0x316a472D084489CB6d4C66e5eB62aE3AdA17521e"
  ],
  "numDeployments": 1,
  "solcInputHash": "4046faabd850477eb3782908ea433876",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fxChild\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"childTokenLogic\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FxERC20ChildTokenLogicNotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"syncType\",\"type\":\"bytes32\"}],\"name\":\"FxERC20InvalidSyncType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FxERC20InvalidWithdrawalAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"}],\"name\":\"FxERC20TokenAlreadyMapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FxERC20TokenNotMapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FxERC20Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"}],\"name\":\"FxERC20TokenMapping\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FxERC20Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHILD_TOKEN_LOGIC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAP_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREFIX_SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUFFIX_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computedCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rootToChildToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FxERC20InvalidSyncType(bytes32)\":[{\"params\":{\"syncType\":\"The unrecognized sync type.\"}}],\"FxERC20TokenAlreadyMapped(address,address)\":[{\"params\":{\"childToken\":\"The mapped child token.\",\"rootToken\":\"The mapped root token.\"}}]},\"events\":{\"FxERC20Deposit(address,address,address,address,uint256)\":{\"params\":{\"amount\":\"The deposit amount.\",\"childToken\":\"The child ERC20 token.\",\"depositor\":\"The depositor address.\",\"recipient\":\"The recipient address.\",\"rootToken\":\"The root ERC20 token.\"}},\"FxERC20TokenMapping(address,address)\":{\"params\":{\"childToken\":\"The child ERC20 token.\",\"rootToken\":\"The root ERC20 token.\"}},\"FxERC20Withdrawal(address,address,address,address,uint256)\":{\"params\":{\"amount\":\"The withdrawal amount.\",\"childToken\":\"The child ERC20 token.\",\"recipient\":\"The recipient address.\",\"rootToken\":\"The root ERC20 token.\",\"withdrawer\":\"The withdrawer address.\"}}},\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC20Received(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Empty if the receiver is the same as the tokens sender, else the abi-encoded address of the receiver.\",\"from\":\"The previous tokens owner.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"withdraw(address,uint256)\":{\"details\":\"Reverts with `FxERC20TokenNotMapped` if `childToken` has not been deployed through a mapping request.Reverts if the token transfer fails for any reason.\",\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"childToken\":\"The ERC20 child token which has previously been deployed as a mapping for a root token.\"}},\"withdrawTo(address,address,uint256)\":{\"details\":\"Reverts with `FxERC20InvalidWithdrawalAddress` if `receiver` is the zero address.Reverts with `FxERC20TokenNotMapped` if `childToken` has not been deployed through a mapping request.Reverts if the token transfer fails for any reason.\",\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"childToken\":\"The ERC20 child token which has previously been deployed as a mapping for a root token.\",\"receiver\":\"The account receiving the withdrawal.\"}}},\"title\":\"FxERC20MintBurnChildTunnel\",\"version\":1},\"userdoc\":{\"errors\":{\"FxERC20ChildTokenLogicNotContract()\":[{\"notice\":\"Thrown during construction if the provided child token logic address is not a deployed contract.\"}],\"FxERC20InvalidSyncType(bytes32)\":[{\"notice\":\"Thrown if a sync request is of an unrecognized type.\"}],\"FxERC20InvalidWithdrawalAddress()\":[{\"notice\":\"Thrown if a withdrawal recipient is the zero address.\"}],\"FxERC20TokenAlreadyMapped(address,address)\":[{\"notice\":\"Thrown during a mapping request if the root token already has a mapping.\"}],\"FxERC20TokenNotMapped()\":[{\"notice\":\"Thrown during a withdrawal if the requested child token withdrawal was not mapped from a root token.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"events\":{\"FxERC20Deposit(address,address,address,address,uint256)\":{\"notice\":\"Emitted when some ERC20 token has been deposited.\"},\"FxERC20TokenMapping(address,address)\":{\"notice\":\"Emitted when an ERC20 token has been mapped.\"},\"FxERC20Withdrawal(address,address,address,address,uint256)\":{\"notice\":\"Emitted when some ERC20 token has been withdrawn.\"}},\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"withdraw(address,uint256)\":{\"notice\":\"Requests the withdrawal of an `amount` of `childToken` by and for the message sender.Note: Approval for `amount` of `childToken` must have been previously given to this contract.\"},\"withdrawTo(address,address,uint256)\":{\"notice\":\"Requests the withdrawal of an `amount` of `childToken` by the message sender and for a `receiver`.Note: Approval for `amount` of `childToken` must have been previously given to this contract.\"}},\"notice\":\"Fx child mintable burnable ERC20 tunnel.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fx-portal/tunnel/ERC20/FxERC20MintBurnChildTunnel.sol\":\"FxERC20MintBurnChildTunnel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the allowance increase creates an overflow.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param increment The allowance increase.\\nerror ERC20AllowanceOverflow(address owner, address spender, uint256 allowance, uint256 increment);\\n\",\"keccak256\":\"0x4f9dbb3db998429b996aeeaa937ab2cecb0e65b14359bfd2c59d8926aa35b9c9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch transfer operation.\\nerror ERC20BatchTransferValuesOverflow();\\n\",\"keccak256\":\"0x1d5238c7a3a1a2bbea8bf4c3dbb3f479047c6d66566c02fa0e253fb59deff38f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting an allowance to the the zero address.\\n/// @param owner The owner of the tokens.\\nerror ERC20ApprovalToAddressZero(address owner);\\n\\n/// @notice Thrown when the allowance decreases below the current alowance set.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param decrement The allowance decrease.\\nerror ERC20InsufficientAllowance(address owner, address spender, uint256 allowance, uint256 decrement);\\n\\n/// @notice Thrown when transferring tokens to the zero address.\\n/// @param owner The account from which the tokens are transferred.\\nerror ERC20TransferToAddressZero(address owner);\\n\\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\\n/// @param owner The owner of the tokens.\\n/// @param balance The current balance.\\n/// @param value The amount of tokens being transferred.\\nerror ERC20InsufficientBalance(address owner, uint256 balance, uint256 value);\\n\",\"keccak256\":\"0x43d145fcf88405e58f2bdb28d5f4e2ac12b98507af3bc9f8c7cdee4b908404c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the minting tokens to the zero address.\\nerror ERC20MintToAddressZero();\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch mint operation.\\nerror ERC20BatchMintValuesOverflow();\\n\\n/// @notice Thrown when the minting tokens overflows the supply.\\n/// @param supply The current supply.\\n/// @param value The amount of tokens being minted.\\nerror ERC20TotalSupplyOverflow(uint256 supply, uint256 value);\\n\",\"keccak256\":\"0x2f18d0b1ceecdc4684b8b2bf41887042a10e9a9fd1054b881032b08c48c047a1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\nerror ERC20SafeTransferRejected(address recipient);\\n\",\"keccak256\":\"0x3377653b83de8fd8a72bc7b66179ac8e8f7bcafba89a6c6db11e7906a880ecd1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/events/ERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when tokens are transferred, including zero value transfers.\\n/// @param from The account where the transferred tokens are withdrawn from.\\n/// @param to The account where the transferred tokens are deposited to.\\n/// @param value The amount of tokens being transferred.\\nevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n/// @notice Emitted when an approval is set.\\n/// @param owner The account granting an allowance to `spender`.\\n/// @param spender The account being granted an allowance from `owner`.\\n/// @param value The allowance amount being granted.\\nevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\",\"keccak256\":\"0xd4a596f9748c2c306ad9e602956d2cdc17f5d8bfca99647e142b63d44f7d0a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0x1f52c6f79dc8a1681712811688753d65c12a684fc94aeb776c65780b0125c1df\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xf11a7de9258ff2518af82357afdf852352b4f9759e2372e5b0c89dcbf142c50d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x147f181fad3ab906471b002325e02a2395218c5e49de4da011d3ac0591742e22\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x298558ada849681cab64032d620c31f956c5296506006f7273cbf58974372c27\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x8507c91851eebb6bcf4a7b416d0d2ed25400162b96b140951bbcc9ccdbc8d9c4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC20ApprovalToAddressZero, ERC20InsufficientAllowance, ERC20TransferToAddressZero, ERC20InsufficientBalance} from \\\"./../errors/ERC20Errors.sol\\\";\\nimport {ERC20AllowanceOverflow} from \\\"./../errors/ERC20AllowanceErrors.sol\\\";\\nimport {ERC20BatchTransferValuesOverflow} from \\\"./../errors/ERC20BatchTransfersErrors.sol\\\";\\nimport {ERC20SafeTransferRejected} from \\\"./../errors/ERC20SafeTransfersErrors.sol\\\";\\nimport {ERC20MintToAddressZero, ERC20BatchMintValuesOverflow, ERC20TotalSupplyOverflow} from \\\"./../errors/ERC20MintableErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval} from \\\"./../events/ERC20Events.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"./../../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.phase\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function initWithAllocations(address[] memory initialHolders, uint256[] memory initialAllocations) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        init();\\n        layout().batchMint(initialHolders, initialAllocations);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        s.allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = currentAllowance + value;\\n                if (newAllowance <= currentAllowance) revert ERC20AllowanceOverflow(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n\\n        if (currentAllowance != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = currentAllowance - value;\\n                if (newAllowance >= currentAllowance) revert ERC20InsufficientAllowance(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n            uint256 value = values[i];\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n            }\\n            emit Transfer(from, to, value);\\n        }\\n\\n        if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n            unchecked {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n            uint256 value = values[i];\\n\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n            }\\n\\n            emit Transfer(from, to, value);\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                unchecked {\\n                    uint256 newBalance = balance - totalValue;\\n                    // balance must be sufficient, including self-transfers\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                    s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n                }\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transfer(from, to, value);\\n        if (to.hasBytecode()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.hasBytecode()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(Layout storage s, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20MintToAddressZero();\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, value);\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC20MintToAddressZero();\\n\\n            uint256 value = values[i];\\n            if (value != 0) {\\n                unchecked {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchMintValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n            }\\n            emit Transfer(address(0), to, value);\\n        }\\n\\n        if (totalValue != 0) {\\n            unchecked {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, totalValue);\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(Layout storage s, address from, uint256 value) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\\n    ///  at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\\n        uint256 length = owners.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        for (uint256 i; i < length; ++i) {\\n            address from = owners[i];\\n            uint256 value = values[i];\\n\\n            if (from != sender) {\\n                s.decreaseAllowance(from, sender, value);\\n            }\\n\\n            if (value != 0) {\\n                uint256 balance = s.balances[from];\\n                unchecked {\\n                    uint256 newBalance = balance - value;\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n            }\\n\\n            emit Transfer(from, address(0), value);\\n        }\\n\\n        if (totalValue != 0) {\\n            unchecked {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\\n        if (IERC20Receiver(to).onERC20Received(sender, from, value, data) != ERC20_RECEIVED) revert ERC20SafeTransferRejected(to);\\n    }\\n}\\n\",\"keccak256\":\"0xc9c4d98135ba7d9590d4ff6e055570c7c11dc0860d597bfc2f256c92ff648fa0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Create2 adds common methods for minimal proxy with create2\\nabstract contract Create2 {\\n    // creates clone using minimal proxy\\n    function createClone(bytes32 _salt, address _target) internal returns (address _result) {\\n        bytes20 _targetBytes = bytes20(_target);\\n\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), _targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            _result := create2(0, clone, 0x37, _salt)\\n        }\\n\\n        require(_result != address(0), \\\"Create2: Failed on minimal deploy\\\");\\n    }\\n\\n    // get minimal proxy creation code\\n    function minimalProxyCreationCode(address logic) internal pure returns (bytes memory) {\\n        bytes10 creation = 0x3d602d80600a3d3981f3;\\n        bytes10 prefix = 0x363d3d373d3d3d363d73;\\n        bytes20 targetBytes = bytes20(logic);\\n        bytes15 suffix = 0x5af43d82803e903d91602b57fd5bf3;\\n        return abi.encodePacked(creation, prefix, targetBytes, suffix);\\n    }\\n\\n    // get computed create2 address\\n    function computedCreate2Address(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) public pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xca48ee6afc3974a8da65da9c98f3263a2d4f8ba17dd47c56737bfe90b520cde5\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x4e102fe11245e851e0f581b1fd4d5a3de2a86254a39e25d7ecc6d4a5947bcbd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"contracts/fx-portal/token/ERC20/interfaces/IFxERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Base interface for an Fx child ERC20\\ninterface IFxERC20 {\\n    /// @notice Returns the address of Fx Manager (FxChild).\\n    function fxManager() external returns (address);\\n\\n    /// @notice Returns the address of the mapped root token.\\n    function connectedToken() external returns (address);\\n}\\n\",\"keccak256\":\"0xd90e79bdbf2181c810dd4fd8ee80e9346eea402767fbb262fcedd585b18481c0\",\"license\":\"MIT\"},\"contracts/fx-portal/token/ERC20/interfaces/IFxERC20MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Initialization interface for an Fx child mintable and burnable ERC20\\ninterface IFxERC20MintBurn {\\n    function initialize(\\n        address fxManager,\\n        address connectedToken,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals,\\n        string memory uri,\\n        address initialOwner\\n    ) external;\\n}\\n\",\"keccak256\":\"0x95dcd35a8eb5005120c3314c27f0ba5b532675e5d92a3e7705395dc926e99206\",\"license\":\"MIT\"},\"contracts/fx-portal/tunnel/ERC20/FxERC20ChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IFxERC20} from \\\"./../../token/ERC20/interfaces/IFxERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Address} from \\\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\\\";\\nimport {ERC20Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\\\";\\nimport {FxBaseChildTunnel} from \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\nimport {FxTokenMapping} from \\\"./../FxTokenMapping.sol\\\";\\nimport {FxERC20TunnelEvents} from \\\"./FxERC20TunnelEvents.sol\\\";\\nimport {ERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\\\";\\nimport {Create2} from \\\"@maticnetwork/fx-portal/contracts/lib/Create2.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n\\n/// @title FxERC20ChildTunnel\\n/// @notice Base contract for an Fx child ERC20 tunnel.\\nabstract contract FxERC20ChildTunnel is FxBaseChildTunnel, FxTokenMapping, FxERC20TunnelEvents, ERC20Receiver, Create2, ForwarderRegistryContext {\\n    using Address for address;\\n\\n    string public constant SUFFIX_NAME = \\\" (Polygon)\\\";\\n    string public constant PREFIX_SYMBOL = \\\"p\\\";\\n\\n    address public immutable CHILD_TOKEN_LOGIC;\\n\\n    /// @notice Thrown during construction if the provided child token logic address is not a deployed contract.\\n    error FxERC20ChildTokenLogicNotContract();\\n\\n    /// @notice Thrown during a withdrawal if the requested child token withdrawal was not mapped from a root token.\\n    error FxERC20TokenNotMapped();\\n\\n    /// @notice Thrown during a mapping request if the root token already has a mapping.\\n    /// @param rootToken The mapped root token.\\n    /// @param childToken The mapped child token.\\n    error FxERC20TokenAlreadyMapped(address rootToken, address childToken);\\n\\n    /// @notice Thrown if a sync request is of an unrecognized type.\\n    /// @param syncType The unrecognized sync type.\\n    error FxERC20InvalidSyncType(bytes32 syncType);\\n\\n    /// @notice Thrown if a withdrawal recipient is the zero address.\\n    error FxERC20InvalidWithdrawalAddress();\\n\\n    /// @dev Reverts with `FxERC20ChildTokenLogicNotContract` if `childTokenLogic_` is not a contract.\\n    constructor(\\n        address fxChild,\\n        address childTokenLogic_,\\n        IForwarderRegistry forwarderRegistry\\n    ) FxBaseChildTunnel(fxChild) ForwarderRegistryContext(forwarderRegistry) {\\n        if (!childTokenLogic_.hasBytecode()) {\\n            revert FxERC20ChildTokenLogicNotContract();\\n        }\\n        CHILD_TOKEN_LOGIC = childTokenLogic_;\\n    }\\n\\n    /// @notice Handles the receipt of ERC20 tokens as a withdrawal request.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @dev Reverts with `FxERC20InvalidWithdrawalAddress` if `receiver` is encoded in `data` and is the zero address.\\n    /// @dev Reverts with `FxERC20TokenNotMapped` if the child token (msg.sender) has not been deployed through a mapping request.\\n    // @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Empty if the receiver is the same as the tokens sender, else the abi-encoded address of the receiver.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue) {\\n        address receiver = from;\\n        if (data.length != 0) {\\n            (receiver) = abi.decode(data, (address));\\n            if (receiver == address(0)) {\\n                revert FxERC20InvalidWithdrawalAddress();\\n            }\\n        }\\n        _withdraw(msg.sender, from, receiver, value);\\n        _withdrawReceivedTokens(msg.sender, value);\\n        return ERC20Storage.ERC20_RECEIVED;\\n    }\\n\\n    /// @notice Requests the withdrawal of an `amount` of `childToken` by and for the message sender.\\n    /// @notice Note: Approval for `amount` of `childToken` must have been previously given to this contract.\\n    /// @dev Reverts with `FxERC20TokenNotMapped` if `childToken` has not been deployed through a mapping request.\\n    /// @dev Reverts if the token transfer fails for any reason.\\n    /// @param childToken The ERC20 child token which has previously been deployed as a mapping for a root token.\\n    /// @param amount The amount of tokens to withdraw.\\n    function withdraw(address childToken, uint256 amount) external {\\n        address withdrawer = _msgSender();\\n        _withdraw(childToken, withdrawer, withdrawer, amount);\\n        _withdrawTokensFrom(childToken, withdrawer, amount);\\n    }\\n\\n    /// @notice Requests the withdrawal of an `amount` of `childToken` by the message sender and for a `receiver`.\\n    /// @notice Note: Approval for `amount` of `childToken` must have been previously given to this contract.\\n    /// @dev Reverts with `FxERC20InvalidWithdrawalAddress` if `receiver` is the zero address.\\n    /// @dev Reverts with `FxERC20TokenNotMapped` if `childToken` has not been deployed through a mapping request.\\n    /// @dev Reverts if the token transfer fails for any reason.\\n    /// @param childToken The ERC20 child token which has previously been deployed as a mapping for a root token.\\n    /// @param receiver The account receiving the withdrawal.\\n    /// @param amount The amount of tokens to withdraw.\\n    function withdrawTo(address childToken, address receiver, uint256 amount) external {\\n        if (receiver == address(0)) {\\n            revert FxERC20InvalidWithdrawalAddress();\\n        }\\n        address withdrawer = _msgSender();\\n        _withdraw(childToken, withdrawer, receiver, amount);\\n        _withdrawTokensFrom(childToken, withdrawer, amount);\\n    }\\n\\n    /// @notice Processes a message coming from the root chain.\\n    /// @dev Reverts with `FxERC20InvalidSyncType` if the sync type is not DEPOSIT or MAP_TOKEN.\\n    function _processMessageFromRoot(uint256 /* stateId */, address sender, bytes memory data) internal override validateSender(sender) {\\n        // decode incoming data\\n        (bytes32 syncType, bytes memory syncData) = abi.decode(data, (bytes32, bytes));\\n\\n        if (syncType == DEPOSIT) {\\n            _syncDeposit(syncData);\\n        } else if (syncType == MAP_TOKEN) {\\n            _mapToken(syncData);\\n        } else {\\n            revert FxERC20InvalidSyncType(syncType);\\n        }\\n    }\\n\\n    function _syncDeposit(bytes memory syncData) internal {\\n        (address rootToken, address depositor, address receiver, uint256 amount) = abi.decode(syncData, (address, address, address, uint256));\\n        address childToken = rootToChildToken[rootToken];\\n\\n        // deposit tokens\\n        _deposit(childToken, receiver, amount);\\n\\n        emit FxERC20Deposit(rootToken, childToken, depositor, receiver, amount);\\n    }\\n\\n    function _withdraw(address childToken, address withdrawer, address receiver, uint256 amount) internal {\\n        address rootToken = IFxERC20(childToken).connectedToken();\\n        if (rootToken == address(0x0) || childToken != rootToChildToken[rootToken]) {\\n            revert FxERC20TokenNotMapped();\\n        }\\n\\n        _sendMessageToRoot(abi.encode(rootToken, childToken, withdrawer, receiver, amount));\\n        emit FxERC20Withdrawal(rootToken, childToken, withdrawer, receiver, amount);\\n    }\\n\\n    function _mapToken(bytes memory syncData) internal returns (address childToken) {\\n        (address rootToken, bytes memory initArguments) = abi.decode(syncData, (address, bytes));\\n\\n        // get root to child token\\n        childToken = rootToChildToken[rootToken];\\n\\n        // check if it's already mapped\\n        if (childToken != address(0)) {\\n            revert FxERC20TokenAlreadyMapped(rootToken, childToken);\\n        }\\n\\n        // deploy new child token\\n        bytes32 salt = keccak256(abi.encodePacked(rootToken));\\n        childToken = createClone(salt, CHILD_TOKEN_LOGIC);\\n\\n        _initializeChildToken(rootToken, childToken, initArguments);\\n\\n        // map the token\\n        rootToChildToken[rootToken] = childToken;\\n        emit FxERC20TokenMapping(rootToken, childToken);\\n    }\\n\\n    /// @notice Calls the initialization sequence of a child token.\\n    /// @param rootToken The root token address.\\n    /// @param childToken The child token address.\\n    /// @param initArguments The abi-encoded child token initialization arguments.\\n    function _initializeChildToken(address rootToken, address childToken, bytes memory initArguments) internal virtual;\\n\\n    /// @notice Deposits the tokens received from the root chain.\\n    /// @param childToken The child token address.\\n    /// @param receiver The deposit receiver address.\\n    /// @param amount The deposit amount.\\n    function _deposit(address childToken, address receiver, uint256 amount) internal virtual;\\n\\n    /// @notice Withdraws tokens to the root chain when transferred to this contract via onERC20Received function.\\n    /// @dev When this function is called, this contract has already become the owner of the tokens.\\n    /// @param childToken The child token address.\\n    /// @param amount The withdrawal amount.\\n    function _withdrawReceivedTokens(address childToken, uint256 amount) internal virtual;\\n\\n    /// @notice Withdraws tokens to the root chain from a withdrawer.\\n    /// @dev When this function is called, the withdrawer still owns the tokens.\\n    /// @param childToken The child token address.\\n    /// @param withdrawer The withdrawer address.\\n    /// @param amount The withdrawal amount.\\n    function _withdrawTokensFrom(address childToken, address withdrawer, uint256 amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x0ff67bbac07d077dd408c897d8cdf96b66341a77ac83d594458107000d386fb7\",\"license\":\"MIT\"},\"contracts/fx-portal/tunnel/ERC20/FxERC20MintBurnChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IFxERC20MintBurn} from \\\"./../../token/ERC20/interfaces/IFxERC20MintBurn.sol\\\";\\nimport {IERC20Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {FxERC20ChildTunnel} from \\\"./FxERC20ChildTunnel.sol\\\";\\n\\n/// @title FxERC20MintBurnChildTunnel\\n/// @notice Fx child mintable burnable ERC20 tunnel.\\ncontract FxERC20MintBurnChildTunnel is FxERC20ChildTunnel {\\n    constructor(\\n        address fxChild,\\n        address childTokenLogic,\\n        IForwarderRegistry forwarderRegistry\\n    ) FxERC20ChildTunnel(fxChild, childTokenLogic, forwarderRegistry) {}\\n\\n    /// @inheritdoc FxERC20ChildTunnel\\n    function _initializeChildToken(address rootToken, address childToken, bytes memory initArguments) internal virtual override {\\n        (string memory name, string memory symbol, uint8 decimals, string memory uri, address initialOwner) = abi.decode(\\n            initArguments,\\n            (string, string, uint8, string, address)\\n        );\\n\\n        IFxERC20MintBurn(childToken).initialize(\\n            address(this),\\n            rootToken,\\n            string(abi.encodePacked(name, SUFFIX_NAME)),\\n            string(abi.encodePacked(PREFIX_SYMBOL, symbol)),\\n            decimals,\\n            uri,\\n            initialOwner\\n        );\\n    }\\n\\n    /// @inheritdoc FxERC20ChildTunnel\\n    /// @notice Mints the deposit amount.\\n    function _deposit(address childToken, address receiver, uint256 amount) internal virtual override {\\n        IERC20Mintable(childToken).mint(receiver, amount);\\n    }\\n\\n    /// @inheritdoc FxERC20ChildTunnel\\n    /// @notice Burns the withdrawal amount.\\n    function _withdrawReceivedTokens(address childToken, uint256 amount) internal virtual override {\\n        IERC20Burnable(childToken).burn(amount);\\n    }\\n\\n    /// @inheritdoc FxERC20ChildTunnel\\n    /// @notice Burns the withdrawal amount.\\n    function _withdrawTokensFrom(address childToken, address withdrawer, uint256 amount) internal virtual override {\\n        IERC20Burnable(childToken).burnFrom(withdrawer, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe9cb95465be4ced0fb134a4839a54b985ff29b6eeaa9b57944da54ff0992fd36\",\"license\":\"MIT\"},\"contracts/fx-portal/tunnel/ERC20/FxERC20TunnelEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nabstract contract FxERC20TunnelEvents {\\n    /// @notice Emitted when an ERC20 token has been mapped.\\n    /// @param rootToken The root ERC20 token.\\n    /// @param childToken The child ERC20 token.\\n    event FxERC20TokenMapping(address indexed rootToken, address indexed childToken);\\n\\n    /// @notice Emitted when some ERC20 token has been withdrawn.\\n    /// @param rootToken The root ERC20 token.\\n    /// @param childToken The child ERC20 token.\\n    /// @param withdrawer The withdrawer address.\\n    /// @param recipient The recipient address.\\n    /// @param amount The withdrawal amount.\\n    event FxERC20Withdrawal(address indexed rootToken, address indexed childToken, address withdrawer, address recipient, uint256 amount);\\n\\n    /// @notice Emitted when some ERC20 token has been deposited.\\n    /// @param rootToken The root ERC20 token.\\n    /// @param childToken The child ERC20 token.\\n    /// @param depositor The depositor address.\\n    /// @param recipient The recipient address.\\n    /// @param amount The deposit amount.\\n    event FxERC20Deposit(address indexed rootToken, address indexed childToken, address depositor, address recipient, uint256 amount);\\n}\\n\",\"keccak256\":\"0x26f6bdbf0a043caf4489313547c5449945f664dded88df5fdc900921634f3715\",\"license\":\"MIT\"},\"contracts/fx-portal/tunnel/FxTokenMapping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nabstract contract FxTokenMapping {\\n    bytes32 public constant DEPOSIT = keccak256(\\\"DEPOSIT\\\");\\n    bytes32 public constant MAP_TOKEN = keccak256(\\\"MAP_TOKEN\\\");\\n\\n    mapping(address => address) public rootToChildToken;\\n}\\n\",\"keccak256\":\"0x3e8cbb83027b1ff35b88e12c0e9bf5bc76d2c3c00b80a064a466d42c8c205672\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051611cca380380611cca83398101604081905261002f9161015c565b600080546001600160a01b0319166001600160a01b038516179055828282808061006b634fc3585960e01b60016100646100b4565b91906100e8565b6001600160a01b0390811660805283163b1515905061009d57604051630a1ae39360e11b815260040160405180910390fd5b506001600160a01b031660a052506101ca92505050565b6000806100e260017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6101a9565b92915050565b600160e01b6001600160e01b0319831601610116576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b038116811461015957600080fd5b50565b60008060006060848603121561017157600080fd5b835161017c81610144565b602085015190935061018d81610144565b604085015190925061019e81610144565b809150509250925092565b818103818111156100e257634e487b7160e01b600052601160045260246000fd5b60805160a051611abf61020b600039600081816102ca015261105001526000818161014a0152818161028801528181610cc00152610d4e0152611abf6000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80637337957f116100b25780639a7c4b7111610081578063d81c8e5211610066578063d81c8e5214610410578063ea60c7c414610437578063f3fef3a31461046d57600080fd5b80639a7c4b71146103ea578063c3b35a7e146103fd57600080fd5b80637337957f146102ec5780637f1e9cb014610380578063886a69ba146103a057806388837094146103d557600080fd5b8063450d11f0116100ee578063450d11f0146102145780634fc3585914610234578063572b6c05146102785780636c4603c9146102c557600080fd5b806301ffc9a7146101205780632b4c9f16146101485780633740d5a01461018f57806339c6c9e0146101d8575b600080fd5b61013361012e3660046113f0565b610480565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013f565b6101cb6040518060400160405280600181526020017f700000000000000000000000000000000000000000000000000000000000000081525081565b60405161013f91906114a7565b6101cb6040518060400160405280600a81526020017f2028506f6c79676f6e290000000000000000000000000000000000000000000081525081565b60005461016a9073ffffffffffffffffffffffffffffffffffffffff1681565b610247610242366004611528565b61049a565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161013f565b61013361028636600461159b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61016a7f000000000000000000000000000000000000000000000000000000000000000081565b61016a6102fa3660046115b8565b604080517fff0000000000000000000000000000000000000000000000000000000000000060208083019190915260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218201526035810194909452605580850193909352805180850390930183526075909301909252805191012090565b60015461016a9073ffffffffffffffffffffffffffffffffffffffff1681565b6103c77f2cef46a936bdc5b7e6e8c71aa04560c41cf7d88bb26901a7e7f4936ff02accad81565b60405190815260200161013f565b6103e86103e336600461159b565b610540565b005b6103e86103f83660046115f1565b610632565b6103e861040b36600461164d565b610720565b6103c77f87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f82181565b61016a61044536600461159b565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6103e861047b36600461168e565b610790565b60006104948261048e6107b8565b906107e6565b92915050565b60008482156104fe576104af8385018561159b565b905073ffffffffffffffffffffffffffffffffffffffff81166104fe576040517fcb13d6aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61050a338783886108c0565b6105143386610a7d565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16156105eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f520000000000000000000000000000000000000000000000000000000000000060648201526084016105e2565b61071a848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b0e92505050565b50505050565b73ffffffffffffffffffffffffffffffffffffffff821661076d576040517fcb13d6aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610777610c7d565b9050610785848285856108c0565b61071a848284610dca565b600061079a610c7d565b90506107a8838283856108c0565b6107b3838284610dca565b505050565b60008061049460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6116ba565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161083657506000610494565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161088757506001610494565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008473ffffffffffffffffffffffffffffffffffffffff16630a8a49146040518163ffffffff1660e01b81526004016020604051808303816000875af115801561090f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093391906116f4565b905073ffffffffffffffffffffffffffffffffffffffff81161580610982575073ffffffffffffffffffffffffffffffffffffffff808216600090815260026020526040902054868216911614155b156109b9576040517f6cddfcaf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8084166020830152808816928201929092528186166060820152908416608082015260a08101839052610a169060c001604051602081830303815290604052610e63565b6040805173ffffffffffffffffffffffffffffffffffffffff86811682528581166020830152918101849052818716918316907faa4bbbc02123d0c446b55ec99a14078c9eab05cb4a271e6d8f8e278d9e4cd1849060600160405180910390a35050505050565b6040517f42966c680000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8316906342966c68906024016020604051808303816000875af1158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b39190611711565b600154829073ffffffffffffffffffffffffffffffffffffffff808316911614610bba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f525f46524f4d5f524f4f5400000000000000000000000000000000000000000060648201526084016105e2565b60008083806020019051810190610bd19190611811565b915091507f87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f8218203610c0a57610c0581610e9d565b610c75565b7f2cef46a936bdc5b7e6e8c71aa04560c41cf7d88bb26901a7e7f4936ff02accad8203610c4057610c3a81610f5d565b50610c75565b6040517f079fc927000000000000000000000000000000000000000000000000000000008152600481018390526024016105e2565b505050505050565b600033321480610c8d5750601836105b15610c9757503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610db957506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015610d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db99190611711565b15610dc357919050565b3391505090565b6040517f79cc679000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390528416906379cc6790906044016020604051808303816000875af1158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a9190611711565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681604051610e9291906114a7565b60405180910390a150565b60008060008084806020019051810190610eb79190611868565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260026020526040902054949850929650909450925016610ef5818484611101565b6040805173ffffffffffffffffffffffffffffffffffffffff86811682528581166020830152918101849052818316918716907fd04a997afc07fd79393f2188ae8935e4389ab8aef6144f0f839e3aade5b858ab9060600160405180910390a3505050505050565b600080600083806020019051810190610f7691906118bb565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602052604090205416945090925090508215610ffd576040517ff5b9e7de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152841660248201526044016105e2565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152600090603401604051602081830303815290604052805190602001209050611074817f000000000000000000000000000000000000000000000000000000000000000061118e565b935061108183858461129d565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169489169485179055517ff935ffb7c4a7f69e191e46617fc2f41d98d93290443199977b42dd086e744c869190a3505050919050565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390528416906340c10f1990604401600060405180830381600087803b15801561117157600080fd5b505af1158015611185573d6000803e3d6000fd5b50505050505050565b6000808260601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152846037826000f592505073ffffffffffffffffffffffffffffffffffffffff8216611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f437265617465323a204661696c6564206f6e206d696e696d616c206465706c6f60448201527f790000000000000000000000000000000000000000000000000000000000000060648201526084016105e2565b5092915050565b6000806000806000858060200190518101906112b991906118f6565b945094509450945094508673ffffffffffffffffffffffffffffffffffffffff16639a0186a3308a886040518060400160405280600a81526020017f2028506f6c79676f6e29000000000000000000000000000000000000000000008152506040516020016113299291906119b5565b6040516020818303038152906040526040518060400160405280600181526020017f7000000000000000000000000000000000000000000000000000000000000000815250896040516020016113809291906119b5565b6040516020818303038152906040528888886040518863ffffffff1660e01b81526004016113b497969594939291906119e4565b600060405180830381600087803b1580156113ce57600080fd5b505af11580156113e2573d6000803e3d6000fd5b505050505050505050505050565b60006020828403121561140257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461143257600080fd5b9392505050565b60005b8381101561145457818101518382015260200161143c565b50506000910152565b60008151808452611475816020860160208601611439565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611432602083018461145d565b73ffffffffffffffffffffffffffffffffffffffff811681146114dc57600080fd5b50565b60008083601f8401126114f157600080fd5b50813567ffffffffffffffff81111561150957600080fd5b60208301915083602082850101111561152157600080fd5b9250929050565b60008060008060006080868803121561154057600080fd5b853561154b816114ba565b9450602086013561155b816114ba565b935060408601359250606086013567ffffffffffffffff81111561157e57600080fd5b61158a888289016114df565b969995985093965092949392505050565b6000602082840312156115ad57600080fd5b8135611432816114ba565b6000806000606084860312156115cd57600080fd5b833592506020840135915060408401356115e6816114ba565b809150509250925092565b6000806000806060858703121561160757600080fd5b843593506020850135611619816114ba565b9250604085013567ffffffffffffffff81111561163557600080fd5b611641878288016114df565b95989497509550505050565b60008060006060848603121561166257600080fd5b833561166d816114ba565b9250602084013561167d816114ba565b929592945050506040919091013590565b600080604083850312156116a157600080fd5b82356116ac816114ba565b946020939093013593505050565b81810381811115610494577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006020828403121561170657600080fd5b8151611432816114ba565b60006020828403121561172357600080fd5b8151801515811461143257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261177357600080fd5b81516020830160008067ffffffffffffffff84111561179457611794611733565b506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85018116603f0116810181811067ffffffffffffffff821117156117e1576117e1611733565b6040528381529050808284018710156117f957600080fd5b611807846020830185611439565b9695505050505050565b6000806040838503121561182457600080fd5b82519150602083015167ffffffffffffffff81111561184257600080fd5b61184e85828601611762565b9150509250929050565b8051611863816114ba565b919050565b6000806000806080858703121561187e57600080fd5b8451611889816114ba565b602086015190945061189a816114ba565b60408601519093506118ab816114ba565b6060959095015193969295505050565b600080604083850312156118ce57600080fd5b82516118d9816114ba565b602084015190925067ffffffffffffffff81111561184257600080fd5b600080600080600060a0868803121561190e57600080fd5b855167ffffffffffffffff81111561192557600080fd5b61193188828901611762565b955050602086015167ffffffffffffffff81111561194e57600080fd5b61195a88828901611762565b945050604086015160ff8116811461197157600080fd5b606087015190935067ffffffffffffffff81111561198e57600080fd5b61199a88828901611762565b9250506119a960808701611858565b90509295509295909350565b600083516119c7818460208801611439565b8351908301906119db818360208801611439565b01949350505050565b73ffffffffffffffffffffffffffffffffffffffff8816815273ffffffffffffffffffffffffffffffffffffffff8716602082015260e060408201526000611a2f60e083018861145d565b8281036060840152611a41818861145d565b905060ff8616608084015282810360a0840152611a5e818661145d565b91505073ffffffffffffffffffffffffffffffffffffffff831660c08301529897505050505050505056fea2646970667358221220da05ed2185f14049aa4ecc03764dfc33288898e9c683675eed2258360b08ba8d64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80637337957f116100b25780639a7c4b7111610081578063d81c8e5211610066578063d81c8e5214610410578063ea60c7c414610437578063f3fef3a31461046d57600080fd5b80639a7c4b71146103ea578063c3b35a7e146103fd57600080fd5b80637337957f146102ec5780637f1e9cb014610380578063886a69ba146103a057806388837094146103d557600080fd5b8063450d11f0116100ee578063450d11f0146102145780634fc3585914610234578063572b6c05146102785780636c4603c9146102c557600080fd5b806301ffc9a7146101205780632b4c9f16146101485780633740d5a01461018f57806339c6c9e0146101d8575b600080fd5b61013361012e3660046113f0565b610480565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013f565b6101cb6040518060400160405280600181526020017f700000000000000000000000000000000000000000000000000000000000000081525081565b60405161013f91906114a7565b6101cb6040518060400160405280600a81526020017f2028506f6c79676f6e290000000000000000000000000000000000000000000081525081565b60005461016a9073ffffffffffffffffffffffffffffffffffffffff1681565b610247610242366004611528565b61049a565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161013f565b61013361028636600461159b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61016a7f000000000000000000000000000000000000000000000000000000000000000081565b61016a6102fa3660046115b8565b604080517fff0000000000000000000000000000000000000000000000000000000000000060208083019190915260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660218201526035810194909452605580850193909352805180850390930183526075909301909252805191012090565b60015461016a9073ffffffffffffffffffffffffffffffffffffffff1681565b6103c77f2cef46a936bdc5b7e6e8c71aa04560c41cf7d88bb26901a7e7f4936ff02accad81565b60405190815260200161013f565b6103e86103e336600461159b565b610540565b005b6103e86103f83660046115f1565b610632565b6103e861040b36600461164d565b610720565b6103c77f87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f82181565b61016a61044536600461159b565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6103e861047b36600461168e565b610790565b60006104948261048e6107b8565b906107e6565b92915050565b60008482156104fe576104af8385018561159b565b905073ffffffffffffffffffffffffffffffffffffffff81166104fe576040517fcb13d6aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61050a338783886108c0565b6105143386610a7d565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16156105eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160448201527f4c52454144595f5345540000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f520000000000000000000000000000000000000000000000000000000000000060648201526084016105e2565b61071a848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b0e92505050565b50505050565b73ffffffffffffffffffffffffffffffffffffffff821661076d576040517fcb13d6aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610777610c7d565b9050610785848285856108c0565b61071a848284610dca565b600061079a610c7d565b90506107a8838283856108c0565b6107b3838284610dca565b505050565b60008061049460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6116ba565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161083657506000610494565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161088757506001610494565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008473ffffffffffffffffffffffffffffffffffffffff16630a8a49146040518163ffffffff1660e01b81526004016020604051808303816000875af115801561090f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093391906116f4565b905073ffffffffffffffffffffffffffffffffffffffff81161580610982575073ffffffffffffffffffffffffffffffffffffffff808216600090815260026020526040902054868216911614155b156109b9576040517f6cddfcaf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8084166020830152808816928201929092528186166060820152908416608082015260a08101839052610a169060c001604051602081830303815290604052610e63565b6040805173ffffffffffffffffffffffffffffffffffffffff86811682528581166020830152918101849052818716918316907faa4bbbc02123d0c446b55ec99a14078c9eab05cb4a271e6d8f8e278d9e4cd1849060600160405180910390a35050505050565b6040517f42966c680000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8316906342966c68906024016020604051808303816000875af1158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b39190611711565b600154829073ffffffffffffffffffffffffffffffffffffffff808316911614610bba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201527f525f46524f4d5f524f4f5400000000000000000000000000000000000000000060648201526084016105e2565b60008083806020019051810190610bd19190611811565b915091507f87a7811f4bfedea3d341ad165680ae306b01aaeacc205d227629cf157dd9f8218203610c0a57610c0581610e9d565b610c75565b7f2cef46a936bdc5b7e6e8c71aa04560c41cf7d88bb26901a7e7f4936ff02accad8203610c4057610c3a81610f5d565b50610c75565b6040517f079fc927000000000000000000000000000000000000000000000000000000008152600481018390526024016105e2565b505050505050565b600033321480610c8d5750601836105b15610c9757503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610db957506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015610d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db99190611711565b15610dc357919050565b3391505090565b6040517f79cc679000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390528416906379cc6790906044016020604051808303816000875af1158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a9190611711565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681604051610e9291906114a7565b60405180910390a150565b60008060008084806020019051810190610eb79190611868565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260026020526040902054949850929650909450925016610ef5818484611101565b6040805173ffffffffffffffffffffffffffffffffffffffff86811682528581166020830152918101849052818316918716907fd04a997afc07fd79393f2188ae8935e4389ab8aef6144f0f839e3aade5b858ab9060600160405180910390a3505050505050565b600080600083806020019051810190610f7691906118bb565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602052604090205416945090925090508215610ffd576040517ff5b9e7de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8084166004830152841660248201526044016105e2565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152600090603401604051602081830303815290604052805190602001209050611074817f000000000000000000000000000000000000000000000000000000000000000061118e565b935061108183858461129d565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169489169485179055517ff935ffb7c4a7f69e191e46617fc2f41d98d93290443199977b42dd086e744c869190a3505050919050565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390528416906340c10f1990604401600060405180830381600087803b15801561117157600080fd5b505af1158015611185573d6000803e3d6000fd5b50505050505050565b6000808260601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152846037826000f592505073ffffffffffffffffffffffffffffffffffffffff8216611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f437265617465323a204661696c6564206f6e206d696e696d616c206465706c6f60448201527f790000000000000000000000000000000000000000000000000000000000000060648201526084016105e2565b5092915050565b6000806000806000858060200190518101906112b991906118f6565b945094509450945094508673ffffffffffffffffffffffffffffffffffffffff16639a0186a3308a886040518060400160405280600a81526020017f2028506f6c79676f6e29000000000000000000000000000000000000000000008152506040516020016113299291906119b5565b6040516020818303038152906040526040518060400160405280600181526020017f7000000000000000000000000000000000000000000000000000000000000000815250896040516020016113809291906119b5565b6040516020818303038152906040528888886040518863ffffffff1660e01b81526004016113b497969594939291906119e4565b600060405180830381600087803b1580156113ce57600080fd5b505af11580156113e2573d6000803e3d6000fd5b505050505050505050505050565b60006020828403121561140257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461143257600080fd5b9392505050565b60005b8381101561145457818101518382015260200161143c565b50506000910152565b60008151808452611475816020860160208601611439565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611432602083018461145d565b73ffffffffffffffffffffffffffffffffffffffff811681146114dc57600080fd5b50565b60008083601f8401126114f157600080fd5b50813567ffffffffffffffff81111561150957600080fd5b60208301915083602082850101111561152157600080fd5b9250929050565b60008060008060006080868803121561154057600080fd5b853561154b816114ba565b9450602086013561155b816114ba565b935060408601359250606086013567ffffffffffffffff81111561157e57600080fd5b61158a888289016114df565b969995985093965092949392505050565b6000602082840312156115ad57600080fd5b8135611432816114ba565b6000806000606084860312156115cd57600080fd5b833592506020840135915060408401356115e6816114ba565b809150509250925092565b6000806000806060858703121561160757600080fd5b843593506020850135611619816114ba565b9250604085013567ffffffffffffffff81111561163557600080fd5b611641878288016114df565b95989497509550505050565b60008060006060848603121561166257600080fd5b833561166d816114ba565b9250602084013561167d816114ba565b929592945050506040919091013590565b600080604083850312156116a157600080fd5b82356116ac816114ba565b946020939093013593505050565b81810381811115610494577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006020828403121561170657600080fd5b8151611432816114ba565b60006020828403121561172357600080fd5b8151801515811461143257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261177357600080fd5b81516020830160008067ffffffffffffffff84111561179457611794611733565b506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85018116603f0116810181811067ffffffffffffffff821117156117e1576117e1611733565b6040528381529050808284018710156117f957600080fd5b611807846020830185611439565b9695505050505050565b6000806040838503121561182457600080fd5b82519150602083015167ffffffffffffffff81111561184257600080fd5b61184e85828601611762565b9150509250929050565b8051611863816114ba565b919050565b6000806000806080858703121561187e57600080fd5b8451611889816114ba565b602086015190945061189a816114ba565b60408601519093506118ab816114ba565b6060959095015193969295505050565b600080604083850312156118ce57600080fd5b82516118d9816114ba565b602084015190925067ffffffffffffffff81111561184257600080fd5b600080600080600060a0868803121561190e57600080fd5b855167ffffffffffffffff81111561192557600080fd5b61193188828901611762565b955050602086015167ffffffffffffffff81111561194e57600080fd5b61195a88828901611762565b945050604086015160ff8116811461197157600080fd5b606087015190935067ffffffffffffffff81111561198e57600080fd5b61199a88828901611762565b9250506119a960808701611858565b90509295509295909350565b600083516119c7818460208801611439565b8351908301906119db818360208801611439565b01949350505050565b73ffffffffffffffffffffffffffffffffffffffff8816815273ffffffffffffffffffffffffffffffffffffffff8716602082015260e060408201526000611a2f60e083018861145d565b8281036060840152611a41818861145d565b905060ff8616608084015282810360a0840152611a5e818661145d565b91505073ffffffffffffffffffffffffffffffffffffffff831660c08301529897505050505050505056fea2646970667358221220da05ed2185f14049aa4ecc03764dfc33288898e9c683675eed2258360b08ba8d64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "FxERC20InvalidSyncType(bytes32)": [
        {
          "params": {
            "syncType": "The unrecognized sync type."
          }
        }
      ],
      "FxERC20TokenAlreadyMapped(address,address)": [
        {
          "params": {
            "childToken": "The mapped child token.",
            "rootToken": "The mapped root token."
          }
        }
      ]
    },
    "events": {
      "FxERC20Deposit(address,address,address,address,uint256)": {
        "params": {
          "amount": "The deposit amount.",
          "childToken": "The child ERC20 token.",
          "depositor": "The depositor address.",
          "recipient": "The recipient address.",
          "rootToken": "The root ERC20 token."
        }
      },
      "FxERC20TokenMapping(address,address)": {
        "params": {
          "childToken": "The child ERC20 token.",
          "rootToken": "The root ERC20 token."
        }
      },
      "FxERC20Withdrawal(address,address,address,address,uint256)": {
        "params": {
          "amount": "The withdrawal amount.",
          "childToken": "The child ERC20 token.",
          "recipient": "The recipient address.",
          "rootToken": "The root ERC20 token.",
          "withdrawer": "The withdrawer address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The forwarder to check."
        },
        "returns": {
          "_0": "True if `forwarder` is trusted, false if not."
        }
      },
      "onERC20Received(address,address,uint256,bytes)": {
        "params": {
          "data": "Empty if the receiver is the same as the tokens sender, else the abi-encoded address of the receiver.",
          "from": "The previous tokens owner.",
          "value": "The amount of tokens transferred."
        },
        "returns": {
          "magicValue": "`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Note: This function call must use less than 30 000 gas.",
        "params": {
          "interfaceId": "the interface identifier to test."
        },
        "returns": {
          "_0": "True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
        }
      },
      "withdraw(address,uint256)": {
        "details": "Reverts with `FxERC20TokenNotMapped` if `childToken` has not been deployed through a mapping request.Reverts if the token transfer fails for any reason.",
        "params": {
          "amount": "The amount of tokens to withdraw.",
          "childToken": "The ERC20 child token which has previously been deployed as a mapping for a root token."
        }
      },
      "withdrawTo(address,address,uint256)": {
        "details": "Reverts with `FxERC20InvalidWithdrawalAddress` if `receiver` is the zero address.Reverts with `FxERC20TokenNotMapped` if `childToken` has not been deployed through a mapping request.Reverts if the token transfer fails for any reason.",
        "params": {
          "amount": "The amount of tokens to withdraw.",
          "childToken": "The ERC20 child token which has previously been deployed as a mapping for a root token.",
          "receiver": "The account receiving the withdrawal."
        }
      }
    },
    "title": "FxERC20MintBurnChildTunnel",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FxERC20ChildTokenLogicNotContract()": [
        {
          "notice": "Thrown during construction if the provided child token logic address is not a deployed contract."
        }
      ],
      "FxERC20InvalidSyncType(bytes32)": [
        {
          "notice": "Thrown if a sync request is of an unrecognized type."
        }
      ],
      "FxERC20InvalidWithdrawalAddress()": [
        {
          "notice": "Thrown if a withdrawal recipient is the zero address."
        }
      ],
      "FxERC20TokenAlreadyMapped(address,address)": [
        {
          "notice": "Thrown during a mapping request if the root token already has a mapping."
        }
      ],
      "FxERC20TokenNotMapped()": [
        {
          "notice": "Thrown during a withdrawal if the requested child token withdrawal was not mapped from a root token."
        }
      ],
      "IllegalInterfaceId()": [
        {
          "notice": "Thrown when setting the illegal interfaceId 0xffffffff."
        }
      ]
    },
    "events": {
      "FxERC20Deposit(address,address,address,address,uint256)": {
        "notice": "Emitted when some ERC20 token has been deposited."
      },
      "FxERC20TokenMapping(address,address)": {
        "notice": "Emitted when an ERC20 token has been mapped."
      },
      "FxERC20Withdrawal(address,address,address,address,uint256)": {
        "notice": "Emitted when some ERC20 token has been withdrawn."
      }
    },
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "Checks whether a forwarder is trusted."
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether this contract implements a given interface."
      },
      "withdraw(address,uint256)": {
        "notice": "Requests the withdrawal of an `amount` of `childToken` by and for the message sender.Note: Approval for `amount` of `childToken` must have been previously given to this contract."
      },
      "withdrawTo(address,address,uint256)": {
        "notice": "Requests the withdrawal of an `amount` of `childToken` by the message sender and for a `receiver`.Note: Approval for `amount` of `childToken` must have been previously given to this contract."
      }
    },
    "notice": "Fx child mintable burnable ERC20 tunnel.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10745,
        "contract": "contracts/fx-portal/tunnel/ERC20/FxERC20MintBurnChildTunnel.sol:FxERC20MintBurnChildTunnel",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10747,
        "contract": "contracts/fx-portal/tunnel/ERC20/FxERC20MintBurnChildTunnel.sol:FxERC20MintBurnChildTunnel",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14582,
        "contract": "contracts/fx-portal/tunnel/ERC20/FxERC20MintBurnChildTunnel.sol:FxERC20MintBurnChildTunnel",
        "label": "rootToChildToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}