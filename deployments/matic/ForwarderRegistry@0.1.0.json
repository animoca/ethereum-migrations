{
  "address": "0x539B86cD88fd41272335f9E46eAf7bF64f9Fa1e5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "ForwarderApproved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "enum ForwarderRegistry.SignatureType",
          "name": "signatureType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveAndForward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "approveForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "enum ForwarderRegistry.SignatureType",
          "name": "signatureType",
          "type": "uint8"
        }
      ],
      "name": "approveForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "enum ForwarderRegistry.SignatureType",
          "name": "signatureType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "checkApprovalAndForward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isForwarderFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x03a88aed6628b0501dde34f8b8ef36debde749d16c21441310a54bbea6d94910",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x80b12BD0F1793BF6CEa767Fa83Eb2068eaa17DC8",
    "contractAddress": null,
    "transactionIndex": 16,
    "gasUsed": "1406003",
    "logsBloom": "0x
    "blockHash": "0x771917303f991c1f05b43cc59e31e1d6a1ecb7d6606187e9022ad86050c0e559",
    "transactionHash": "0x03a88aed6628b0501dde34f8b8ef36debde749d16c21441310a54bbea6d94910",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 30428138,
        "transactionHash": "0x03a88aed6628b0501dde34f8b8ef36debde749d16c21441310a54bbea6d94910",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000080b12bd0f1793bf6cea767fa83eb2068eaa17dc8",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000015da8a8d68325030000000000000000000000000000000000000000000000088c88dca08efad330000000000000000000000000000000000000000000000618b23accaf053c3d9f0000000000000000000000000000000000000000000000088b2b33f7b877ae2d000000000000000000000000000000000000000000000618b3987557dbbf62a2",
        "logIndex": 41,
        "blockHash": "0x771917303f991c1f05b43cc59e31e1d6a1ecb7d6606187e9022ad86050c0e559"
      }
    ],
    "blockNumber": 30428138,
    "cumulativeGasUsed": "4346508",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9410edcddb86920fedd4d4a708e91790",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ForwarderApproved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"enum ForwarderRegistry.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndForward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approveForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"enum ForwarderRegistry.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"}],\"name\":\"approveForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"enum ForwarderRegistry.SignatureType\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkApprovalAndForward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isForwarderFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"events\":{\"ForwarderApproved(address,address,bool,uint256)\":{\"params\":{\"approved\":\"True for an approval, false for a disapproval.\",\"forwarder\":\"The account approved or disapproved as forwarder.\",\"nonce\":\"The `signer`'s account nonce before the approval change.\",\"signer\":\"The account for which `forwarder` is approved or disapproved.\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"domainSeparator\":\"The ERC1271 domain separator.\"}},\"approveAndForward(bytes,uint8,address,bytes)\":{\"params\":{\"data\":\"The content of the call (the signer address will be appended to it according to EIP-2771).\",\"signature\":\"Signature by the signer for approving the forwarder.\",\"target\":\"The destination of the call (that will receive the meta-transaction).\"}},\"approveForwarder(address,bool)\":{\"params\":{\"approved\":\"Whether to approve or disapprove (if previously approved) the forwarder.\",\"forwarder\":\"The address of the forwarder to change the approval of.\"}},\"approveForwarder(bool,bytes,uint8)\":{\"params\":{\"approved\":\"Whether to approve or disapprove (if previously approved) the forwarder.\",\"signature\":\"Signature by signer for approving forwarder.\",\"signatureType\":\"The signature type.\"}},\"checkApprovalAndForward(bytes,uint8,address,bytes)\":{\"params\":{\"data\":\"The content of the call (the signer address will be appended to it according to EIP-2771).\",\"signature\":\"Signature by the signer for approving the forwarder.\",\"target\":\"The destination of the call (that will receive the meta-transaction).\"}},\"forward(address,bytes)\":{\"params\":{\"data\":\"The content of the call (the signer address will be appended to it according to EIP-2771).\",\"target\":\"The destination of the call (that will receive the meta-transaction).\"}},\"getNonce(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"signer\":\"The signer account.\"},\"returns\":{\"nonce\":\"The current nonce for the `signer`/`forwarder` pair.\"}},\"isForwarderFor(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\"},\"returns\":{\"_0\":\"True if `forwarder` is a meta-transaction forwarder for `signer`, false otherwise.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"events\":{\"ForwarderApproved(address,address,bool,uint256)\":{\"notice\":\"Emitted when a forwarder is approved or disapproved.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Gets the ERC1271 DOMAIN_SEPARATOR.\"},\"approveAndForward(bytes,uint8,address,bytes)\":{\"notice\":\"Approves the forwarder and forwards the meta-transaction.\"},\"approveForwarder(address,bool)\":{\"notice\":\"Approves or disapproves a forwarder for the sender.\"},\"approveForwarder(bool,bytes,uint8)\":{\"notice\":\"Approves or disapproves a forwarder using EIP-2771 (msg.sender is the forwarder and the approval signer is appended to the calldata).\"},\"checkApprovalAndForward(bytes,uint8,address,bytes)\":{\"notice\":\"Checks the signed approval (but does not record it) and forwards the meta-transaction.\"},\"forward(address,bytes)\":{\"notice\":\"Forwards the meta-transaction (assuming the caller has been approved by the signer as a forwarder).\"},\"getNonce(address,address)\":{\"notice\":\"Gets the current nonce for the signer/forwarder pair.\"},\"isForwarderFor(address,address)\":{\"notice\":\"Checks whether an account is as a meta-transaction forwarder for a signer account.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"notice\":\"Users can allow specific forwarders to forward meta-transactions on their behalf.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/metatx/ForwarderRegistry.sol\":\"ForwarderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"contracts/cryptography/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Standard Signature Validation Method for Contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1271\\n/// @dev Note: This interface uses the initial version of ERC1271, which was later updated to use the same function signature as ERC1654.\\ninterface IERC1271 {\\n    /// @notice Returns whether the signature is valid for the data.\\n    /// @param data The signed data.\\n    /// @param signature The signature for `data`.\\n    /// @return magicValue `0x20c13b0b` if the signature is valid, else any other value.\\n    function isValidSignature(bytes calldata data, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x7b155e4d934aa6f2ff91f289ad0c400123226fbde1864f673ee222f15c2d88a9\",\"license\":\"MIT\"},\"contracts/cryptography/interfaces/IERC1654.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Dapp-wallet authentication process with contract wallets support.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1271\\n/// @dev This interface is used in the final version of ERC1271.\\ninterface IERC1654 {\\n    /// Returns whether the signature is valid for the data hash.\\n    /// @param hash The hash of the signed data.\\n    /// @param signature The signature for `hash`.\\n    /// @return magicValue `0x1626ba7e` if the signature is valid, else any other value.\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xfd31f6f6aa6ebffdb74a1822c1965a535adc37096fca95f41fad2f67de948937\",\"license\":\"MIT\"},\"contracts/metatx/ForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {IForwarderRegistry} from \\\"./../metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./../metatx/interfaces/IERC2771.sol\\\";\\nimport {IERC1271} from \\\"./../cryptography/interfaces/IERC1271.sol\\\";\\nimport {IERC1654} from \\\"./../cryptography/interfaces/IERC1654.sol\\\";\\nimport {ERC2771Data} from \\\"./libraries/ERC2771Data.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @notice Users can allow specific forwarders to forward meta-transactions on their behalf.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ncontract ForwarderRegistry is IForwarderRegistry, IERC2771 {\\n    using Address for address;\\n    using ECDSA for bytes32;\\n\\n    enum SignatureType {\\n        DIRECT,\\n        EIP1654,\\n        EIP1271\\n    }\\n\\n    struct Forwarder {\\n        uint248 nonce;\\n        bool approved;\\n    }\\n\\n    bytes4 internal constant ERC1271_MAGICVALUE = 0x20c13b0b;\\n    bytes4 internal constant ERC1654_MAGICVALUE = 0x1626ba7e;\\n\\n    bytes32 internal constant EIP712DOMAIN_NAME = keccak256(\\\"ForwarderRegistry\\\");\\n    bytes32 internal constant APPROVAL_TYPEHASH = keccak256(\\\"ApproveForwarder(address forwarder,bool approved,uint256 nonce)\\\");\\n\\n    mapping(address => mapping(address => Forwarder)) internal _forwarders;\\n\\n    uint256 private immutable _deploymentChainId;\\n    bytes32 private immutable _deploymentDomainSeparator;\\n\\n    /// @notice Emitted when a forwarder is approved or disapproved.\\n    /// @param signer The account for which `forwarder` is approved or disapproved.\\n    /// @param forwarder The account approved or disapproved as forwarder.\\n    /// @param approved True for an approval, false for a disapproval.\\n    /// @param nonce The `signer`'s account nonce before the approval change.\\n    event ForwarderApproved(address indexed signer, address indexed forwarder, bool approved, uint256 nonce);\\n\\n    constructor() {\\n        uint256 chainId;\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _deploymentChainId = chainId;\\n        _deploymentDomainSeparator = _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Approves or disapproves a forwarder for the sender.\\n    /// @param forwarder The address of the forwarder to change the approval of.\\n    /// @param approved Whether to approve or disapprove (if previously approved) the forwarder.\\n    function approveForwarder(address forwarder, bool approved) external {\\n        address signer = msg.sender;\\n        Forwarder storage forwarderData = _forwarders[signer][forwarder];\\n        _approveForwarder(forwarderData, signer, forwarder, approved, forwarderData.nonce);\\n    }\\n\\n    /// @notice Approves or disapproves a forwarder using EIP-2771 (msg.sender is the forwarder and the approval signer is appended to the calldata).\\n    /// @param approved Whether to approve or disapprove (if previously approved) the forwarder.\\n    /// @param signature Signature by signer for approving forwarder.\\n    /// @param signatureType The signature type.\\n    function approveForwarder(\\n        bool approved,\\n        bytes calldata signature,\\n        SignatureType signatureType\\n    ) external {\\n        address signer = ERC2771Data.msgSender();\\n        address forwarder = msg.sender;\\n\\n        Forwarder storage forwarderData = _forwarders[signer][forwarder];\\n        uint256 nonce = uint256(forwarderData.nonce);\\n\\n        _requireValidSignature(signer, forwarder, approved, nonce, signature, signatureType);\\n        _approveForwarder(forwarderData, signer, forwarder, approved, nonce);\\n    }\\n\\n    /// @notice Forwards the meta-transaction (assuming the caller has been approved by the signer as a forwarder).\\n    /// @param target The destination of the call (that will receive the meta-transaction).\\n    /// @param data The content of the call (the signer address will be appended to it according to EIP-2771).\\n    function forward(address target, bytes calldata data) external payable {\\n        address signer = ERC2771Data.msgSender();\\n        require(_forwarders[signer][msg.sender].approved, \\\"NOT_AUTHORIZED_FORWARDER\\\");\\n        target.functionCallWithValue(abi.encodePacked(data, signer), msg.value);\\n    }\\n\\n    /// @notice Approves the forwarder and forwards the meta-transaction.\\n    /// @param signature Signature by the signer for approving the forwarder.\\n    /// @param target The destination of the call (that will receive the meta-transaction).\\n    /// @param data The content of the call (the signer address will be appended to it according to EIP-2771).\\n    function approveAndForward(\\n        bytes calldata signature,\\n        SignatureType signatureType,\\n        address target,\\n        bytes calldata data\\n    ) external payable {\\n        address signer = ERC2771Data.msgSender();\\n        address forwarder = msg.sender;\\n\\n        Forwarder storage forwarderData = _forwarders[signer][forwarder];\\n        uint256 nonce = uint256(forwarderData.nonce);\\n\\n        _requireValidSignature(signer, forwarder, true, nonce, signature, signatureType);\\n        _approveForwarder(forwarderData, signer, forwarder, true, nonce);\\n\\n        target.functionCallWithValue(abi.encodePacked(data, signer), msg.value);\\n    }\\n\\n    /// @notice Checks the signed approval (but does not record it) and forwards the meta-transaction.\\n    /// @param signature Signature by the signer for approving the forwarder.\\n    /// @param target The destination of the call (that will receive the meta-transaction).\\n    /// @param data The content of the call (the signer address will be appended to it according to EIP-2771).\\n    function checkApprovalAndForward(\\n        bytes calldata signature,\\n        SignatureType signatureType,\\n        address target,\\n        bytes calldata data\\n    ) external payable {\\n        address signer = ERC2771Data.msgSender();\\n        address forwarder = msg.sender;\\n        _requireValidSignature(signer, forwarder, true, uint256(_forwarders[signer][forwarder].nonce), signature, signatureType);\\n        target.functionCallWithValue(abi.encodePacked(data, signer), msg.value);\\n    }\\n\\n    /// @notice Gets the ERC1271 DOMAIN_SEPARATOR.\\n    /// @return domainSeparator The ERC1271 domain separator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator) {\\n        return _DOMAIN_SEPARATOR();\\n    }\\n\\n    /// @notice Gets the current nonce for the signer/forwarder pair.\\n    /// @param signer The signer account.\\n    /// @param forwarder The forwarder account.\\n    /// @return nonce The current nonce for the `signer`/`forwarder` pair.\\n    function getNonce(address signer, address forwarder) external view returns (uint256 nonce) {\\n        return uint256(_forwarders[signer][forwarder].nonce);\\n    }\\n\\n    /// @inheritdoc IForwarderRegistry\\n    function isForwarderFor(address signer, address forwarder) external view override returns (bool) {\\n        return forwarder == address(this) || _forwarders[signer][forwarder].approved;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address) external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function _requireValidSignature(\\n        address signer,\\n        address forwarder,\\n        bool approved,\\n        uint256 nonce,\\n        bytes memory signature,\\n        SignatureType signatureType\\n    ) internal view {\\n        bytes memory data = abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _DOMAIN_SEPARATOR(), keccak256(abi.encode(APPROVAL_TYPEHASH, forwarder, approved, nonce)));\\n        if (signatureType == SignatureType.EIP1271) {\\n            require(IERC1271(signer).isValidSignature(data, signature) == ERC1271_MAGICVALUE, \\\"SIGNATURE_1271_INVALID\\\");\\n        } else if (signatureType == SignatureType.EIP1654) {\\n            require(IERC1654(signer).isValidSignature(keccak256(data), signature) == ERC1654_MAGICVALUE, \\\"SIGNATURE_1654_INVALID\\\");\\n        } else {\\n            address actualSigner = keccak256(data).recover(signature);\\n            require(signer == actualSigner, \\\"SIGNATURE_WRONG_SIGNER\\\");\\n        }\\n    }\\n\\n    function _approveForwarder(\\n        Forwarder storage forwarderData,\\n        address signer,\\n        address forwarder,\\n        bool approved,\\n        uint256 nonce\\n    ) internal {\\n        forwarderData.approved = approved;\\n        unchecked {\\n            forwarderData.nonce = uint248(nonce + 1);\\n        }\\n        emit ForwarderApproved(signer, forwarder, approved, nonce);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _DOMAIN_SEPARATOR() private view returns (bytes32) {\\n        uint256 chainId;\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        // in case a fork happens, to support the chain that had to change its chainId, we compue the domain operator\\n        return chainId == _deploymentChainId ? _deploymentDomainSeparator : _calculateDomainSeparator(chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"),\\n                    EIP712DOMAIN_NAME,\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x49b56a5a3252444064029fdff43a9ac14b7d2b92776780c0e067cf1cd09a56f2\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as a meta-transaction forwarder for a signer account.\\n    /// @param forwarder The signer account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isForwarder True if `forwarder` is a meta-transaction forwarder for `signer`, false otherwise.\\n    function isForwarderFor(address signer, address forwarder) external view returns (bool isForwarder);\\n}\\n\",\"keccak256\":\"0xccd7dc155ed9fc7f6ea5eb697312f452669033a74ff764a9be97416f00b22b48\",\"license\":\"MIT\"},\"contracts/metatx/libraries/ERC2771Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Data {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in ERC2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata omitting the appended sender address, as specified in ERC2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        return msg.data[:msg.data.length - 20];\\n    }\\n}\\n\",\"keccak256\":\"0x0595ee7124b9bb0468a7c2820365261811fd9d84fce7b843708cd738d8afc709\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50466080818152604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f06a520fda4ca688235391b02e357c6a65eb2a3bb40a69c0199f3f7f9cccee041828401526060820185905230828501528251808303909401845260a0909101909152815191012060a0525060805160a05161188e6100b66000396000610daa01526000610d03015261188e6000f3fe6080604052600436106100965760003560e01c8063572b6c0511610069578063d828435d1161004e578063d828435d1461015c578063e55ae5e2146101ce578063e60125d6146101e157600080fd5b8063572b6c05146101185780636fadcf721461014957600080fd5b8063040c1e551461009b5780631d095a69146100bd57806335297d1b146100dd5780633644e515146100f0575b600080fd5b3480156100a757600080fd5b506100bb6100b6366004611445565b610201565b005b3480156100c957600080fd5b506100bb6100d83660046114c9565b610269565b6100bb6100eb36600461152e565b61032c565b3480156100fc57600080fd5b50610105610444565b6040519081526020015b60405180910390f35b34801561012457600080fd5b506101396101333660046115c2565b50600190565b604051901515815260200161010f565b6100bb6101573660046115dd565b610453565b34801561016857600080fd5b50610105610177366004611630565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152602081815260408083209390941682529190915220547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b6100bb6101dc36600461152e565b61058e565b3480156101ed57600080fd5b506101396101fc366004611630565b610764565b3360008181526020818152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080546102639082908490879087907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff166107e4565b50505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c600081815260208181526040808320338085529083529281902080548251601f890185900485028101850190935287835290927effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091169161031591869186918c9186918d908d90819084018382808284376000920191909152508d92506108b4915050565b6103228285858b856107e4565b5050505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6000818152602081815260408083203380855290835292819020548151601f8b018490048402810184019092528982526103d592859285926001927effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90911691908e908e90819084018382808284376000920191909152508e92506108b4915050565b6104398484846040516020016103ed9392919061165a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff87169034610cd0565b505050505050505050565b600061044e610cfe565b905090565b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6000818152602081815260408083203384529091529020547f0100000000000000000000000000000000000000000000000000000000000000900460ff16610523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4f545f415554484f52495a45445f464f52574152444552000000000000000060448201526064015b60405180910390fd5b61058783838360405160200161053b9392919061165a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff86169034610cd0565b5050505050565b6000367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c9050600033905060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690506106e584846001848e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d6108b4565b6106f38285856001856107e4565b61075786868660405160200161070b9392919061165a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff89169034610cd0565b5050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82163014806107dd575073ffffffffffffffffffffffffffffffffffffffff838116600090815260208181526040808320938616835292905220547f0100000000000000000000000000000000000000000000000000000000000000900460ff165b9392505050565b600181017effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168215157f010000000000000000000000000000000000000000000000000000000000000081027fff0000000000000000000000000000000000000000000000000000000000000016919091178655604080519182526020820183905273ffffffffffffffffffffffffffffffffffffffff85811692908716917f26eeb9a45fc0ed1a714977219563a1ae73a8da96bc19e08479dab98729dec65a910160405180910390a35050505050565b60006108be610cfe565b604080517f9a9934e308f412c61ed88f4935ffd5a85e07384c7daec62cf23534d1ccc6a814602082015273ffffffffffffffffffffffffffffffffffffffff89169181019190915286151560608201526080810186905260a001604051602081830303815290604052805190602001206040516020016109709291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905060028260028111156109b4576109b4611693565b03610ade576040517f20c13b0b000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff8916906320c13b0b90610a0f9085908890600401611738565b602060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190611766565b7fffffffff000000000000000000000000000000000000000000000000000000001614610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5349474e41545552455f313237315f494e56414c494400000000000000000000604482015260640161051a565b610cc7565b6001826002811115610af257610af2611693565b03610c1c57805160208201206040517f1626ba7e000000000000000000000000000000000000000000000000000000008082529173ffffffffffffffffffffffffffffffffffffffff8a1691631626ba7e91610b529188906004016117a8565b602060405180830381865afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190611766565b7fffffffff000000000000000000000000000000000000000000000000000000001614610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5349474e41545552455f313635345f494e56414c494400000000000000000000604482015260640161051a565b80516020820120600090610c309085610dd0565b90508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5349474e41545552455f57524f4e475f5349474e455200000000000000000000604482015260640161051a565b50505050505050565b6060610cf684848460405180606001604052806029815260200161183060299139610df4565b949350505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114610da857604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f06a520fda4ca688235391b02e357c6a65eb2a3bb40a69c0199f3f7f9cccee0418284015260608201849052306080808401919091528351808403909101815260a09092019092528051910120610dca565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000806000610ddf8585610f8a565b91509150610dec81610ff8565b509392505050565b606082471015610e86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161051a565b73ffffffffffffffffffffffffffffffffffffffff85163b610f04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051a565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610f2d91906117c1565b60006040518083038185875af1925050503d8060008114610f6a576040519150601f19603f3d011682016040523d82523d6000602084013e610f6f565b606091505b5091509150610f7f82828661124f565b979650505050505050565b6000808251604103610fc05760208301516040840151606085015160001a610fb4878285856112a2565b94509450505050610ff1565b8251604003610fe95760208301516040840151610fde8683836113ba565b935093505050610ff1565b506000905060025b9250929050565b600081600481111561100c5761100c611693565b036110145750565b600181600481111561102857611028611693565b0361108f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161051a565b60028160048111156110a3576110a3611693565b0361110a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161051a565b600381600481111561111e5761111e611693565b036111ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161051a565b60048160048111156111bf576111bf611693565b0361124c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161051a565b50565b6060831561125e5750816107dd565b82511561126e5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051a91906117dd565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112d957506000905060036113b1565b8460ff16601b141580156112f157508460ff16601c14155b1561130257506000905060046113b1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611356573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166113aa576000600192509250506113b1565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816113f060ff86901c601b6117f0565b90506113fe878288856112a2565b935093505050935093915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461143057600080fd5b919050565b8035801515811461143057600080fd5b6000806040838503121561145857600080fd5b6114618361140c565b915061146f60208401611435565b90509250929050565b60008083601f84011261148a57600080fd5b50813567ffffffffffffffff8111156114a257600080fd5b602083019150836020828501011115610ff157600080fd5b80356003811061143057600080fd5b600080600080606085870312156114df57600080fd5b6114e885611435565b9350602085013567ffffffffffffffff81111561150457600080fd5b61151087828801611478565b90945092506115239050604086016114ba565b905092959194509250565b6000806000806000806080878903121561154757600080fd5b863567ffffffffffffffff8082111561155f57600080fd5b61156b8a838b01611478565b909850965086915061157f60208a016114ba565b955061158d60408a0161140c565b945060608901359150808211156115a357600080fd5b506115b089828a01611478565b979a9699509497509295939492505050565b6000602082840312156115d457600080fd5b6107dd8261140c565b6000806000604084860312156115f257600080fd5b6115fb8461140c565b9250602084013567ffffffffffffffff81111561161757600080fd5b61162386828701611478565b9497909650939450505050565b6000806040838503121561164357600080fd5b61164c8361140c565b915061146f6020840161140c565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60005b838110156116dd5781810151838201526020016116c5565b838111156102635750506000910152565b600081518084526117068160208601602086016116c2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600061174b60408301856116ee565b828103602084015261175d81856116ee565b95945050505050565b60006020828403121561177857600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146107dd57600080fd5b828152604060208201526000610cf660408301846116ee565b600082516117d38184602087016116c2565b9190910192915050565b6020815260006107dd60208301846116ee565b6000821982111561182a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220f155beed9d5d4f9588ec08a29b5fd9d8ed707501dcf0524b6947e19081ceee6764736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c8063572b6c0511610069578063d828435d1161004e578063d828435d1461015c578063e55ae5e2146101ce578063e60125d6146101e157600080fd5b8063572b6c05146101185780636fadcf721461014957600080fd5b8063040c1e551461009b5780631d095a69146100bd57806335297d1b146100dd5780633644e515146100f0575b600080fd5b3480156100a757600080fd5b506100bb6100b6366004611445565b610201565b005b3480156100c957600080fd5b506100bb6100d83660046114c9565b610269565b6100bb6100eb36600461152e565b61032c565b3480156100fc57600080fd5b50610105610444565b6040519081526020015b60405180910390f35b34801561012457600080fd5b506101396101333660046115c2565b50600190565b604051901515815260200161010f565b6100bb6101573660046115dd565b610453565b34801561016857600080fd5b50610105610177366004611630565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152602081815260408083209390941682529190915220547effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b6100bb6101dc36600461152e565b61058e565b3480156101ed57600080fd5b506101396101fc366004611630565b610764565b3360008181526020818152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080546102639082908490879087907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff166107e4565b50505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c600081815260208181526040808320338085529083529281902080548251601f890185900485028101850190935287835290927effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091169161031591869186918c9186918d908d90819084018382808284376000920191909152508d92506108b4915050565b6103228285858b856107e4565b5050505050505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6000818152602081815260408083203380855290835292819020548151601f8b018490048402810184019092528982526103d592859285926001927effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90911691908e908e90819084018382808284376000920191909152508e92506108b4915050565b6104398484846040516020016103ed9392919061165a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff87169034610cd0565b505050505050505050565b600061044e610cfe565b905090565b367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6000818152602081815260408083203384529091529020547f0100000000000000000000000000000000000000000000000000000000000000900460ff16610523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4f545f415554484f52495a45445f464f52574152444552000000000000000060448201526064015b60405180910390fd5b61058783838360405160200161053b9392919061165a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff86169034610cd0565b5050505050565b6000367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c9050600033905060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160009054906101000a90047effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690506106e584846001848e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d6108b4565b6106f38285856001856107e4565b61075786868660405160200161070b9392919061165a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905273ffffffffffffffffffffffffffffffffffffffff89169034610cd0565b5050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82163014806107dd575073ffffffffffffffffffffffffffffffffffffffff838116600090815260208181526040808320938616835292905220547f0100000000000000000000000000000000000000000000000000000000000000900460ff165b9392505050565b600181017effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168215157f010000000000000000000000000000000000000000000000000000000000000081027fff0000000000000000000000000000000000000000000000000000000000000016919091178655604080519182526020820183905273ffffffffffffffffffffffffffffffffffffffff85811692908716917f26eeb9a45fc0ed1a714977219563a1ae73a8da96bc19e08479dab98729dec65a910160405180910390a35050505050565b60006108be610cfe565b604080517f9a9934e308f412c61ed88f4935ffd5a85e07384c7daec62cf23534d1ccc6a814602082015273ffffffffffffffffffffffffffffffffffffffff89169181019190915286151560608201526080810186905260a001604051602081830303815290604052805190602001206040516020016109709291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905060028260028111156109b4576109b4611693565b03610ade576040517f20c13b0b000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff8916906320c13b0b90610a0f9085908890600401611738565b602060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190611766565b7fffffffff000000000000000000000000000000000000000000000000000000001614610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5349474e41545552455f313237315f494e56414c494400000000000000000000604482015260640161051a565b610cc7565b6001826002811115610af257610af2611693565b03610c1c57805160208201206040517f1626ba7e000000000000000000000000000000000000000000000000000000008082529173ffffffffffffffffffffffffffffffffffffffff8a1691631626ba7e91610b529188906004016117a8565b602060405180830381865afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190611766565b7fffffffff000000000000000000000000000000000000000000000000000000001614610ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5349474e41545552455f313635345f494e56414c494400000000000000000000604482015260640161051a565b80516020820120600090610c309085610dd0565b90508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f5349474e41545552455f57524f4e475f5349474e455200000000000000000000604482015260640161051a565b50505050505050565b6060610cf684848460405180606001604052806029815260200161183060299139610df4565b949350505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114610da857604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527f06a520fda4ca688235391b02e357c6a65eb2a3bb40a69c0199f3f7f9cccee0418284015260608201849052306080808401919091528351808403909101815260a09092019092528051910120610dca565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6000806000610ddf8585610f8a565b91509150610dec81610ff8565b509392505050565b606082471015610e86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161051a565b73ffffffffffffffffffffffffffffffffffffffff85163b610f04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051a565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610f2d91906117c1565b60006040518083038185875af1925050503d8060008114610f6a576040519150601f19603f3d011682016040523d82523d6000602084013e610f6f565b606091505b5091509150610f7f82828661124f565b979650505050505050565b6000808251604103610fc05760208301516040840151606085015160001a610fb4878285856112a2565b94509450505050610ff1565b8251604003610fe95760208301516040840151610fde8683836113ba565b935093505050610ff1565b506000905060025b9250929050565b600081600481111561100c5761100c611693565b036110145750565b600181600481111561102857611028611693565b0361108f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161051a565b60028160048111156110a3576110a3611693565b0361110a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161051a565b600381600481111561111e5761111e611693565b036111ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161051a565b60048160048111156111bf576111bf611693565b0361124c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161051a565b50565b6060831561125e5750816107dd565b82511561126e5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051a91906117dd565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112d957506000905060036113b1565b8460ff16601b141580156112f157508460ff16601c14155b1561130257506000905060046113b1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611356573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166113aa576000600192509250506113b1565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816113f060ff86901c601b6117f0565b90506113fe878288856112a2565b935093505050935093915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461143057600080fd5b919050565b8035801515811461143057600080fd5b6000806040838503121561145857600080fd5b6114618361140c565b915061146f60208401611435565b90509250929050565b60008083601f84011261148a57600080fd5b50813567ffffffffffffffff8111156114a257600080fd5b602083019150836020828501011115610ff157600080fd5b80356003811061143057600080fd5b600080600080606085870312156114df57600080fd5b6114e885611435565b9350602085013567ffffffffffffffff81111561150457600080fd5b61151087828801611478565b90945092506115239050604086016114ba565b905092959194509250565b6000806000806000806080878903121561154757600080fd5b863567ffffffffffffffff8082111561155f57600080fd5b61156b8a838b01611478565b909850965086915061157f60208a016114ba565b955061158d60408a0161140c565b945060608901359150808211156115a357600080fd5b506115b089828a01611478565b979a9699509497509295939492505050565b6000602082840312156115d457600080fd5b6107dd8261140c565b6000806000604084860312156115f257600080fd5b6115fb8461140c565b9250602084013567ffffffffffffffff81111561161757600080fd5b61162386828701611478565b9497909650939450505050565b6000806040838503121561164357600080fd5b61164c8361140c565b915061146f6020840161140c565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60005b838110156116dd5781810151838201526020016116c5565b838111156102635750506000910152565b600081518084526117068160208601602086016116c2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600061174b60408301856116ee565b828103602084015261175d81856116ee565b95945050505050565b60006020828403121561177857600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146107dd57600080fd5b828152604060208201526000610cf660408301846116ee565b600082516117d38184602087016116c2565b9190910192915050565b6020815260006107dd60208301846116ee565b6000821982111561182a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220f155beed9d5d4f9588ec08a29b5fd9d8ed707501dcf0524b6947e19081ceee6764736f6c634300080f0033",
  "devdoc": {
    "details": "Derived from https://github.com/wighawag/universal-forwarder (MIT licence)",
    "events": {
      "ForwarderApproved(address,address,bool,uint256)": {
        "params": {
          "approved": "True for an approval, false for a disapproval.",
          "forwarder": "The account approved or disapproved as forwarder.",
          "nonce": "The `signer`'s account nonce before the approval change.",
          "signer": "The account for which `forwarder` is approved or disapproved."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "returns": {
          "domainSeparator": "The ERC1271 domain separator."
        }
      },
      "approveAndForward(bytes,uint8,address,bytes)": {
        "params": {
          "data": "The content of the call (the signer address will be appended to it according to EIP-2771).",
          "signature": "Signature by the signer for approving the forwarder.",
          "target": "The destination of the call (that will receive the meta-transaction)."
        }
      },
      "approveForwarder(address,bool)": {
        "params": {
          "approved": "Whether to approve or disapprove (if previously approved) the forwarder.",
          "forwarder": "The address of the forwarder to change the approval of."
        }
      },
      "approveForwarder(bool,bytes,uint8)": {
        "params": {
          "approved": "Whether to approve or disapprove (if previously approved) the forwarder.",
          "signature": "Signature by signer for approving forwarder.",
          "signatureType": "The signature type."
        }
      },
      "checkApprovalAndForward(bytes,uint8,address,bytes)": {
        "params": {
          "data": "The content of the call (the signer address will be appended to it according to EIP-2771).",
          "signature": "Signature by the signer for approving the forwarder.",
          "target": "The destination of the call (that will receive the meta-transaction)."
        }
      },
      "forward(address,bytes)": {
        "params": {
          "data": "The content of the call (the signer address will be appended to it according to EIP-2771).",
          "target": "The destination of the call (that will receive the meta-transaction)."
        }
      },
      "getNonce(address,address)": {
        "params": {
          "forwarder": "The forwarder account.",
          "signer": "The signer account."
        },
        "returns": {
          "nonce": "The current nonce for the `signer`/`forwarder` pair."
        }
      },
      "isForwarderFor(address,address)": {
        "params": {
          "forwarder": "The forwarder account."
        },
        "returns": {
          "_0": "True if `forwarder` is a meta-transaction forwarder for `signer`, false otherwise."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The forwarder to check."
        },
        "returns": {
          "_0": "True if `forwarder` is trusted, false if not."
        }
      }
    },
    "title": "Universal Meta-Transactions Forwarder Registry.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ForwarderApproved(address,address,bool,uint256)": {
        "notice": "Emitted when a forwarder is approved or disapproved."
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Gets the ERC1271 DOMAIN_SEPARATOR."
      },
      "approveAndForward(bytes,uint8,address,bytes)": {
        "notice": "Approves the forwarder and forwards the meta-transaction."
      },
      "approveForwarder(address,bool)": {
        "notice": "Approves or disapproves a forwarder for the sender."
      },
      "approveForwarder(bool,bytes,uint8)": {
        "notice": "Approves or disapproves a forwarder using EIP-2771 (msg.sender is the forwarder and the approval signer is appended to the calldata)."
      },
      "checkApprovalAndForward(bytes,uint8,address,bytes)": {
        "notice": "Checks the signed approval (but does not record it) and forwards the meta-transaction."
      },
      "forward(address,bytes)": {
        "notice": "Forwards the meta-transaction (assuming the caller has been approved by the signer as a forwarder)."
      },
      "getNonce(address,address)": {
        "notice": "Gets the current nonce for the signer/forwarder pair."
      },
      "isForwarderFor(address,address)": {
        "notice": "Checks whether an account is as a meta-transaction forwarder for a signer account."
      },
      "isTrustedForwarder(address)": {
        "notice": "Checks whether a forwarder is trusted."
      }
    },
    "notice": "Users can allow specific forwarders to forward meta-transactions on their behalf.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5385,
        "contract": "contracts/metatx/ForwarderRegistry.sol:ForwarderRegistry",
        "label": "_forwarders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Forwarder)5362_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Forwarder)5362_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ForwarderRegistry.Forwarder))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Forwarder)5362_storage)"
      },
      "t_mapping(t_address,t_struct(Forwarder)5362_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ForwarderRegistry.Forwarder)",
        "numberOfBytes": "32",
        "value": "t_struct(Forwarder)5362_storage"
      },
      "t_struct(Forwarder)5362_storage": {
        "encoding": "inplace",
        "label": "struct ForwarderRegistry.Forwarder",
        "members": [
          {
            "astId": 5359,
            "contract": "contracts/metatx/ForwarderRegistry.sol:ForwarderRegistry",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint248"
          },
          {
            "astId": 5361,
            "contract": "contracts/metatx/ForwarderRegistry.sol:ForwarderRegistry",
            "label": "approved",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      }
    }
  }
}